//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g 2011-11-09 21:55:59

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class ReptileLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__17=17;
	public const int T__18=18;
	public const int T__19=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int BOOL=4;
	public const int CHAR=5;
	public const int COMMENT=6;
	public const int DOUBLE=7;
	public const int ESC_SEQ=8;
	public const int EXPONENT=9;
	public const int HEX_DIGIT=10;
	public const int ID=11;
	public const int INT=12;
	public const int OCTAL_ESC=13;
	public const int UNICODE_ESC=14;
	public const int VOID=15;
	public const int WS=16;


	public override void ReportError(RecognitionException e)
	{
		throw e;
	}


    // delegates
    // delegators

	public ReptileLexer()
	{
		OnCreated();
	}

	public ReptileLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public ReptileLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g"; } }

	private static readonly bool[] decisionCanBacktrack = new bool[0];

	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__17() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__17() {}

    // $ANTLR start "T__17"
    [GrammarRule("T__17")]
    private void mT__17()
    {
    	EnterRule_T__17();
    	EnterRule("T__17", 1);
    	TraceIn("T__17", 1);
    		try
    		{
    		int _type = T__17;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:15:7: ( '!=' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:15:9: '!='
    		{
    		DebugLocation(15, 9);
    		Match("!="); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__17", 1);
    		LeaveRule("T__17", 1);
    		LeaveRule_T__17();
        }
    }
    // $ANTLR end "T__17"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__18() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__18() {}

    // $ANTLR start "T__18"
    [GrammarRule("T__18")]
    private void mT__18()
    {
    	EnterRule_T__18();
    	EnterRule("T__18", 2);
    	TraceIn("T__18", 2);
    		try
    		{
    		int _type = T__18;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:16:7: ( '(' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:16:9: '('
    		{
    		DebugLocation(16, 9);
    		Match('('); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__18", 2);
    		LeaveRule("T__18", 2);
    		LeaveRule_T__18();
        }
    }
    // $ANTLR end "T__18"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__19() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__19() {}

    // $ANTLR start "T__19"
    [GrammarRule("T__19")]
    private void mT__19()
    {
    	EnterRule_T__19();
    	EnterRule("T__19", 3);
    	TraceIn("T__19", 3);
    		try
    		{
    		int _type = T__19;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:17:7: ( ')' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:17:9: ')'
    		{
    		DebugLocation(17, 9);
    		Match(')'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__19", 3);
    		LeaveRule("T__19", 3);
    		LeaveRule_T__19();
        }
    }
    // $ANTLR end "T__19"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__20() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__20() {}

    // $ANTLR start "T__20"
    [GrammarRule("T__20")]
    private void mT__20()
    {
    	EnterRule_T__20();
    	EnterRule("T__20", 4);
    	TraceIn("T__20", 4);
    		try
    		{
    		int _type = T__20;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:18:7: ( '*' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:18:9: '*'
    		{
    		DebugLocation(18, 9);
    		Match('*'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__20", 4);
    		LeaveRule("T__20", 4);
    		LeaveRule_T__20();
        }
    }
    // $ANTLR end "T__20"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__21() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__21() {}

    // $ANTLR start "T__21"
    [GrammarRule("T__21")]
    private void mT__21()
    {
    	EnterRule_T__21();
    	EnterRule("T__21", 5);
    	TraceIn("T__21", 5);
    		try
    		{
    		int _type = T__21;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:19:7: ( '+' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:19:9: '+'
    		{
    		DebugLocation(19, 9);
    		Match('+'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__21", 5);
    		LeaveRule("T__21", 5);
    		LeaveRule_T__21();
        }
    }
    // $ANTLR end "T__21"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__22() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__22() {}

    // $ANTLR start "T__22"
    [GrammarRule("T__22")]
    private void mT__22()
    {
    	EnterRule_T__22();
    	EnterRule("T__22", 6);
    	TraceIn("T__22", 6);
    		try
    		{
    		int _type = T__22;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:20:7: ( ',' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:20:9: ','
    		{
    		DebugLocation(20, 9);
    		Match(','); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__22", 6);
    		LeaveRule("T__22", 6);
    		LeaveRule_T__22();
        }
    }
    // $ANTLR end "T__22"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__23() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__23() {}

    // $ANTLR start "T__23"
    [GrammarRule("T__23")]
    private void mT__23()
    {
    	EnterRule_T__23();
    	EnterRule("T__23", 7);
    	TraceIn("T__23", 7);
    		try
    		{
    		int _type = T__23;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:21:7: ( '-' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:21:9: '-'
    		{
    		DebugLocation(21, 9);
    		Match('-'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__23", 7);
    		LeaveRule("T__23", 7);
    		LeaveRule_T__23();
        }
    }
    // $ANTLR end "T__23"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__24() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__24() {}

    // $ANTLR start "T__24"
    [GrammarRule("T__24")]
    private void mT__24()
    {
    	EnterRule_T__24();
    	EnterRule("T__24", 8);
    	TraceIn("T__24", 8);
    		try
    		{
    		int _type = T__24;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:22:7: ( '.' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:22:9: '.'
    		{
    		DebugLocation(22, 9);
    		Match('.'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__24", 8);
    		LeaveRule("T__24", 8);
    		LeaveRule_T__24();
        }
    }
    // $ANTLR end "T__24"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__25() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__25() {}

    // $ANTLR start "T__25"
    [GrammarRule("T__25")]
    private void mT__25()
    {
    	EnterRule_T__25();
    	EnterRule("T__25", 9);
    	TraceIn("T__25", 9);
    		try
    		{
    		int _type = T__25;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:23:7: ( '/' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:23:9: '/'
    		{
    		DebugLocation(23, 9);
    		Match('/'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__25", 9);
    		LeaveRule("T__25", 9);
    		LeaveRule_T__25();
        }
    }
    // $ANTLR end "T__25"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__26() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__26() {}

    // $ANTLR start "T__26"
    [GrammarRule("T__26")]
    private void mT__26()
    {
    	EnterRule_T__26();
    	EnterRule("T__26", 10);
    	TraceIn("T__26", 10);
    		try
    		{
    		int _type = T__26;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:24:7: ( ':' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:24:9: ':'
    		{
    		DebugLocation(24, 9);
    		Match(':'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__26", 10);
    		LeaveRule("T__26", 10);
    		LeaveRule_T__26();
        }
    }
    // $ANTLR end "T__26"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__27() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__27() {}

    // $ANTLR start "T__27"
    [GrammarRule("T__27")]
    private void mT__27()
    {
    	EnterRule_T__27();
    	EnterRule("T__27", 11);
    	TraceIn("T__27", 11);
    		try
    		{
    		int _type = T__27;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:25:7: ( ';' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:25:9: ';'
    		{
    		DebugLocation(25, 9);
    		Match(';'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__27", 11);
    		LeaveRule("T__27", 11);
    		LeaveRule_T__27();
        }
    }
    // $ANTLR end "T__27"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__28() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__28() {}

    // $ANTLR start "T__28"
    [GrammarRule("T__28")]
    private void mT__28()
    {
    	EnterRule_T__28();
    	EnterRule("T__28", 12);
    	TraceIn("T__28", 12);
    		try
    		{
    		int _type = T__28;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:26:7: ( '<' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:26:9: '<'
    		{
    		DebugLocation(26, 9);
    		Match('<'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__28", 12);
    		LeaveRule("T__28", 12);
    		LeaveRule_T__28();
        }
    }
    // $ANTLR end "T__28"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__29() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__29() {}

    // $ANTLR start "T__29"
    [GrammarRule("T__29")]
    private void mT__29()
    {
    	EnterRule_T__29();
    	EnterRule("T__29", 13);
    	TraceIn("T__29", 13);
    		try
    		{
    		int _type = T__29;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:27:7: ( '<=' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:27:9: '<='
    		{
    		DebugLocation(27, 9);
    		Match("<="); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__29", 13);
    		LeaveRule("T__29", 13);
    		LeaveRule_T__29();
        }
    }
    // $ANTLR end "T__29"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__30() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__30() {}

    // $ANTLR start "T__30"
    [GrammarRule("T__30")]
    private void mT__30()
    {
    	EnterRule_T__30();
    	EnterRule("T__30", 14);
    	TraceIn("T__30", 14);
    		try
    		{
    		int _type = T__30;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:28:7: ( '=' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:28:9: '='
    		{
    		DebugLocation(28, 9);
    		Match('='); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__30", 14);
    		LeaveRule("T__30", 14);
    		LeaveRule_T__30();
        }
    }
    // $ANTLR end "T__30"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__31() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__31() {}

    // $ANTLR start "T__31"
    [GrammarRule("T__31")]
    private void mT__31()
    {
    	EnterRule_T__31();
    	EnterRule("T__31", 15);
    	TraceIn("T__31", 15);
    		try
    		{
    		int _type = T__31;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:29:7: ( '==' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:29:9: '=='
    		{
    		DebugLocation(29, 9);
    		Match("=="); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__31", 15);
    		LeaveRule("T__31", 15);
    		LeaveRule_T__31();
        }
    }
    // $ANTLR end "T__31"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__32() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__32() {}

    // $ANTLR start "T__32"
    [GrammarRule("T__32")]
    private void mT__32()
    {
    	EnterRule_T__32();
    	EnterRule("T__32", 16);
    	TraceIn("T__32", 16);
    		try
    		{
    		int _type = T__32;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:30:7: ( '>' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:30:9: '>'
    		{
    		DebugLocation(30, 9);
    		Match('>'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__32", 16);
    		LeaveRule("T__32", 16);
    		LeaveRule_T__32();
        }
    }
    // $ANTLR end "T__32"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__33() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__33() {}

    // $ANTLR start "T__33"
    [GrammarRule("T__33")]
    private void mT__33()
    {
    	EnterRule_T__33();
    	EnterRule("T__33", 17);
    	TraceIn("T__33", 17);
    		try
    		{
    		int _type = T__33;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:31:7: ( '>=' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:31:9: '>='
    		{
    		DebugLocation(31, 9);
    		Match(">="); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__33", 17);
    		LeaveRule("T__33", 17);
    		LeaveRule_T__33();
        }
    }
    // $ANTLR end "T__33"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__34() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__34() {}

    // $ANTLR start "T__34"
    [GrammarRule("T__34")]
    private void mT__34()
    {
    	EnterRule_T__34();
    	EnterRule("T__34", 18);
    	TraceIn("T__34", 18);
    		try
    		{
    		int _type = T__34;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:32:7: ( 'CharVector' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:32:9: 'CharVector'
    		{
    		DebugLocation(32, 9);
    		Match("CharVector"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__34", 18);
    		LeaveRule("T__34", 18);
    		LeaveRule_T__34();
        }
    }
    // $ANTLR end "T__34"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__35() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__35() {}

    // $ANTLR start "T__35"
    [GrammarRule("T__35")]
    private void mT__35()
    {
    	EnterRule_T__35();
    	EnterRule("T__35", 19);
    	TraceIn("T__35", 19);
    		try
    		{
    		int _type = T__35;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:33:7: ( 'DoubleVector' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:33:9: 'DoubleVector'
    		{
    		DebugLocation(33, 9);
    		Match("DoubleVector"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__35", 19);
    		LeaveRule("T__35", 19);
    		LeaveRule_T__35();
        }
    }
    // $ANTLR end "T__35"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__36() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__36() {}

    // $ANTLR start "T__36"
    [GrammarRule("T__36")]
    private void mT__36()
    {
    	EnterRule_T__36();
    	EnterRule("T__36", 20);
    	TraceIn("T__36", 20);
    		try
    		{
    		int _type = T__36;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:34:7: ( 'IntVector' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:34:9: 'IntVector'
    		{
    		DebugLocation(34, 9);
    		Match("IntVector"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__36", 20);
    		LeaveRule("T__36", 20);
    		LeaveRule_T__36();
        }
    }
    // $ANTLR end "T__36"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__37() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__37() {}

    // $ANTLR start "T__37"
    [GrammarRule("T__37")]
    private void mT__37()
    {
    	EnterRule_T__37();
    	EnterRule("T__37", 21);
    	TraceIn("T__37", 21);
    		try
    		{
    		int _type = T__37;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:35:7: ( 'Main' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:35:9: 'Main'
    		{
    		DebugLocation(35, 9);
    		Match("Main"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__37", 21);
    		LeaveRule("T__37", 21);
    		LeaveRule_T__37();
        }
    }
    // $ANTLR end "T__37"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__38() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__38() {}

    // $ANTLR start "T__38"
    [GrammarRule("T__38")]
    private void mT__38()
    {
    	EnterRule_T__38();
    	EnterRule("T__38", 22);
    	TraceIn("T__38", 22);
    		try
    		{
    		int _type = T__38;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:36:7: ( '[' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:36:9: '['
    		{
    		DebugLocation(36, 9);
    		Match('['); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__38", 22);
    		LeaveRule("T__38", 22);
    		LeaveRule_T__38();
        }
    }
    // $ANTLR end "T__38"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__39() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__39() {}

    // $ANTLR start "T__39"
    [GrammarRule("T__39")]
    private void mT__39()
    {
    	EnterRule_T__39();
    	EnterRule("T__39", 23);
    	TraceIn("T__39", 23);
    		try
    		{
    		int _type = T__39;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:37:7: ( ']' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:37:9: ']'
    		{
    		DebugLocation(37, 9);
    		Match(']'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__39", 23);
    		LeaveRule("T__39", 23);
    		LeaveRule_T__39();
        }
    }
    // $ANTLR end "T__39"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__40() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__40() {}

    // $ANTLR start "T__40"
    [GrammarRule("T__40")]
    private void mT__40()
    {
    	EnterRule_T__40();
    	EnterRule("T__40", 24);
    	TraceIn("T__40", 24);
    		try
    		{
    		int _type = T__40;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:38:7: ( 'and' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:38:9: 'and'
    		{
    		DebugLocation(38, 9);
    		Match("and"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__40", 24);
    		LeaveRule("T__40", 24);
    		LeaveRule_T__40();
        }
    }
    // $ANTLR end "T__40"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__41() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__41() {}

    // $ANTLR start "T__41"
    [GrammarRule("T__41")]
    private void mT__41()
    {
    	EnterRule_T__41();
    	EnterRule("T__41", 25);
    	TraceIn("T__41", 25);
    		try
    		{
    		int _type = T__41;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:39:7: ( 'char' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:39:9: 'char'
    		{
    		DebugLocation(39, 9);
    		Match("char"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__41", 25);
    		LeaveRule("T__41", 25);
    		LeaveRule_T__41();
        }
    }
    // $ANTLR end "T__41"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__42() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__42() {}

    // $ANTLR start "T__42"
    [GrammarRule("T__42")]
    private void mT__42()
    {
    	EnterRule_T__42();
    	EnterRule("T__42", 26);
    	TraceIn("T__42", 26);
    		try
    		{
    		int _type = T__42;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:40:7: ( 'class' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:40:9: 'class'
    		{
    		DebugLocation(40, 9);
    		Match("class"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__42", 26);
    		LeaveRule("T__42", 26);
    		LeaveRule_T__42();
        }
    }
    // $ANTLR end "T__42"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__43() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__43() {}

    // $ANTLR start "T__43"
    [GrammarRule("T__43")]
    private void mT__43()
    {
    	EnterRule_T__43();
    	EnterRule("T__43", 27);
    	TraceIn("T__43", 27);
    		try
    		{
    		int _type = T__43;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:41:7: ( 'double' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:41:9: 'double'
    		{
    		DebugLocation(41, 9);
    		Match("double"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__43", 27);
    		LeaveRule("T__43", 27);
    		LeaveRule_T__43();
        }
    }
    // $ANTLR end "T__43"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__44() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__44() {}

    // $ANTLR start "T__44"
    [GrammarRule("T__44")]
    private void mT__44()
    {
    	EnterRule_T__44();
    	EnterRule("T__44", 28);
    	TraceIn("T__44", 28);
    		try
    		{
    		int _type = T__44;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:42:7: ( 'else' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:42:9: 'else'
    		{
    		DebugLocation(42, 9);
    		Match("else"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__44", 28);
    		LeaveRule("T__44", 28);
    		LeaveRule_T__44();
        }
    }
    // $ANTLR end "T__44"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__45() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__45() {}

    // $ANTLR start "T__45"
    [GrammarRule("T__45")]
    private void mT__45()
    {
    	EnterRule_T__45();
    	EnterRule("T__45", 29);
    	TraceIn("T__45", 29);
    		try
    		{
    		int _type = T__45;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:43:7: ( 'extends' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:43:9: 'extends'
    		{
    		DebugLocation(43, 9);
    		Match("extends"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__45", 29);
    		LeaveRule("T__45", 29);
    		LeaveRule_T__45();
        }
    }
    // $ANTLR end "T__45"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__46() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__46() {}

    // $ANTLR start "T__46"
    [GrammarRule("T__46")]
    private void mT__46()
    {
    	EnterRule_T__46();
    	EnterRule("T__46", 30);
    	TraceIn("T__46", 30);
    		try
    		{
    		int _type = T__46;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:44:7: ( 'if' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:44:9: 'if'
    		{
    		DebugLocation(44, 9);
    		Match("if"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__46", 30);
    		LeaveRule("T__46", 30);
    		LeaveRule_T__46();
        }
    }
    // $ANTLR end "T__46"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__47() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__47() {}

    // $ANTLR start "T__47"
    [GrammarRule("T__47")]
    private void mT__47()
    {
    	EnterRule_T__47();
    	EnterRule("T__47", 31);
    	TraceIn("T__47", 31);
    		try
    		{
    		int _type = T__47;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:45:7: ( 'int' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:45:9: 'int'
    		{
    		DebugLocation(45, 9);
    		Match("int"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__47", 31);
    		LeaveRule("T__47", 31);
    		LeaveRule_T__47();
        }
    }
    // $ANTLR end "T__47"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__48() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__48() {}

    // $ANTLR start "T__48"
    [GrammarRule("T__48")]
    private void mT__48()
    {
    	EnterRule_T__48();
    	EnterRule("T__48", 32);
    	TraceIn("T__48", 32);
    		try
    		{
    		int _type = T__48;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:46:7: ( 'methods' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:46:9: 'methods'
    		{
    		DebugLocation(46, 9);
    		Match("methods"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__48", 32);
    		LeaveRule("T__48", 32);
    		LeaveRule_T__48();
        }
    }
    // $ANTLR end "T__48"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__49() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__49() {}

    // $ANTLR start "T__49"
    [GrammarRule("T__49")]
    private void mT__49()
    {
    	EnterRule_T__49();
    	EnterRule("T__49", 33);
    	TraceIn("T__49", 33);
    		try
    		{
    		int _type = T__49;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:47:7: ( 'new' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:47:9: 'new'
    		{
    		DebugLocation(47, 9);
    		Match("new"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__49", 33);
    		LeaveRule("T__49", 33);
    		LeaveRule_T__49();
        }
    }
    // $ANTLR end "T__49"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__50() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__50() {}

    // $ANTLR start "T__50"
    [GrammarRule("T__50")]
    private void mT__50()
    {
    	EnterRule_T__50();
    	EnterRule("T__50", 34);
    	TraceIn("T__50", 34);
    		try
    		{
    		int _type = T__50;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:48:7: ( 'or' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:48:9: 'or'
    		{
    		DebugLocation(48, 9);
    		Match("or"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__50", 34);
    		LeaveRule("T__50", 34);
    		LeaveRule_T__50();
        }
    }
    // $ANTLR end "T__50"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__51() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__51() {}

    // $ANTLR start "T__51"
    [GrammarRule("T__51")]
    private void mT__51()
    {
    	EnterRule_T__51();
    	EnterRule("T__51", 35);
    	TraceIn("T__51", 35);
    		try
    		{
    		int _type = T__51;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:49:7: ( 'print' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:49:9: 'print'
    		{
    		DebugLocation(49, 9);
    		Match("print"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__51", 35);
    		LeaveRule("T__51", 35);
    		LeaveRule_T__51();
        }
    }
    // $ANTLR end "T__51"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__52() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__52() {}

    // $ANTLR start "T__52"
    [GrammarRule("T__52")]
    private void mT__52()
    {
    	EnterRule_T__52();
    	EnterRule("T__52", 36);
    	TraceIn("T__52", 36);
    		try
    		{
    		int _type = T__52;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:50:7: ( 'read' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:50:9: 'read'
    		{
    		DebugLocation(50, 9);
    		Match("read"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__52", 36);
    		LeaveRule("T__52", 36);
    		LeaveRule_T__52();
        }
    }
    // $ANTLR end "T__52"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__53() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__53() {}

    // $ANTLR start "T__53"
    [GrammarRule("T__53")]
    private void mT__53()
    {
    	EnterRule_T__53();
    	EnterRule("T__53", 37);
    	TraceIn("T__53", 37);
    		try
    		{
    		int _type = T__53;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:51:7: ( 'return' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:51:9: 'return'
    		{
    		DebugLocation(51, 9);
    		Match("return"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__53", 37);
    		LeaveRule("T__53", 37);
    		LeaveRule_T__53();
        }
    }
    // $ANTLR end "T__53"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__54() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__54() {}

    // $ANTLR start "T__54"
    [GrammarRule("T__54")]
    private void mT__54()
    {
    	EnterRule_T__54();
    	EnterRule("T__54", 38);
    	TraceIn("T__54", 38);
    		try
    		{
    		int _type = T__54;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:52:7: ( 'this' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:52:9: 'this'
    		{
    		DebugLocation(52, 9);
    		Match("this"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__54", 38);
    		LeaveRule("T__54", 38);
    		LeaveRule_T__54();
        }
    }
    // $ANTLR end "T__54"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__55() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__55() {}

    // $ANTLR start "T__55"
    [GrammarRule("T__55")]
    private void mT__55()
    {
    	EnterRule_T__55();
    	EnterRule("T__55", 39);
    	TraceIn("T__55", 39);
    		try
    		{
    		int _type = T__55;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:53:7: ( 'vars' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:53:9: 'vars'
    		{
    		DebugLocation(53, 9);
    		Match("vars"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__55", 39);
    		LeaveRule("T__55", 39);
    		LeaveRule_T__55();
        }
    }
    // $ANTLR end "T__55"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__56() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__56() {}

    // $ANTLR start "T__56"
    [GrammarRule("T__56")]
    private void mT__56()
    {
    	EnterRule_T__56();
    	EnterRule("T__56", 40);
    	TraceIn("T__56", 40);
    		try
    		{
    		int _type = T__56;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:54:7: ( 'while' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:54:9: 'while'
    		{
    		DebugLocation(54, 9);
    		Match("while"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__56", 40);
    		LeaveRule("T__56", 40);
    		LeaveRule_T__56();
        }
    }
    // $ANTLR end "T__56"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__57() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__57() {}

    // $ANTLR start "T__57"
    [GrammarRule("T__57")]
    private void mT__57()
    {
    	EnterRule_T__57();
    	EnterRule("T__57", 41);
    	TraceIn("T__57", 41);
    		try
    		{
    		int _type = T__57;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:55:7: ( '{' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:55:9: '{'
    		{
    		DebugLocation(55, 9);
    		Match('{'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__57", 41);
    		LeaveRule("T__57", 41);
    		LeaveRule_T__57();
        }
    }
    // $ANTLR end "T__57"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__58() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__58() {}

    // $ANTLR start "T__58"
    [GrammarRule("T__58")]
    private void mT__58()
    {
    	EnterRule_T__58();
    	EnterRule("T__58", 42);
    	TraceIn("T__58", 42);
    		try
    		{
    		int _type = T__58;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:56:7: ( '}' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:56:9: '}'
    		{
    		DebugLocation(56, 9);
    		Match('}'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__58", 42);
    		LeaveRule("T__58", 42);
    		LeaveRule_T__58();
        }
    }
    // $ANTLR end "T__58"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_BOOL() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_BOOL() {}

    // $ANTLR start "BOOL"
    [GrammarRule("BOOL")]
    private void mBOOL()
    {
    	EnterRule_BOOL();
    	EnterRule("BOOL", 43);
    	TraceIn("BOOL", 43);
    		try
    		{
    		int _type = BOOL;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:716:6: ( 'bool' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:716:8: 'bool'
    		{
    		DebugLocation(716, 8);
    		Match("bool"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("BOOL", 43);
    		LeaveRule("BOOL", 43);
    		LeaveRule_BOOL();
        }
    }
    // $ANTLR end "BOOL"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_VOID() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_VOID() {}

    // $ANTLR start "VOID"
    [GrammarRule("VOID")]
    private void mVOID()
    {
    	EnterRule_VOID();
    	EnterRule("VOID", 44);
    	TraceIn("VOID", 44);
    		try
    		{
    		int _type = VOID;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:718:6: ( 'void' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:718:8: 'void'
    		{
    		DebugLocation(718, 8);
    		Match("void"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("VOID", 44);
    		LeaveRule("VOID", 44);
    		LeaveRule_VOID();
        }
    }
    // $ANTLR end "VOID"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ID() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ID() {}

    // $ANTLR start "ID"
    [GrammarRule("ID")]
    private void mID()
    {
    	EnterRule_ID();
    	EnterRule("ID", 45);
    	TraceIn("ID", 45);
    		try
    		{
    		int _type = ID;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:720:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:720:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
    		{
    		DebugLocation(720, 7);
    		if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(720, 31);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:720:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
    		try { DebugEnterSubRule(1);
    		while (true)
    		{
    			int alt1=2;
    			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
    			int LA1_0 = input.LA(1);

    			if (((LA1_0>='0' && LA1_0<='9')||(LA1_0>='A' && LA1_0<='Z')||LA1_0=='_'||(LA1_0>='a' && LA1_0<='z')))
    			{
    				alt1 = 1;
    			}


    			} finally { DebugExitDecision(1); }
    			switch ( alt1 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:
    				{
    				DebugLocation(720, 31);
    				input.Consume();


    				}
    				break;

    			default:
    				goto loop1;
    			}
    		}

    		loop1:
    			;

    		} finally { DebugExitSubRule(1); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ID", 45);
    		LeaveRule("ID", 45);
    		LeaveRule_ID();
        }
    }
    // $ANTLR end "ID"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_INT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_INT() {}

    // $ANTLR start "INT"
    [GrammarRule("INT")]
    private void mINT()
    {
    	EnterRule_INT();
    	EnterRule("INT", 46);
    	TraceIn("INT", 46);
    		try
    		{
    		int _type = INT;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:723:6: ( ( '0' .. '9' )+ )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:723:8: ( '0' .. '9' )+
    		{
    		DebugLocation(723, 8);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:723:8: ( '0' .. '9' )+
    		int cnt2=0;
    		try { DebugEnterSubRule(2);
    		while (true)
    		{
    			int alt2=2;
    			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
    			int LA2_0 = input.LA(1);

    			if (((LA2_0>='0' && LA2_0<='9')))
    			{
    				alt2 = 1;
    			}


    			} finally { DebugExitDecision(2); }
    			switch (alt2)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:
    				{
    				DebugLocation(723, 8);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt2 >= 1)
    					goto loop2;

    				EarlyExitException eee2 = new EarlyExitException( 2, input );
    				DebugRecognitionException(eee2);
    				throw eee2;
    			}
    			cnt2++;
    		}
    		loop2:
    			;

    		} finally { DebugExitSubRule(2); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("INT", 46);
    		LeaveRule("INT", 46);
    		LeaveRule_INT();
        }
    }
    // $ANTLR end "INT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_DOUBLE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_DOUBLE() {}

    // $ANTLR start "DOUBLE"
    [GrammarRule("DOUBLE")]
    private void mDOUBLE()
    {
    	EnterRule_DOUBLE();
    	EnterRule("DOUBLE", 47);
    	TraceIn("DOUBLE", 47);
    		try
    		{
    		int _type = DOUBLE;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:726:5: ( INT '.' ( INT )* | '.' ( INT )+ )
    		int alt5=2;
    		try { DebugEnterDecision(5, decisionCanBacktrack[5]);
    		int LA5_0 = input.LA(1);

    		if (((LA5_0>='0' && LA5_0<='9')))
    		{
    			alt5 = 1;
    		}
    		else if ((LA5_0=='.'))
    		{
    			alt5 = 2;
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(5); }
    		switch (alt5)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:726:9: INT '.' ( INT )*
    			{
    			DebugLocation(726, 9);
    			mINT(); 
    			DebugLocation(726, 13);
    			Match('.'); 
    			DebugLocation(726, 17);
    			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:726:17: ( INT )*
    			try { DebugEnterSubRule(3);
    			while (true)
    			{
    				int alt3=2;
    				try { DebugEnterDecision(3, decisionCanBacktrack[3]);
    				int LA3_0 = input.LA(1);

    				if (((LA3_0>='0' && LA3_0<='9')))
    				{
    					alt3 = 1;
    				}


    				} finally { DebugExitDecision(3); }
    				switch ( alt3 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:726:17: INT
    					{
    					DebugLocation(726, 17);
    					mINT(); 

    					}
    					break;

    				default:
    					goto loop3;
    				}
    			}

    			loop3:
    				;

    			} finally { DebugExitSubRule(3); }


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:727:9: '.' ( INT )+
    			{
    			DebugLocation(727, 9);
    			Match('.'); 
    			DebugLocation(727, 13);
    			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:727:13: ( INT )+
    			int cnt4=0;
    			try { DebugEnterSubRule(4);
    			while (true)
    			{
    				int alt4=2;
    				try { DebugEnterDecision(4, decisionCanBacktrack[4]);
    				int LA4_0 = input.LA(1);

    				if (((LA4_0>='0' && LA4_0<='9')))
    				{
    					alt4 = 1;
    				}


    				} finally { DebugExitDecision(4); }
    				switch (alt4)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:727:13: INT
    					{
    					DebugLocation(727, 13);
    					mINT(); 

    					}
    					break;

    				default:
    					if (cnt4 >= 1)
    						goto loop4;

    					EarlyExitException eee4 = new EarlyExitException( 4, input );
    					DebugRecognitionException(eee4);
    					throw eee4;
    				}
    				cnt4++;
    			}
    			loop4:
    				;

    			} finally { DebugExitSubRule(4); }


    			}
    			break;

    		}
    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("DOUBLE", 47);
    		LeaveRule("DOUBLE", 47);
    		LeaveRule_DOUBLE();
        }
    }
    // $ANTLR end "DOUBLE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_COMMENT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_COMMENT() {}

    // $ANTLR start "COMMENT"
    [GrammarRule("COMMENT")]
    private void mCOMMENT()
    {
    	EnterRule_COMMENT();
    	EnterRule("COMMENT", 48);
    	TraceIn("COMMENT", 48);
    		try
    		{
    		int _type = COMMENT;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:731:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )
    		int alt9=2;
    		try { DebugEnterDecision(9, decisionCanBacktrack[9]);
    		int LA9_0 = input.LA(1);

    		if ((LA9_0=='/'))
    		{
    			int LA9_1 = input.LA(2);

    			if ((LA9_1=='/'))
    			{
    				alt9 = 1;
    			}
    			else if ((LA9_1=='*'))
    			{
    				alt9 = 2;
    			}
    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 9, 1, input);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(9); }
    		switch (alt9)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:731:9: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
    			{
    			DebugLocation(731, 9);
    			Match("//"); 

    			DebugLocation(731, 14);
    			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:731:14: (~ ( '\\n' | '\\r' ) )*
    			try { DebugEnterSubRule(6);
    			while (true)
    			{
    				int alt6=2;
    				try { DebugEnterDecision(6, decisionCanBacktrack[6]);
    				int LA6_0 = input.LA(1);

    				if (((LA6_0>='\u0000' && LA6_0<='\t')||(LA6_0>='\u000B' && LA6_0<='\f')||(LA6_0>='\u000E' && LA6_0<='\uFFFF')))
    				{
    					alt6 = 1;
    				}


    				} finally { DebugExitDecision(6); }
    				switch ( alt6 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:
    					{
    					DebugLocation(731, 14);
    					input.Consume();


    					}
    					break;

    				default:
    					goto loop6;
    				}
    			}

    			loop6:
    				;

    			} finally { DebugExitSubRule(6); }

    			DebugLocation(731, 28);
    			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:731:28: ( '\\r' )?
    			int alt7=2;
    			try { DebugEnterSubRule(7);
    			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
    			int LA7_0 = input.LA(1);

    			if ((LA7_0=='\r'))
    			{
    				alt7 = 1;
    			}
    			} finally { DebugExitDecision(7); }
    			switch (alt7)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:731:28: '\\r'
    				{
    				DebugLocation(731, 28);
    				Match('\r'); 

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(7); }

    			DebugLocation(731, 34);
    			Match('\n'); 
    			DebugLocation(731, 39);
    			_channel=Hidden;

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:732:9: '/*' ( options {greedy=false; } : . )* '*/'
    			{
    			DebugLocation(732, 9);
    			Match("/*"); 

    			DebugLocation(732, 14);
    			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:732:14: ( options {greedy=false; } : . )*
    			try { DebugEnterSubRule(8);
    			while (true)
    			{
    				int alt8=2;
    				try { DebugEnterDecision(8, decisionCanBacktrack[8]);
    				int LA8_0 = input.LA(1);

    				if ((LA8_0=='*'))
    				{
    					int LA8_1 = input.LA(2);

    					if ((LA8_1=='/'))
    					{
    						alt8 = 2;
    					}
    					else if (((LA8_1>='\u0000' && LA8_1<='.')||(LA8_1>='0' && LA8_1<='\uFFFF')))
    					{
    						alt8 = 1;
    					}


    				}
    				else if (((LA8_0>='\u0000' && LA8_0<=')')||(LA8_0>='+' && LA8_0<='\uFFFF')))
    				{
    					alt8 = 1;
    				}


    				} finally { DebugExitDecision(8); }
    				switch ( alt8 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:732:42: .
    					{
    					DebugLocation(732, 42);
    					MatchAny(); 

    					}
    					break;

    				default:
    					goto loop8;
    				}
    			}

    			loop8:
    				;

    			} finally { DebugExitSubRule(8); }

    			DebugLocation(732, 47);
    			Match("*/"); 

    			DebugLocation(732, 52);
    			_channel=Hidden;

    			}
    			break;

    		}
    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("COMMENT", 48);
    		LeaveRule("COMMENT", 48);
    		LeaveRule_COMMENT();
        }
    }
    // $ANTLR end "COMMENT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_WS() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_WS() {}

    // $ANTLR start "WS"
    [GrammarRule("WS")]
    private void mWS()
    {
    	EnterRule_WS();
    	EnterRule("WS", 49);
    	TraceIn("WS", 49);
    		try
    		{
    		int _type = WS;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:735:5: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:735:9: ( ' ' | '\\t' | '\\r' | '\\n' )
    		{
    		DebugLocation(735, 9);
    		if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(739, 11);
    		_channel=Hidden;

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("WS", 49);
    		LeaveRule("WS", 49);
    		LeaveRule_WS();
        }
    }
    // $ANTLR end "WS"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_CHAR() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_CHAR() {}

    // $ANTLR start "CHAR"
    [GrammarRule("CHAR")]
    private void mCHAR()
    {
    	EnterRule_CHAR();
    	EnterRule("CHAR", 50);
    	TraceIn("CHAR", 50);
    		try
    		{
    		int _type = CHAR;
    		int _channel = DefaultTokenChannel;
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:742:5: ( '\\'' ( ESC_SEQ |~ ( '\\'' | '\\\\' ) ) '\\'' )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:742:8: '\\'' ( ESC_SEQ |~ ( '\\'' | '\\\\' ) ) '\\''
    		{
    		DebugLocation(742, 8);
    		Match('\''); 
    		DebugLocation(742, 13);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:742:13: ( ESC_SEQ |~ ( '\\'' | '\\\\' ) )
    		int alt10=2;
    		try { DebugEnterSubRule(10);
    		try { DebugEnterDecision(10, decisionCanBacktrack[10]);
    		int LA10_0 = input.LA(1);

    		if ((LA10_0=='\\'))
    		{
    			alt10 = 1;
    		}
    		else if (((LA10_0>='\u0000' && LA10_0<='&')||(LA10_0>='(' && LA10_0<='[')||(LA10_0>=']' && LA10_0<='\uFFFF')))
    		{
    			alt10 = 2;
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(10); }
    		switch (alt10)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:742:15: ESC_SEQ
    			{
    			DebugLocation(742, 15);
    			mESC_SEQ(); 

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:742:25: ~ ( '\\'' | '\\\\' )
    			{
    			DebugLocation(742, 25);
    			input.Consume();


    			}
    			break;

    		}
    		} finally { DebugExitSubRule(10); }

    		DebugLocation(742, 40);
    		Match('\''); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("CHAR", 50);
    		LeaveRule("CHAR", 50);
    		LeaveRule_CHAR();
        }
    }
    // $ANTLR end "CHAR"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_EXPONENT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_EXPONENT() {}

    // $ANTLR start "EXPONENT"
    [GrammarRule("EXPONENT")]
    private void mEXPONENT()
    {
    	EnterRule_EXPONENT();
    	EnterRule("EXPONENT", 51);
    	TraceIn("EXPONENT", 51);
    		try
    		{
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:747:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:747:12: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
    		{
    		DebugLocation(747, 12);
    		if (input.LA(1)=='E'||input.LA(1)=='e')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(747, 22);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:747:22: ( '+' | '-' )?
    		int alt11=2;
    		try { DebugEnterSubRule(11);
    		try { DebugEnterDecision(11, decisionCanBacktrack[11]);
    		int LA11_0 = input.LA(1);

    		if ((LA11_0=='+'||LA11_0=='-'))
    		{
    			alt11 = 1;
    		}
    		} finally { DebugExitDecision(11); }
    		switch (alt11)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:
    			{
    			DebugLocation(747, 22);
    			input.Consume();


    			}
    			break;

    		}
    		} finally { DebugExitSubRule(11); }

    		DebugLocation(747, 33);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:747:33: ( '0' .. '9' )+
    		int cnt12=0;
    		try { DebugEnterSubRule(12);
    		while (true)
    		{
    			int alt12=2;
    			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
    			int LA12_0 = input.LA(1);

    			if (((LA12_0>='0' && LA12_0<='9')))
    			{
    				alt12 = 1;
    			}


    			} finally { DebugExitDecision(12); }
    			switch (alt12)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:
    				{
    				DebugLocation(747, 33);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt12 >= 1)
    					goto loop12;

    				EarlyExitException eee12 = new EarlyExitException( 12, input );
    				DebugRecognitionException(eee12);
    				throw eee12;
    			}
    			cnt12++;
    		}
    		loop12:
    			;

    		} finally { DebugExitSubRule(12); }


    		}

    	}
    	finally
    	{
    		TraceOut("EXPONENT", 51);
    		LeaveRule("EXPONENT", 51);
    		LeaveRule_EXPONENT();
        }
    }
    // $ANTLR end "EXPONENT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_HEX_DIGIT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_HEX_DIGIT() {}

    // $ANTLR start "HEX_DIGIT"
    [GrammarRule("HEX_DIGIT")]
    private void mHEX_DIGIT()
    {
    	EnterRule_HEX_DIGIT();
    	EnterRule("HEX_DIGIT", 52);
    	TraceIn("HEX_DIGIT", 52);
    		try
    		{
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:750:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:
    		{
    		DebugLocation(750, 11);
    		if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("HEX_DIGIT", 52);
    		LeaveRule("HEX_DIGIT", 52);
    		LeaveRule_HEX_DIGIT();
        }
    }
    // $ANTLR end "HEX_DIGIT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ESC_SEQ() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ESC_SEQ() {}

    // $ANTLR start "ESC_SEQ"
    [GrammarRule("ESC_SEQ")]
    private void mESC_SEQ()
    {
    	EnterRule_ESC_SEQ();
    	EnterRule("ESC_SEQ", 53);
    	TraceIn("ESC_SEQ", 53);
    		try
    		{
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:755:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )
    		int alt13=3;
    		try { DebugEnterDecision(13, decisionCanBacktrack[13]);
    		int LA13_0 = input.LA(1);

    		if ((LA13_0=='\\'))
    		{
    			switch (input.LA(2))
    			{
    			case '\"':
    			case '\'':
    			case '\\':
    			case 'b':
    			case 'f':
    			case 'n':
    			case 'r':
    			case 't':
    				{
    				alt13 = 1;
    				}
    				break;
    			case 'u':
    				{
    				alt13 = 2;
    				}
    				break;
    			case '0':
    			case '1':
    			case '2':
    			case '3':
    			case '4':
    			case '5':
    			case '6':
    			case '7':
    				{
    				alt13 = 3;
    				}
    				break;
    			default:
    				{
    					NoViableAltException nvae = new NoViableAltException("", 13, 1, input);
    					DebugRecognitionException(nvae);
    					throw nvae;
    				}
    			}

    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(13); }
    		switch (alt13)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:755:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
    			{
    			DebugLocation(755, 9);
    			Match('\\'); 
    			DebugLocation(755, 14);
    			input.Consume();


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:756:9: UNICODE_ESC
    			{
    			DebugLocation(756, 9);
    			mUNICODE_ESC(); 

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:757:9: OCTAL_ESC
    			{
    			DebugLocation(757, 9);
    			mOCTAL_ESC(); 

    			}
    			break;

    		}
    	}
    	finally
    	{
    		TraceOut("ESC_SEQ", 53);
    		LeaveRule("ESC_SEQ", 53);
    		LeaveRule_ESC_SEQ();
        }
    }
    // $ANTLR end "ESC_SEQ"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_OCTAL_ESC() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_OCTAL_ESC() {}

    // $ANTLR start "OCTAL_ESC"
    [GrammarRule("OCTAL_ESC")]
    private void mOCTAL_ESC()
    {
    	EnterRule_OCTAL_ESC();
    	EnterRule("OCTAL_ESC", 54);
    	TraceIn("OCTAL_ESC", 54);
    		try
    		{
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:762:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
    		int alt14=3;
    		try { DebugEnterDecision(14, decisionCanBacktrack[14]);
    		int LA14_0 = input.LA(1);

    		if ((LA14_0=='\\'))
    		{
    			int LA14_1 = input.LA(2);

    			if (((LA14_1>='0' && LA14_1<='3')))
    			{
    				int LA14_2 = input.LA(3);

    				if (((LA14_2>='0' && LA14_2<='7')))
    				{
    					int LA14_4 = input.LA(4);

    					if (((LA14_4>='0' && LA14_4<='7')))
    					{
    						alt14 = 1;
    					}
    					else
    					{
    						alt14 = 2;
    					}
    				}
    				else
    				{
    					alt14 = 3;
    				}
    			}
    			else if (((LA14_1>='4' && LA14_1<='7')))
    			{
    				int LA14_3 = input.LA(3);

    				if (((LA14_3>='0' && LA14_3<='7')))
    				{
    					alt14 = 2;
    				}
    				else
    				{
    					alt14 = 3;
    				}
    			}
    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 14, 1, input);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(14); }
    		switch (alt14)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:762:9: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
    			{
    			DebugLocation(762, 9);
    			Match('\\'); 
    			DebugLocation(762, 14);
    			input.Consume();

    			DebugLocation(762, 25);
    			input.Consume();

    			DebugLocation(762, 36);
    			input.Consume();


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:763:9: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
    			{
    			DebugLocation(763, 9);
    			Match('\\'); 
    			DebugLocation(763, 14);
    			input.Consume();

    			DebugLocation(763, 25);
    			input.Consume();


    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:764:9: '\\\\' ( '0' .. '7' )
    			{
    			DebugLocation(764, 9);
    			Match('\\'); 
    			DebugLocation(764, 14);
    			input.Consume();


    			}
    			break;

    		}
    	}
    	finally
    	{
    		TraceOut("OCTAL_ESC", 54);
    		LeaveRule("OCTAL_ESC", 54);
    		LeaveRule_OCTAL_ESC();
        }
    }
    // $ANTLR end "OCTAL_ESC"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_UNICODE_ESC() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_UNICODE_ESC() {}

    // $ANTLR start "UNICODE_ESC"
    [GrammarRule("UNICODE_ESC")]
    private void mUNICODE_ESC()
    {
    	EnterRule_UNICODE_ESC();
    	EnterRule("UNICODE_ESC", 55);
    	TraceIn("UNICODE_ESC", 55);
    		try
    		{
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:769:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:769:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
    		{
    		DebugLocation(769, 9);
    		Match('\\'); 
    		DebugLocation(769, 14);
    		Match('u'); 
    		DebugLocation(769, 18);
    		mHEX_DIGIT(); 
    		DebugLocation(769, 28);
    		mHEX_DIGIT(); 
    		DebugLocation(769, 38);
    		mHEX_DIGIT(); 
    		DebugLocation(769, 48);
    		mHEX_DIGIT(); 

    		}

    	}
    	finally
    	{
    		TraceOut("UNICODE_ESC", 55);
    		LeaveRule("UNICODE_ESC", 55);
    		LeaveRule_UNICODE_ESC();
        }
    }
    // $ANTLR end "UNICODE_ESC"

    public override void mTokens()
    {
    	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:8: ( T__17 | T__18 | T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | BOOL | VOID | ID | INT | DOUBLE | COMMENT | WS | CHAR )
    	int alt15=50;
    	try { DebugEnterDecision(15, decisionCanBacktrack[15]);
    	try
    	{
    		alt15 = dfa15.Predict(input);
    	}
    	catch (NoViableAltException nvae)
    	{
    		DebugRecognitionException(nvae);
    		throw;
    	}
    	} finally { DebugExitDecision(15); }
    	switch (alt15)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:10: T__17
    		{
    		DebugLocation(1, 10);
    		mT__17(); 

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:16: T__18
    		{
    		DebugLocation(1, 16);
    		mT__18(); 

    		}
    		break;
    	case 3:
    		DebugEnterAlt(3);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:22: T__19
    		{
    		DebugLocation(1, 22);
    		mT__19(); 

    		}
    		break;
    	case 4:
    		DebugEnterAlt(4);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:28: T__20
    		{
    		DebugLocation(1, 28);
    		mT__20(); 

    		}
    		break;
    	case 5:
    		DebugEnterAlt(5);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:34: T__21
    		{
    		DebugLocation(1, 34);
    		mT__21(); 

    		}
    		break;
    	case 6:
    		DebugEnterAlt(6);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:40: T__22
    		{
    		DebugLocation(1, 40);
    		mT__22(); 

    		}
    		break;
    	case 7:
    		DebugEnterAlt(7);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:46: T__23
    		{
    		DebugLocation(1, 46);
    		mT__23(); 

    		}
    		break;
    	case 8:
    		DebugEnterAlt(8);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:52: T__24
    		{
    		DebugLocation(1, 52);
    		mT__24(); 

    		}
    		break;
    	case 9:
    		DebugEnterAlt(9);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:58: T__25
    		{
    		DebugLocation(1, 58);
    		mT__25(); 

    		}
    		break;
    	case 10:
    		DebugEnterAlt(10);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:64: T__26
    		{
    		DebugLocation(1, 64);
    		mT__26(); 

    		}
    		break;
    	case 11:
    		DebugEnterAlt(11);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:70: T__27
    		{
    		DebugLocation(1, 70);
    		mT__27(); 

    		}
    		break;
    	case 12:
    		DebugEnterAlt(12);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:76: T__28
    		{
    		DebugLocation(1, 76);
    		mT__28(); 

    		}
    		break;
    	case 13:
    		DebugEnterAlt(13);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:82: T__29
    		{
    		DebugLocation(1, 82);
    		mT__29(); 

    		}
    		break;
    	case 14:
    		DebugEnterAlt(14);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:88: T__30
    		{
    		DebugLocation(1, 88);
    		mT__30(); 

    		}
    		break;
    	case 15:
    		DebugEnterAlt(15);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:94: T__31
    		{
    		DebugLocation(1, 94);
    		mT__31(); 

    		}
    		break;
    	case 16:
    		DebugEnterAlt(16);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:100: T__32
    		{
    		DebugLocation(1, 100);
    		mT__32(); 

    		}
    		break;
    	case 17:
    		DebugEnterAlt(17);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:106: T__33
    		{
    		DebugLocation(1, 106);
    		mT__33(); 

    		}
    		break;
    	case 18:
    		DebugEnterAlt(18);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:112: T__34
    		{
    		DebugLocation(1, 112);
    		mT__34(); 

    		}
    		break;
    	case 19:
    		DebugEnterAlt(19);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:118: T__35
    		{
    		DebugLocation(1, 118);
    		mT__35(); 

    		}
    		break;
    	case 20:
    		DebugEnterAlt(20);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:124: T__36
    		{
    		DebugLocation(1, 124);
    		mT__36(); 

    		}
    		break;
    	case 21:
    		DebugEnterAlt(21);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:130: T__37
    		{
    		DebugLocation(1, 130);
    		mT__37(); 

    		}
    		break;
    	case 22:
    		DebugEnterAlt(22);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:136: T__38
    		{
    		DebugLocation(1, 136);
    		mT__38(); 

    		}
    		break;
    	case 23:
    		DebugEnterAlt(23);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:142: T__39
    		{
    		DebugLocation(1, 142);
    		mT__39(); 

    		}
    		break;
    	case 24:
    		DebugEnterAlt(24);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:148: T__40
    		{
    		DebugLocation(1, 148);
    		mT__40(); 

    		}
    		break;
    	case 25:
    		DebugEnterAlt(25);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:154: T__41
    		{
    		DebugLocation(1, 154);
    		mT__41(); 

    		}
    		break;
    	case 26:
    		DebugEnterAlt(26);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:160: T__42
    		{
    		DebugLocation(1, 160);
    		mT__42(); 

    		}
    		break;
    	case 27:
    		DebugEnterAlt(27);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:166: T__43
    		{
    		DebugLocation(1, 166);
    		mT__43(); 

    		}
    		break;
    	case 28:
    		DebugEnterAlt(28);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:172: T__44
    		{
    		DebugLocation(1, 172);
    		mT__44(); 

    		}
    		break;
    	case 29:
    		DebugEnterAlt(29);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:178: T__45
    		{
    		DebugLocation(1, 178);
    		mT__45(); 

    		}
    		break;
    	case 30:
    		DebugEnterAlt(30);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:184: T__46
    		{
    		DebugLocation(1, 184);
    		mT__46(); 

    		}
    		break;
    	case 31:
    		DebugEnterAlt(31);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:190: T__47
    		{
    		DebugLocation(1, 190);
    		mT__47(); 

    		}
    		break;
    	case 32:
    		DebugEnterAlt(32);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:196: T__48
    		{
    		DebugLocation(1, 196);
    		mT__48(); 

    		}
    		break;
    	case 33:
    		DebugEnterAlt(33);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:202: T__49
    		{
    		DebugLocation(1, 202);
    		mT__49(); 

    		}
    		break;
    	case 34:
    		DebugEnterAlt(34);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:208: T__50
    		{
    		DebugLocation(1, 208);
    		mT__50(); 

    		}
    		break;
    	case 35:
    		DebugEnterAlt(35);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:214: T__51
    		{
    		DebugLocation(1, 214);
    		mT__51(); 

    		}
    		break;
    	case 36:
    		DebugEnterAlt(36);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:220: T__52
    		{
    		DebugLocation(1, 220);
    		mT__52(); 

    		}
    		break;
    	case 37:
    		DebugEnterAlt(37);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:226: T__53
    		{
    		DebugLocation(1, 226);
    		mT__53(); 

    		}
    		break;
    	case 38:
    		DebugEnterAlt(38);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:232: T__54
    		{
    		DebugLocation(1, 232);
    		mT__54(); 

    		}
    		break;
    	case 39:
    		DebugEnterAlt(39);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:238: T__55
    		{
    		DebugLocation(1, 238);
    		mT__55(); 

    		}
    		break;
    	case 40:
    		DebugEnterAlt(40);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:244: T__56
    		{
    		DebugLocation(1, 244);
    		mT__56(); 

    		}
    		break;
    	case 41:
    		DebugEnterAlt(41);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:250: T__57
    		{
    		DebugLocation(1, 250);
    		mT__57(); 

    		}
    		break;
    	case 42:
    		DebugEnterAlt(42);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:256: T__58
    		{
    		DebugLocation(1, 256);
    		mT__58(); 

    		}
    		break;
    	case 43:
    		DebugEnterAlt(43);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:262: BOOL
    		{
    		DebugLocation(1, 262);
    		mBOOL(); 

    		}
    		break;
    	case 44:
    		DebugEnterAlt(44);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:267: VOID
    		{
    		DebugLocation(1, 267);
    		mVOID(); 

    		}
    		break;
    	case 45:
    		DebugEnterAlt(45);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:272: ID
    		{
    		DebugLocation(1, 272);
    		mID(); 

    		}
    		break;
    	case 46:
    		DebugEnterAlt(46);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:275: INT
    		{
    		DebugLocation(1, 275);
    		mINT(); 

    		}
    		break;
    	case 47:
    		DebugEnterAlt(47);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:279: DOUBLE
    		{
    		DebugLocation(1, 279);
    		mDOUBLE(); 

    		}
    		break;
    	case 48:
    		DebugEnterAlt(48);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:286: COMMENT
    		{
    		DebugLocation(1, 286);
    		mCOMMENT(); 

    		}
    		break;
    	case 49:
    		DebugEnterAlt(49);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:294: WS
    		{
    		DebugLocation(1, 294);
    		mWS(); 

    		}
    		break;
    	case 50:
    		DebugEnterAlt(50);
    		// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:1:297: CHAR
    		{
    		DebugLocation(1, 297);
    		mCHAR(); 

    		}
    		break;

    	}

    }


	#region DFA
	DFA15 dfa15;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa15 = new DFA15(this);
	}

	private class DFA15 : DFA
	{
		private const string DFA15_eotS =
			"\x8\xFFFF\x1\x29\x1\x2C\x2\xFFFF\x1\x2E\x1\x30\x1\x32\x4\x25\x2\xFFFF"+
			"\xD\x25\x2\xFFFF\x1\x25\x1\xFFFF\x1\x49\xC\xFFFF\xA\x25\x1\x54\x3\x25"+
			"\x1\x58\x7\x25\x1\xFFFF\x4\x25\x1\x65\x5\x25\x1\xFFFF\x1\x6B\x1\x25\x1"+
			"\x6D\x1\xFFFF\xB\x25\x1\x79\x1\xFFFF\x1\x7A\x2\x25\x1\x7D\x1\x25\x1\xFFFF"+
			"\x1\x25\x1\xFFFF\x1\x25\x1\x81\x1\x25\x1\x83\x1\x84\x1\x85\x1\x25\x1"+
			"\x87\x3\x25\x2\xFFFF\x1\x8B\x1\x25\x1\xFFFF\x2\x25\x1\x8F\x1\xFFFF\x1"+
			"\x25\x3\xFFFF\x1\x91\x1\xFFFF\x3\x25\x1\xFFFF\x1\x95\x2\x25\x1\xFFFF"+
			"\x1\x98\x1\xFFFF\x3\x25\x1\xFFFF\x1\x9C\x1\x9D\x1\xFFFF\x3\x25\x2\xFFFF"+
			"\x2\x25\x1\xA3\x1\xA4\x1\x25\x2\xFFFF\x1\x25\x1\xA7\x1\xFFFF";
		private const string DFA15_eofS =
			"\xA8\xFFFF";
		private const string DFA15_minS =
			"\x1\x9\x7\xFFFF\x1\x30\x1\x2A\x2\xFFFF\x3\x3D\x1\x68\x1\x6F\x1\x6E\x1"+
			"\x61\x2\xFFFF\x1\x6E\x1\x68\x1\x6F\x1\x6C\x1\x66\x2\x65\x2\x72\x1\x65"+
			"\x1\x68\x1\x61\x1\x68\x2\xFFFF\x1\x6F\x1\xFFFF\x1\x2E\xC\xFFFF\x1\x61"+
			"\x1\x75\x1\x74\x1\x69\x1\x64\x2\x61\x1\x75\x1\x73\x1\x74\x1\x30\x2\x74"+
			"\x1\x77\x1\x30\x1\x69\x1\x61\x1\x69\x1\x72\x2\x69\x1\x6F\x1\xFFFF\x1"+
			"\x72\x1\x62\x1\x56\x1\x6E\x1\x30\x1\x72\x1\x73\x1\x62\x2\x65\x1\xFFFF"+
			"\x1\x30\x1\x68\x1\x30\x1\xFFFF\x1\x6E\x1\x64\x1\x75\x2\x73\x1\x64\x2"+
			"\x6C\x1\x56\x1\x6C\x1\x65\x1\x30\x1\xFFFF\x1\x30\x1\x73\x1\x6C\x1\x30"+
			"\x1\x6E\x1\xFFFF\x1\x6F\x1\xFFFF\x1\x74\x1\x30\x1\x72\x3\x30\x1\x65\x1"+
			"\x30\x2\x65\x1\x63\x2\xFFFF\x1\x30\x1\x65\x1\xFFFF\x2\x64\x1\x30\x1\xFFFF"+
			"\x1\x6E\x3\xFFFF\x1\x30\x1\xFFFF\x1\x63\x1\x56\x1\x74\x1\xFFFF\x1\x30"+
			"\x2\x73\x1\xFFFF\x1\x30\x1\xFFFF\x1\x74\x1\x65\x1\x6F\x1\xFFFF\x2\x30"+
			"\x1\xFFFF\x1\x6F\x1\x63\x1\x72\x2\xFFFF\x1\x72\x1\x74\x2\x30\x1\x6F\x2"+
			"\xFFFF\x1\x72\x1\x30\x1\xFFFF";
		private const string DFA15_maxS =
			"\x1\x7D\x7\xFFFF\x1\x39\x1\x2F\x2\xFFFF\x3\x3D\x1\x68\x1\x6F\x1\x6E\x1"+
			"\x61\x2\xFFFF\x1\x6E\x1\x6C\x1\x6F\x1\x78\x1\x6E\x2\x65\x2\x72\x1\x65"+
			"\x1\x68\x1\x6F\x1\x68\x2\xFFFF\x1\x6F\x1\xFFFF\x1\x39\xC\xFFFF\x1\x61"+
			"\x1\x75\x1\x74\x1\x69\x1\x64\x2\x61\x1\x75\x1\x73\x1\x74\x1\x7A\x2\x74"+
			"\x1\x77\x1\x7A\x1\x69\x1\x74\x1\x69\x1\x72\x2\x69\x1\x6F\x1\xFFFF\x1"+
			"\x72\x1\x62\x1\x56\x1\x6E\x1\x7A\x1\x72\x1\x73\x1\x62\x2\x65\x1\xFFFF"+
			"\x1\x7A\x1\x68\x1\x7A\x1\xFFFF\x1\x6E\x1\x64\x1\x75\x2\x73\x1\x64\x2"+
			"\x6C\x1\x56\x1\x6C\x1\x65\x1\x7A\x1\xFFFF\x1\x7A\x1\x73\x1\x6C\x1\x7A"+
			"\x1\x6E\x1\xFFFF\x1\x6F\x1\xFFFF\x1\x74\x1\x7A\x1\x72\x3\x7A\x1\x65\x1"+
			"\x7A\x2\x65\x1\x63\x2\xFFFF\x1\x7A\x1\x65\x1\xFFFF\x2\x64\x1\x7A\x1\xFFFF"+
			"\x1\x6E\x3\xFFFF\x1\x7A\x1\xFFFF\x1\x63\x1\x56\x1\x74\x1\xFFFF\x1\x7A"+
			"\x2\x73\x1\xFFFF\x1\x7A\x1\xFFFF\x1\x74\x1\x65\x1\x6F\x1\xFFFF\x2\x7A"+
			"\x1\xFFFF\x1\x6F\x1\x63\x1\x72\x2\xFFFF\x1\x72\x1\x74\x2\x7A\x1\x6F\x2"+
			"\xFFFF\x1\x72\x1\x7A\x1\xFFFF";
		private const string DFA15_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x2\xFFFF\x1\xA\x1"+
			"\xB\x7\xFFFF\x1\x16\x1\x17\xD\xFFFF\x1\x29\x1\x2A\x1\xFFFF\x1\x2D\x1"+
			"\xFFFF\x1\x31\x1\x32\x1\x8\x1\x2F\x1\x30\x1\x9\x1\xD\x1\xC\x1\xF\x1\xE"+
			"\x1\x11\x1\x10\x16\xFFFF\x1\x2E\xA\xFFFF\x1\x1E\x3\xFFFF\x1\x22\xC\xFFFF"+
			"\x1\x18\x5\xFFFF\x1\x1F\x1\xFFFF\x1\x21\xB\xFFFF\x1\x15\x1\x19\x2\xFFFF"+
			"\x1\x1C\x3\xFFFF\x1\x24\x1\xFFFF\x1\x26\x1\x27\x1\x2C\x1\xFFFF\x1\x2B"+
			"\x3\xFFFF\x1\x1A\x3\xFFFF\x1\x23\x1\xFFFF\x1\x28\x3\xFFFF\x1\x1B\x2\xFFFF"+
			"\x1\x25\x3\xFFFF\x1\x1D\x1\x20\x5\xFFFF\x1\x14\x1\x12\x2\xFFFF\x1\x13";
		private const string DFA15_specialS =
			"\xA8\xFFFF}>";
		private static readonly string[] DFA15_transitionS =
			{
				"\x2\x27\x2\xFFFF\x1\x27\x12\xFFFF\x1\x27\x1\x1\x5\xFFFF\x1\x28\x1\x2"+
				"\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\xA\x26\x1\xA\x1\xB\x1\xC"+
				"\x1\xD\x1\xE\x2\xFFFF\x2\x25\x1\xF\x1\x10\x4\x25\x1\x11\x3\x25\x1\x12"+
				"\xD\x25\x1\x13\x1\xFFFF\x1\x14\x1\xFFFF\x1\x25\x1\xFFFF\x1\x15\x1\x24"+
				"\x1\x16\x1\x17\x1\x18\x3\x25\x1\x19\x3\x25\x1\x1A\x1\x1B\x1\x1C\x1\x1D"+
				"\x1\x25\x1\x1E\x1\x25\x1\x1F\x1\x25\x1\x20\x1\x21\x3\x25\x1\x22\x1\xFFFF"+
				"\x1\x23",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\xA\x2A",
				"\x1\x2B\x4\xFFFF\x1\x2B",
				"",
				"",
				"\x1\x2D",
				"\x1\x2F",
				"\x1\x31",
				"\x1\x33",
				"\x1\x34",
				"\x1\x35",
				"\x1\x36",
				"",
				"",
				"\x1\x37",
				"\x1\x38\x3\xFFFF\x1\x39",
				"\x1\x3A",
				"\x1\x3B\xB\xFFFF\x1\x3C",
				"\x1\x3D\x7\xFFFF\x1\x3E",
				"\x1\x3F",
				"\x1\x40",
				"\x1\x41",
				"\x1\x42",
				"\x1\x43",
				"\x1\x44",
				"\x1\x45\xD\xFFFF\x1\x46",
				"\x1\x47",
				"",
				"",
				"\x1\x48",
				"",
				"\x1\x2A\x1\xFFFF\xA\x26",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x4A",
				"\x1\x4B",
				"\x1\x4C",
				"\x1\x4D",
				"\x1\x4E",
				"\x1\x4F",
				"\x1\x50",
				"\x1\x51",
				"\x1\x52",
				"\x1\x53",
				"\xA\x25\x7\xFFFF\x1A\x25\x4\xFFFF\x1\x25\x1\xFFFF\x1A\x25",
				"\x1\x55",
				"\x1\x56",
				"\x1\x57",
				"\xA\x25\x7\xFFFF\x1A\x25\x4\xFFFF\x1\x25\x1\xFFFF\x1A\x25",
				"\x1\x59",
				"\x1\x5A\x12\xFFFF\x1\x5B",
				"\x1\x5C",
				"\x1\x5D",
				"\x1\x5E",
				"\x1\x5F",
				"\x1\x60",
				"",
				"\x1\x61",
				"\x1\x62",
				"\x1\x63",
				"\x1\x64",
				"\xA\x25\x7\xFFFF\x1A\x25\x4\xFFFF\x1\x25\x1\xFFFF\x1A\x25",
				"\x1\x66",
				"\x1\x67",
				"\x1\x68",
				"\x1\x69",
				"\x1\x6A",
				"",
				"\xA\x25\x7\xFFFF\x1A\x25\x4\xFFFF\x1\x25\x1\xFFFF\x1A\x25",
				"\x1\x6C",
				"\xA\x25\x7\xFFFF\x1A\x25\x4\xFFFF\x1\x25\x1\xFFFF\x1A\x25",
				"",
				"\x1\x6E",
				"\x1\x6F",
				"\x1\x70",
				"\x1\x71",
				"\x1\x72",
				"\x1\x73",
				"\x1\x74",
				"\x1\x75",
				"\x1\x76",
				"\x1\x77",
				"\x1\x78",
				"\xA\x25\x7\xFFFF\x1A\x25\x4\xFFFF\x1\x25\x1\xFFFF\x1A\x25",
				"",
				"\xA\x25\x7\xFFFF\x1A\x25\x4\xFFFF\x1\x25\x1\xFFFF\x1A\x25",
				"\x1\x7B",
				"\x1\x7C",
				"\xA\x25\x7\xFFFF\x1A\x25\x4\xFFFF\x1\x25\x1\xFFFF\x1A\x25",
				"\x1\x7E",
				"",
				"\x1\x7F",
				"",
				"\x1\x80",
				"\xA\x25\x7\xFFFF\x1A\x25\x4\xFFFF\x1\x25\x1\xFFFF\x1A\x25",
				"\x1\x82",
				"\xA\x25\x7\xFFFF\x1A\x25\x4\xFFFF\x1\x25\x1\xFFFF\x1A\x25",
				"\xA\x25\x7\xFFFF\x1A\x25\x4\xFFFF\x1\x25\x1\xFFFF\x1A\x25",
				"\xA\x25\x7\xFFFF\x1A\x25\x4\xFFFF\x1\x25\x1\xFFFF\x1A\x25",
				"\x1\x86",
				"\xA\x25\x7\xFFFF\x1A\x25\x4\xFFFF\x1\x25\x1\xFFFF\x1A\x25",
				"\x1\x88",
				"\x1\x89",
				"\x1\x8A",
				"",
				"",
				"\xA\x25\x7\xFFFF\x1A\x25\x4\xFFFF\x1\x25\x1\xFFFF\x1A\x25",
				"\x1\x8C",
				"",
				"\x1\x8D",
				"\x1\x8E",
				"\xA\x25\x7\xFFFF\x1A\x25\x4\xFFFF\x1\x25\x1\xFFFF\x1A\x25",
				"",
				"\x1\x90",
				"",
				"",
				"",
				"\xA\x25\x7\xFFFF\x1A\x25\x4\xFFFF\x1\x25\x1\xFFFF\x1A\x25",
				"",
				"\x1\x92",
				"\x1\x93",
				"\x1\x94",
				"",
				"\xA\x25\x7\xFFFF\x1A\x25\x4\xFFFF\x1\x25\x1\xFFFF\x1A\x25",
				"\x1\x96",
				"\x1\x97",
				"",
				"\xA\x25\x7\xFFFF\x1A\x25\x4\xFFFF\x1\x25\x1\xFFFF\x1A\x25",
				"",
				"\x1\x99",
				"\x1\x9A",
				"\x1\x9B",
				"",
				"\xA\x25\x7\xFFFF\x1A\x25\x4\xFFFF\x1\x25\x1\xFFFF\x1A\x25",
				"\xA\x25\x7\xFFFF\x1A\x25\x4\xFFFF\x1\x25\x1\xFFFF\x1A\x25",
				"",
				"\x1\x9E",
				"\x1\x9F",
				"\x1\xA0",
				"",
				"",
				"\x1\xA1",
				"\x1\xA2",
				"\xA\x25\x7\xFFFF\x1A\x25\x4\xFFFF\x1\x25\x1\xFFFF\x1A\x25",
				"\xA\x25\x7\xFFFF\x1A\x25\x4\xFFFF\x1\x25\x1\xFFFF\x1A\x25",
				"\x1\xA5",
				"",
				"",
				"\x1\xA6",
				"\xA\x25\x7\xFFFF\x1A\x25\x4\xFFFF\x1\x25\x1\xFFFF\x1A\x25",
				""
			};

		private static readonly short[] DFA15_eot = DFA.UnpackEncodedString(DFA15_eotS);
		private static readonly short[] DFA15_eof = DFA.UnpackEncodedString(DFA15_eofS);
		private static readonly char[] DFA15_min = DFA.UnpackEncodedStringToUnsignedChars(DFA15_minS);
		private static readonly char[] DFA15_max = DFA.UnpackEncodedStringToUnsignedChars(DFA15_maxS);
		private static readonly short[] DFA15_accept = DFA.UnpackEncodedString(DFA15_acceptS);
		private static readonly short[] DFA15_special = DFA.UnpackEncodedString(DFA15_specialS);
		private static readonly short[][] DFA15_transition;

		static DFA15()
		{
			int numStates = DFA15_transitionS.Length;
			DFA15_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA15_transition[i] = DFA.UnpackEncodedString(DFA15_transitionS[i]);
			}
		}

		public DFA15( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 15;
			this.eot = DFA15_eot;
			this.eof = DFA15_eof;
			this.min = DFA15_min;
			this.max = DFA15_max;
			this.accept = DFA15_accept;
			this.special = DFA15_special;
			this.transition = DFA15_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__17 | T__18 | T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | BOOL | VOID | ID | INT | DOUBLE | COMMENT | WS | CHAR );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}
