//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g 2011-11-15 20:37:14

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


	using System;
	using System.IO;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class ReptileParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "BOOL", "CHAR", "COMMENT", "DOUBLE", "ESC_SEQ", "HEX_DIGIT", "ID", "INT", "OCTAL_ESC", "UNICODE_ESC", "VOID", "WS", "'!='", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "':'", "';'", "'<'", "'<='", "'='", "'=='", "'>'", "'>='", "'Main'", "'['", "']'", "'and'", "'array'", "'char'", "'class'", "'double'", "'else'", "'extends'", "'if'", "'int'", "'methods'", "'new'", "'or'", "'print'", "'printline'", "'program'", "'readchar'", "'readdouble'", "'readint'", "'return'", "'this'", "'vars'", "'while'", "'{'", "'}'"
	};
	public const int EOF=-1;
	public const int T__16=16;
	public const int T__17=17;
	public const int T__18=18;
	public const int T__19=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int BOOL=4;
	public const int CHAR=5;
	public const int COMMENT=6;
	public const int DOUBLE=7;
	public const int ESC_SEQ=8;
	public const int HEX_DIGIT=9;
	public const int ID=10;
	public const int INT=11;
	public const int OCTAL_ESC=12;
	public const int UNICODE_ESC=13;
	public const int VOID=14;
	public const int WS=15;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public ReptileParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public ReptileParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return ReptileParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g"; } }


	SymbolTable directory;
	Stack<string> pOperadores = new Stack<string>();
	Stack<VariableSymbol> pOperandos = new Stack<VariableSymbol>();
	QuadruplesList quadruplesList = new QuadruplesList();
	Stack<Quadruple> pSaltos = new Stack<Quadruple>();
	Stack<ArrayVariableSymbol> pDimensionadas = new Stack<ArrayVariableSymbol>();
	string mainClassName = "Main";
	string mainMethodName = "main";
	string nameProgram;

	Scope actualScope;
	ClassSymbol mainClass;

	LinkedList<string> operadoresRelacionales = new LinkedList<string>(new string[] {"==", "!=", ">", "<", ">=", "<="});
	LinkedList<string> masMenosOr = new LinkedList<string>(new string[] {"+", "-", "or"});
	LinkedList<string> porEntreAnd = new LinkedList<string>(new string[] {"*", "/", "and"});

	public override void ReportError(RecognitionException e)
	{
		//System.Console.WriteLine("PLACE: En ReportError PARSER");
		//DisplayRecognitionError(this.TokenNames, e);	//ADDED
		throw e;
	}

	/*
	public override string GetErrorMessage(RecognitionException e, string[] tokenNames) {	//ADDED
		return "EN GETERRORMESSAGE PARSER";
	}
	*/

	protected override object RecoverFromMismatchedToken(IIntStream input, int ttype, BitSet follow)
	{
		//Console.WriteLine("PLACE: En RecoverFromMismatchedToken");
	      throw new MismatchedTokenException(ttype, input);
	}

	public override object RecoverFromMismatchedSet(IIntStream input, RecognitionException e, BitSet follow)
	{
		//Console.WriteLine("PLACE: En RecoverFromMismatchedSet");
	        throw e;
	}

	void createDirectories() {
		directory = new SymbolTable();
	}

	void defineMainClass() {
		mainClass = new ClassSymbol(mainClassName, null);
		directory.Add(mainClass.name, (ScopeWithMethods)mainClass);
	}

	void registerClass(string className, string superClase) {
		try {
			ClassSymbol clasePadre = null;
			if(superClase != null) {
				try {
					clasePadre = directory.findType(superClase);
				}
				catch(Exception exception) {
					manageException(exception);
				}
			}
			
			ClassSymbol newClass = new ClassSymbol(className, clasePadre);
			directory.Add(newClass.name, newClass);
			actualScope = newClass;
		}
		catch(Exception exception) {
			manageException(exception);	//manejarException
		}
	}

	//usado con metodos y variables
	void registerVariableInScope(string variableName, ClassSymbol tipo) {
		VariableSymbol variable = new VariableSymbol(variableName, tipo);
		if(actualScope is MethodSymbol) {
			((MethodSymbol)actualScope).defineLocalVariable(variableName, variable);
		}
		else {
			actualScope.defineVariable(variable.name, variable);
		}
	}

	void registrarMetodo(ClassSymbol tipoRetorno, string methodName) {
		ScopeWithMethods scope = (ScopeWithMethods)actualScope;
		MethodSymbol methodSymbol = new MethodSymbol(methodName, tipoRetorno, scope);
		scope.defineMethod(methodName, methodSymbol);
		actualScope = methodSymbol;
	}

	void registerFormalParameter(string variableName, string tipo) {
		ClassSymbol tipoParam = directory.findType(tipo);
		VariableSymbol variableSymbol = new VariableSymbol(variableName, tipoParam);
		MethodSymbol methodSymbol = (MethodSymbol) actualScope;	//casting para poder llamar a defineParameter(..)
		methodSymbol.defineParameter(variableName, variableSymbol);
	}

	bool verifyVariableCanBeAccessed(string variable) {
		VariableSymbol varSymbol = actualScope.getVariableSymbol(variable);
		if(varSymbol == null) {
			generateVariableNotFoundError(variable);
			return false;
		}
		return true;
	}

	void generateVariableNotFoundError(string variable) {
			MethodSymbol m = (MethodSymbol)actualScope;
			Exception e = new Exception(m.fullyQualifiedName() + ": No se encontro la variable " + variable);
			manageException(e);
	}

	void verifyObjectAndInstVariableDefined(string objeto, string instVar) {
		verifyVariableCanBeAccessed(objeto);
		VariableSymbol obj = actualScope.getVariableSymbol(objeto);
		ClassSymbol tipo = obj.type;
		verifyInstVariableDefinedInClassSymbol(tipo, instVar);
	}

	void verifyInstVariableDefinedInClassSymbol(ClassSymbol tipo, string instVar) {
		VariableSymbol varDeInstancia = tipo.getVariableSymbol(instVar);
		if(varDeInstancia == null) {
			generateInstanceVariableNotFoundError(tipo.name, instVar);
		}
	}

	VariableSymbol getVariable(string variable) {
		verifyVariableCanBeAccessed(variable);
		return actualScope.getVariableSymbol(variable);
	}

	VariableSymbol getField(string objeto, string instVar) {
		verifyObjectAndInstVariableDefined(objeto, instVar);
		VariableSymbol obj = actualScope.getVariableSymbol(objeto);
		ClassSymbol tipo = obj.type;
		VariableSymbol varDeInstancia = tipo.getVariableSymbol(instVar);
		return varDeInstancia;
	}

	MethodSymbol getMethod(string objeto, string method) {
		verifyObjectAndMethodDefined(objeto, method);
		VariableSymbol obj = actualScope.getVariableSymbol(objeto);
		MethodSymbol methodSymbol = obj.type.getMethodSymbol(method);
		return methodSymbol;
	}

	void verifyObjectAndMethodDefined(string objeto, string method) {
		verifyVariableCanBeAccessed(objeto);
		VariableSymbol obj = actualScope.getVariableSymbol(objeto);
		ClassSymbol type = obj.type;
		verifyMethodDefinedInClassSymbol(type, method);
	}

	void verifyMethodDefinedInClassSymbol(ClassSymbol type, string method) {
		MethodSymbol methodSymbol = type.getMethodSymbol(method);
		if(methodSymbol == null) {
			string msg = "Metodo " + method + " no esta definido en la clase " + type.name + " ni en alguna superclase.";
			manageException(new Exception(msg));
		}
	}

	void generateInstanceVariableNotFoundError(string scope, string variable) {
		MethodSymbol m = (MethodSymbol)actualScope;
		Exception e = new Exception(m.fullyQualifiedName() + ": No se encontro la variable de instancia " + variable + " en " + scope);
		manageException(e);
	}

	void verifyInstanceVariableDefinedInThis(string var) {
		ScopeWithMethods enclosingScope = ((MethodSymbol)actualScope).enclosingScope;
		VariableSymbol instVariable = enclosingScope.getVariableSymbol(var);
		if(instVariable == null) {
			generateInstanceVariableNotFoundError(enclosingScope.name, var);
		}
	}

	VariableSymbol getInstanceVariable(string var) {
		verifyInstanceVariableDefinedInThis(var);
		ScopeWithMethods enclosingScope = ((MethodSymbol)actualScope).enclosingScope;
		ClassSymbol clase = (ClassSymbol)enclosingScope;
		return clase.getVariableSymbol(var);
	}

	/*
	void verifyIsVector(string var) {
		if(verifyVariableCanBeAccessed(var)) {
			VariableSymbol arr = actualScope.getVariableSymbol(var);
			if(!arr.type.isVectorType()) {
				generateIsNotVectorError(arr.name);
			}
		}
	}
	*/
	/*
	void generateIsNotVectorError(string variable) {
		MethodSymbol m = (MethodSymbol)actualScope;
		Exception e = new Exception(m.fullyQualifiedName() + ": La variable " + variable + " no es de ninguna clase Vector y por tanto no tiene definido el operador [] .");
		manageException(e);
	}
	*/

	public bool tiposSonCompatiblesEnOperacion() {
		VariableSymbol right = pOperandos.Pop();
		VariableSymbol left = pOperandos.Pop();
		pOperandos.Push(left);
		pOperandos.Push(right);
		string operador = pOperadores.Peek();
		ClassSymbol tipoResultado = directory.resultType(left.type, right.type, operador);
		if(tipoResultado.isVoidType()) {
			return false;
		}
		return true;
	}

	public void aplicaOperadorPendienteQueSea(LinkedList<string> operadoresBuscados) {
		if(pOperadores.Count > 0) {
			string operador = pOperadores.Peek();
			if(operadoresBuscados.Contains(operador)) {
				if(tiposSonCompatiblesEnOperacion()) {
					pOperadores.Pop();
					VariableSymbol right = pOperandos.Pop();
					VariableSymbol left = pOperandos.Pop();
					ClassSymbol tipoResultado = directory.resultType(left.type, right.type, operador);
					
					VariableSymbol temporal = getNewTemporalVarOfType(tipoResultado.name);
					quadruplesList.addEXPRESSION_OPER(operador, left.address.ToString(), right.address.ToString(), temporal.address.ToString());
					pOperandos.Push(temporal);
				}
				else {
					
					pOperadores.Pop();
					VariableSymbol right = pOperandos.Pop();
					VariableSymbol left = pOperandos.Pop();
					MethodSymbol m = (MethodSymbol)actualScope;
					manageException(new SemanticException(m.fullyQualifiedName() +": operador \"" + operador + "\" no es valido para " + 
						left.type.name + " " + left.name + ", " + right.type.name + " " + right.name));
				}
			}
		}
	}

	public void pushICONST(string iConst) {
		VariableSymbol temp = getNewTemporalVarOfType("int");
		pOperandos.Push(temp);
		quadruplesList.addICONST(iConst, temp.address.ToString());
	}

	public void pushCCONST(string cConst) {
		VariableSymbol temp = getNewTemporalVarOfType("char");
		pOperandos.Push(temp);
		quadruplesList.addCCONST(cConst, temp.address.ToString());
	}

	public void pushDCONST(string dConst) {
		VariableSymbol temp = getNewTemporalVarOfType("double");
		pOperandos.Push(temp);
		quadruplesList.addDCONST(dConst, temp.address.ToString());
	}

	public VariableSymbol getNewTemporalVarOfType(string type) {
		ClassSymbol tipo = directory.findType(type);
		VariableSymbol temp = ((MethodSymbol)actualScope).getNewTemporal(tipo);
		return temp;
	}

	/*
	public string typeOfVector(string type) {
		if(type.Equals(SymbolTable.integerVectorName)) {
			return SymbolTable.integerName;
		}
		else if(type.Equals(SymbolTable.charVectorName)) {
			return SymbolTable.charName;
		}
		else if(type.Equals(SymbolTable.doubleVectorName)) {
			return SymbolTable.doubleName;
		}
		else {
			manageException(new Exception("El tipo " + type + " no es un tipo de vector conocido."));
			return "";
		}
	}
	*/

	public void printQuadruplesList() {
		Console.WriteLine(quadruplesList.ToStringWithQuadrupleNumbers());
	}

	public void verifyMainMethodDefinedInMainClass() {
		MethodSymbol mainMethod = mainClass.getMethodSymbol(mainMethodName);
		if(mainMethod == null) {
			string errorMsg = "Debe definir al metodo void main() {..} en la clase Main";
			manageException(new Exception(errorMsg));
		}
		if(mainMethod.returnType.name != SymbolTable.voidName) {
			string errorMsg = "El tipo de retorno de main() {..} en la clase Main debe ser void";
			manageException(new Exception(errorMsg));
		}
		if(mainMethod.countParameters() > 1) {
			string errorMsg = "El metodo " + mainMethod.fullyQualifiedName() + " no puede recibir parametros.";
			manageException(new Exception(errorMsg));
		}
	}

	public static void manageException(Exception e) {
		throw new SemanticException("ERROR SEMANTICO: " + e.ToString() + "\n");
	}


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_program() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_program() {}

	// $ANTLR start "program"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:354:8: public program : programName ( classDecl )* classMain ;
	[GrammarRule("program")]
	public void program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(354, 118);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:354:16: ( programName ( classDecl )* classMain )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:354:18: programName ( classDecl )* classMain
			{
			DebugLocation(354, 18);
			createDirectories(); defineMainClass();
			DebugLocation(354, 60);
			PushFollow(Follow._programName_in_program61);
			programName();
			PopFollow();

			DebugLocation(354, 72);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:354:72: ( classDecl )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, decisionCanBacktrack[1]);
				int LA1_0 = input.LA(1);

				if ((LA1_0==39))
				{
					int LA1_1 = input.LA(2);

					if ((LA1_1==ID))
					{
						alt1 = 1;
					}


				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:354:72: classDecl
					{
					DebugLocation(354, 72);
					PushFollow(Follow._classDecl_in_program63);
					classDecl();
					PopFollow();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(354, 83);
			actualScope = mainClass;
			DebugLocation(354, 110);
			PushFollow(Follow._classMain_in_program68);
			classMain();
			PopFollow();


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
	    }
	 	DebugLocation(354, 118);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return;

	}
	// $ANTLR end "program"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_programName() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_programName() {}

	// $ANTLR start "programName"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:356:1: programName : 'program' ID ';' ;
	[GrammarRule("programName")]
	private void programName()
	{
		EnterRule_programName();
		EnterRule("programName", 2);
		TraceIn("programName", 2);
	    IToken ID1 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "programName");
		DebugLocation(356, 45);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:357:2: ( 'program' ID ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:357:4: 'program' ID ';'
			{
			DebugLocation(357, 4);
			Match(input,50,Follow._50_in_programName77); 
			DebugLocation(357, 14);
			ID1=(IToken)Match(input,ID,Follow._ID_in_programName79); 
			DebugLocation(357, 17);
			Match(input,26,Follow._26_in_programName81); 
			DebugLocation(357, 21);
			nameProgram = (ID1!=null?ID1.Text:null);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("programName", 2);
			LeaveRule("programName", 2);
			LeaveRule_programName();
	    }
	 	DebugLocation(357, 45);
		} finally { DebugExitRule(GrammarFileName, "programName"); }
		return;

	}
	// $ANTLR end "programName"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_classMain() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_classMain() {}

	// $ANTLR start "classMain"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:359:1: classMain : 'class' 'Main' '{' ( varDecl )* ( methodDeclaration )* '}' ;
	[GrammarRule("classMain")]
	private void classMain()
	{
		EnterRule_classMain();
		EnterRule("classMain", 3);
		TraceIn("classMain", 3);
		try { DebugEnterRule(GrammarFileName, "classMain");
		DebugLocation(359, 3);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:360:2: ( 'class' 'Main' '{' ( varDecl )* ( methodDeclaration )* '}' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:360:4: 'class' 'Main' '{' ( varDecl )* ( methodDeclaration )* '}'
			{
			DebugLocation(360, 4);
			Match(input,39,Follow._39_in_classMain92); 
			DebugLocation(360, 12);
			Match(input,33,Follow._33_in_classMain94); 
			DebugLocation(360, 19);
			Match(input,58,Follow._58_in_classMain96); 
			DebugLocation(360, 23);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:360:23: ( varDecl )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
				switch (input.LA(1))
				{
				case 38:
				case 40:
				case 44:
					{
					int LA2_1 = input.LA(2);

					if ((LA2_1==ID))
					{
						int LA2_5 = input.LA(3);

						if ((LA2_5==26))
						{
							alt2 = 1;
						}


					}


					}
					break;
				case ID:
					{
					int LA2_2 = input.LA(2);

					if ((LA2_2==ID))
					{
						int LA2_5 = input.LA(3);

						if ((LA2_5==26))
						{
							alt2 = 1;
						}


					}


					}
					break;
				case 37:
					{
					alt2 = 1;
					}
					break;
				}

				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:360:23: varDecl
					{
					DebugLocation(360, 23);
					PushFollow(Follow._varDecl_in_classMain98);
					varDecl();
					PopFollow();


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(360, 32);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:360:32: ( methodDeclaration )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, decisionCanBacktrack[3]);
				int LA3_0 = input.LA(1);

				if ((LA3_0==ID||LA3_0==VOID||LA3_0==38||LA3_0==40||LA3_0==44))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:360:32: methodDeclaration
					{
					DebugLocation(360, 32);
					PushFollow(Follow._methodDeclaration_in_classMain101);
					methodDeclaration();
					PopFollow();


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(360, 51);
			quadruplesList.addHALT();
			DebugLocation(360, 79);
			Match(input,59,Follow._59_in_classMain106); 
			DebugLocation(361, 3);

					verifyMainMethodDefinedInMainClass();
					directory.printDirectory(); directory.printTypesDirectory(); printQuadruplesList();
					string outputFile = nameProgram + ".re";
					System.IO.File.WriteAllText(@outputFile, directory.formattedSymbolTable() + quadruplesList.countQuadruples() + "\n" + quadruplesList.ToString());
					

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("classMain", 3);
			LeaveRule("classMain", 3);
			LeaveRule_classMain();
	    }
	 	DebugLocation(366, 3);
		} finally { DebugExitRule(GrammarFileName, "classMain"); }
		return;

	}
	// $ANTLR end "classMain"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_classDecl() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_classDecl() {}

	// $ANTLR start "classDecl"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:368:1: classDecl : 'class' clase= ID ( superClass )? '{' ( varDecl )* ( methodDeclaration )* '}' ;
	[GrammarRule("classDecl")]
	private void classDecl()
	{
		EnterRule_classDecl();
		EnterRule("classDecl", 4);
		TraceIn("classDecl", 4);
	    IToken clase = default(IToken);
	    string superClass2 = default(string);

		try { DebugEnterRule(GrammarFileName, "classDecl");
		DebugLocation(368, 130);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:369:5: ( 'class' clase= ID ( superClass )? '{' ( varDecl )* ( methodDeclaration )* '}' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:369:9: 'class' clase= ID ( superClass )? '{' ( varDecl )* ( methodDeclaration )* '}'
			{
			DebugLocation(369, 9);
			Match(input,39,Follow._39_in_classDecl125); 
			DebugLocation(369, 23);
			clase=(IToken)Match(input,ID,Follow._ID_in_classDecl131); 
			DebugLocation(369, 28);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:369:28: ( superClass )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, decisionCanBacktrack[4]);
			int LA4_0 = input.LA(1);

			if ((LA4_0==42))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:369:29: superClass
				{
				DebugLocation(369, 29);
				PushFollow(Follow._superClass_in_classDecl134);
				superClass2=superClass();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(369, 42);
			registerClass((clase!=null?clase.Text:null), superClass2);
			DebugLocation(369, 96);
			Match(input,58,Follow._58_in_classDecl140); 
			DebugLocation(369, 100);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:369:100: ( varDecl )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, decisionCanBacktrack[5]);
				switch (input.LA(1))
				{
				case 38:
				case 40:
				case 44:
					{
					int LA5_1 = input.LA(2);

					if ((LA5_1==ID))
					{
						int LA5_5 = input.LA(3);

						if ((LA5_5==26))
						{
							alt5 = 1;
						}


					}


					}
					break;
				case ID:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==ID))
					{
						int LA5_5 = input.LA(3);

						if ((LA5_5==26))
						{
							alt5 = 1;
						}


					}


					}
					break;
				case 37:
					{
					alt5 = 1;
					}
					break;
				}

				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:369:100: varDecl
					{
					DebugLocation(369, 100);
					PushFollow(Follow._varDecl_in_classDecl142);
					varDecl();
					PopFollow();


					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(369, 109);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:369:109: ( methodDeclaration )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, decisionCanBacktrack[6]);
				int LA6_0 = input.LA(1);

				if ((LA6_0==ID||LA6_0==VOID||LA6_0==38||LA6_0==40||LA6_0==44))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:369:109: methodDeclaration
					{
					DebugLocation(369, 109);
					PushFollow(Follow._methodDeclaration_in_classDecl145);
					methodDeclaration();
					PopFollow();


					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(369, 128);
			Match(input,59,Follow._59_in_classDecl148); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("classDecl", 4);
			LeaveRule("classDecl", 4);
			LeaveRule_classDecl();
	    }
	 	DebugLocation(369, 130);
		} finally { DebugExitRule(GrammarFileName, "classDecl"); }
		return;

	}
	// $ANTLR end "classDecl"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_superClass() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_superClass() {}

	// $ANTLR start "superClass"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:371:1: superClass returns [string superClase] : 'extends' ID ;
	[GrammarRule("superClass")]
	private string superClass()
	{
		EnterRule_superClass();
		EnterRule("superClass", 5);
		TraceIn("superClass", 5);
	    string superClase = default(string);


	    IToken ID3 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "superClass");
		DebugLocation(371, 77);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:371:38: ( 'extends' ID )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:371:40: 'extends' ID
			{
			DebugLocation(371, 40);
			Match(input,42,Follow._42_in_superClass158); 
			DebugLocation(371, 50);
			ID3=(IToken)Match(input,ID,Follow._ID_in_superClass160); 
			DebugLocation(371, 53);
			superClase = (ID3!=null?ID3.Text:null);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("superClass", 5);
			LeaveRule("superClass", 5);
			LeaveRule_superClass();
	    }
	 	DebugLocation(371, 77);
		} finally { DebugExitRule(GrammarFileName, "superClass"); }
		return superClase;

	}
	// $ANTLR end "superClass"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_vars() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_vars() {}

	// $ANTLR start "vars"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:373:1: vars : 'vars' ':' ( varDecl )* ;
	[GrammarRule("vars")]
	private void vars()
	{
		EnterRule_vars();
		EnterRule("vars", 6);
		TraceIn("vars", 6);
		try { DebugEnterRule(GrammarFileName, "vars");
		DebugLocation(373, 22);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:374:2: ( 'vars' ':' ( varDecl )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:374:4: 'vars' ':' ( varDecl )*
			{
			DebugLocation(374, 4);
			Match(input,56,Follow._56_in_vars171); 
			DebugLocation(374, 11);
			Match(input,25,Follow._25_in_vars173); 
			DebugLocation(374, 15);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:374:15: ( varDecl )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, decisionCanBacktrack[7]);
				int LA7_0 = input.LA(1);

				if ((LA7_0==ID||(LA7_0>=37 && LA7_0<=38)||LA7_0==40||LA7_0==44))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:374:15: varDecl
					{
					DebugLocation(374, 15);
					PushFollow(Follow._varDecl_in_vars175);
					varDecl();
					PopFollow();


					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("vars", 6);
			LeaveRule("vars", 6);
			LeaveRule_vars();
	    }
	 	DebugLocation(374, 22);
		} finally { DebugExitRule(GrammarFileName, "vars"); }
		return;

	}
	// $ANTLR end "vars"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_varDecl() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_varDecl() {}

	// $ANTLR start "varDecl"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:376:1: varDecl : ( (t= primitiveType |t= referenceType ) ID | arrayVarDeclaration ) ';' ;
	[GrammarRule("varDecl")]
	private void varDecl()
	{
		EnterRule_varDecl();
		EnterRule("varDecl", 7);
		TraceIn("varDecl", 7);
	    IToken ID4 = default(IToken);
	    string t = default(string);


	    	ClassSymbol clase;

		try { DebugEnterRule(GrammarFileName, "varDecl");
		DebugLocation(376, 9);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:380:5: ( ( (t= primitiveType |t= referenceType ) ID | arrayVarDeclaration ) ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:380:9: ( (t= primitiveType |t= referenceType ) ID | arrayVarDeclaration ) ';'
			{
			DebugLocation(380, 9);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:380:9: ( (t= primitiveType |t= referenceType ) ID | arrayVarDeclaration )
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			int LA9_0 = input.LA(1);

			if ((LA9_0==ID||LA9_0==38||LA9_0==40||LA9_0==44))
			{
				alt9 = 1;
			}
			else if ((LA9_0==37))
			{
				alt9 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:381:6: (t= primitiveType |t= referenceType ) ID
				{
				DebugLocation(381, 6);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:381:6: (t= primitiveType |t= referenceType )
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, decisionCanBacktrack[8]);
				int LA8_0 = input.LA(1);

				if ((LA8_0==38||LA8_0==40||LA8_0==44))
				{
					alt8 = 1;
				}
				else if ((LA8_0==ID))
				{
					alt8 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:381:7: t= primitiveType
					{
					DebugLocation(381, 9);
					PushFollow(Follow._primitiveType_in_varDecl207);
					t=primitiveType();
					PopFollow();


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:381:27: t= referenceType
					{
					DebugLocation(381, 29);
					PushFollow(Follow._referenceType_in_varDecl215);
					t=referenceType();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(381, 46);
				clase = directory.findType(t);
				DebugLocation(381, 85);
				ID4=(IToken)Match(input,ID,Follow._ID_in_varDecl220); 
				DebugLocation(382, 6);
				registerVariableInScope((ID4!=null?ID4.Text:null), clase);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:383:8: arrayVarDeclaration
				{
				DebugLocation(383, 8);
				PushFollow(Follow._arrayVarDeclaration_in_varDecl238);
				arrayVarDeclaration();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(9); }

			DebugLocation(384, 6);
			Match(input,26,Follow._26_in_varDecl246); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("varDecl", 7);
			LeaveRule("varDecl", 7);
			LeaveRule_varDecl();
	    }
	 	DebugLocation(384, 9);
		} finally { DebugExitRule(GrammarFileName, "varDecl"); }
		return;

	}
	// $ANTLR end "varDecl"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_primitiveType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_primitiveType() {}

	// $ANTLR start "primitiveType"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:386:1: primitiveType returns [string tipo] : t= ( 'int' | 'char' | 'double' ) ;
	[GrammarRule("primitiveType")]
	private string primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 8);
		TraceIn("primitiveType", 8);
	    string tipo = default(string);


	    IToken t = default(IToken);

		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(386, 84);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:386:35: (t= ( 'int' | 'char' | 'double' ) )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:386:37: t= ( 'int' | 'char' | 'double' )
			{
			DebugLocation(386, 39);

			t=(IToken)input.LT(1);
			if (input.LA(1)==38||input.LA(1)==40||input.LA(1)==44)
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(386, 67);
			tipo = (t!=null?t.Text:null);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("primitiveType", 8);
			LeaveRule("primitiveType", 8);
			LeaveRule_primitiveType();
	    }
	 	DebugLocation(386, 84);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return tipo;

	}
	// $ANTLR end "primitiveType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_referenceType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_referenceType() {}

	// $ANTLR start "referenceType"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:388:1: referenceType returns [string tipo] : ID ;
	[GrammarRule("referenceType")]
	private string referenceType()
	{
		EnterRule_referenceType();
		EnterRule("referenceType", 9);
		TraceIn("referenceType", 9);
	    string tipo = default(string);


	    IToken ID5 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "referenceType");
		DebugLocation(388, 59);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:388:35: ( ID )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:388:37: ID
			{
			DebugLocation(388, 37);
			ID5=(IToken)Match(input,ID,Follow._ID_in_referenceType285); 
			DebugLocation(388, 40);
			tipo = (ID5!=null?ID5.Text:null);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("referenceType", 9);
			LeaveRule("referenceType", 9);
			LeaveRule_referenceType();
	    }
	 	DebugLocation(388, 59);
		} finally { DebugExitRule(GrammarFileName, "referenceType"); }
		return tipo;

	}
	// $ANTLR end "referenceType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_arrayVarDeclaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_arrayVarDeclaration() {}

	// $ANTLR start "arrayVarDeclaration"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:390:1: arrayVarDeclaration : 'array' '<' pt= primitiveType '>' '[' INT ']' ID ;
	[GrammarRule("arrayVarDeclaration")]
	private void arrayVarDeclaration()
	{
		EnterRule_arrayVarDeclaration();
		EnterRule("arrayVarDeclaration", 10);
		TraceIn("arrayVarDeclaration", 10);
	    IToken INT6 = default(IToken);
	    IToken ID7 = default(IToken);
	    string pt = default(string);

		try { DebugEnterRule(GrammarFileName, "arrayVarDeclaration");
		DebugLocation(390, 1);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:391:2: ( 'array' '<' pt= primitiveType '>' '[' INT ']' ID )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:391:5: 'array' '<' pt= primitiveType '>' '[' INT ']' ID
			{
			DebugLocation(391, 5);
			Match(input,37,Follow._37_in_arrayVarDeclaration298); 
			DebugLocation(391, 13);
			Match(input,27,Follow._27_in_arrayVarDeclaration300); 
			DebugLocation(391, 20);
			PushFollow(Follow._primitiveType_in_arrayVarDeclaration306);
			pt=primitiveType();
			PopFollow();

			DebugLocation(391, 36);
			Match(input,31,Follow._31_in_arrayVarDeclaration308); 
			DebugLocation(391, 40);
			Match(input,34,Follow._34_in_arrayVarDeclaration310); 
			DebugLocation(391, 44);
			INT6=(IToken)Match(input,INT,Follow._INT_in_arrayVarDeclaration312); 
			DebugLocation(391, 48);
			Match(input,35,Follow._35_in_arrayVarDeclaration314); 
			DebugLocation(391, 52);
			ID7=(IToken)Match(input,ID,Follow._ID_in_arrayVarDeclaration316); 
			DebugLocation(392, 3);

					ClassSymbol arrayClassSymbol = SymbolTable.arrayClassSymbol;
					ClassSymbol parameterizedType = directory.findType(pt);
					int size = int.Parse((INT6!=null?INT6.Text:null));
					if(size <= 0) {
						MethodSymbol m = (MethodSymbol)actualScope;
						string msg = "En " + m.fullyQualifiedName() + ": Toda dimension del array " + (ID7!=null?ID7.Text:null) + " debe ser mayor o igual a 1.";
						manageException(new Exception(msg));
					}
					string variableName = (ID7!=null?ID7.Text:null);
					
					ArrayVariableSymbol variable = new ArrayVariableSymbol(variableName, parameterizedType);
					variable.addDimension(size);
					if(actualScope is MethodSymbol) {
						((MethodSymbol)actualScope).defineLocalVariable(variable.name, variable);
					}
					else {
						actualScope.defineVariable(variable.name, variable);
					}
					

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("arrayVarDeclaration", 10);
			LeaveRule("arrayVarDeclaration", 10);
			LeaveRule_arrayVarDeclaration();
	    }
	 	DebugLocation(413, 1);
		} finally { DebugExitRule(GrammarFileName, "arrayVarDeclaration"); }
		return;

	}
	// $ANTLR end "arrayVarDeclaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_voidType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_voidType() {}

	// $ANTLR start "voidType"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:415:1: voidType returns [string tipo] : t= 'void' ;
	[GrammarRule("voidType")]
	private string voidType()
	{
		EnterRule_voidType();
		EnterRule("voidType", 11);
		TraceIn("voidType", 11);
	    string tipo = default(string);


	    IToken t = default(IToken);

		try { DebugEnterRule(GrammarFileName, "voidType");
		DebugLocation(415, 60);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:415:30: (t= 'void' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:415:32: t= 'void'
			{
			DebugLocation(415, 34);
			t=(IToken)Match(input,VOID,Follow._VOID_in_voidType339); 
			DebugLocation(415, 43);
			tipo = (t!=null?t.Text:null);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("voidType", 11);
			LeaveRule("voidType", 11);
			LeaveRule_voidType();
	    }
	 	DebugLocation(415, 60);
		} finally { DebugExitRule(GrammarFileName, "voidType"); }
		return tipo;

	}
	// $ANTLR end "voidType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_formalParamType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_formalParamType() {}

	// $ANTLR start "formalParamType"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:417:1: formalParamType returns [string tipo] : (t= primitiveType |t= referenceType ) ;
	[GrammarRule("formalParamType")]
	private string formalParamType()
	{
		EnterRule_formalParamType();
		EnterRule("formalParamType", 12);
		TraceIn("formalParamType", 12);
	    string tipo = default(string);


	    string t = default(string);

		try { DebugEnterRule(GrammarFileName, "formalParamType");
		DebugLocation(417, 23);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:417:37: ( (t= primitiveType |t= referenceType ) )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:417:39: (t= primitiveType |t= referenceType )
			{
			DebugLocation(417, 39);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:417:39: (t= primitiveType |t= referenceType )
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			int LA10_0 = input.LA(1);

			if ((LA10_0==38||LA10_0==40||LA10_0==44))
			{
				alt10 = 1;
			}
			else if ((LA10_0==ID))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:417:40: t= primitiveType
				{
				DebugLocation(417, 42);
				PushFollow(Follow._primitiveType_in_formalParamType356);
				t=primitiveType();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:418:8: t= referenceType
				{
				DebugLocation(418, 10);
				PushFollow(Follow._referenceType_in_formalParamType370);
				t=referenceType();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(419, 6);
			tipo = t;

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("formalParamType", 12);
			LeaveRule("formalParamType", 12);
			LeaveRule_formalParamType();
	    }
	 	DebugLocation(419, 23);
		} finally { DebugExitRule(GrammarFileName, "formalParamType"); }
		return tipo;

	}
	// $ANTLR end "formalParamType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_methods() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_methods() {}

	// $ANTLR start "methods"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:421:1: methods : 'methods' ':' ( methodDeclaration )* ;
	[GrammarRule("methods")]
	private void methods()
	{
		EnterRule_methods();
		EnterRule("methods", 13);
		TraceIn("methods", 13);
		try { DebugEnterRule(GrammarFileName, "methods");
		DebugLocation(421, 35);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:422:2: ( 'methods' ':' ( methodDeclaration )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:422:4: 'methods' ':' ( methodDeclaration )*
			{
			DebugLocation(422, 4);
			Match(input,45,Follow._45_in_methods389); 
			DebugLocation(422, 14);
			Match(input,25,Follow._25_in_methods391); 
			DebugLocation(422, 18);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:422:18: ( methodDeclaration )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, decisionCanBacktrack[11]);
				int LA11_0 = input.LA(1);

				if ((LA11_0==ID||LA11_0==VOID||LA11_0==38||LA11_0==40||LA11_0==44))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:422:18: methodDeclaration
					{
					DebugLocation(422, 18);
					PushFollow(Follow._methodDeclaration_in_methods393);
					methodDeclaration();
					PopFollow();


					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("methods", 13);
			LeaveRule("methods", 13);
			LeaveRule_methods();
	    }
	 	DebugLocation(422, 35);
		} finally { DebugExitRule(GrammarFileName, "methods"); }
		return;

	}
	// $ANTLR end "methods"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_methodDeclaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_methodDeclaration() {}

	// $ANTLR start "methodDeclaration"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:424:1: methodDeclaration : (tRet= primitiveType |tRet= referenceType |tRet= voidType ) ID '(' ( formalParameters )? ')' '{' ( varDecl )* someStatements '}' ;
	[GrammarRule("methodDeclaration")]
	private void methodDeclaration()
	{
		EnterRule_methodDeclaration();
		EnterRule("methodDeclaration", 14);
		TraceIn("methodDeclaration", 14);
	    IToken ID8 = default(IToken);
	    string tRet = default(string);


	    	ClassSymbol tipoRetorno;
	    	MethodSymbol method;

		try { DebugEnterRule(GrammarFileName, "methodDeclaration");
		DebugLocation(424, 1);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:429:3: ( (tRet= primitiveType |tRet= referenceType |tRet= voidType ) ID '(' ( formalParameters )? ')' '{' ( varDecl )* someStatements '}' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:429:3: (tRet= primitiveType |tRet= referenceType |tRet= voidType ) ID '(' ( formalParameters )? ')' '{' ( varDecl )* someStatements '}'
			{
			DebugLocation(429, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:429:3: (tRet= primitiveType |tRet= referenceType |tRet= voidType )
			int alt12=3;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
			switch (input.LA(1))
			{
			case 38:
			case 40:
			case 44:
				{
				alt12 = 1;
				}
				break;
			case ID:
				{
				alt12 = 2;
				}
				break;
			case VOID:
				{
				alt12 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:429:4: tRet= primitiveType
				{
				DebugLocation(429, 9);
				PushFollow(Follow._primitiveType_in_methodDeclaration412);
				tRet=primitiveType();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:429:27: tRet= referenceType
				{
				DebugLocation(429, 32);
				PushFollow(Follow._referenceType_in_methodDeclaration420);
				tRet=referenceType();
				PopFollow();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:429:50: tRet= voidType
				{
				DebugLocation(429, 55);
				PushFollow(Follow._voidType_in_methodDeclaration428);
				tRet=voidType();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(429, 67);
			tipoRetorno = directory.findType(tRet);
			DebugLocation(430, 2);
			ID8=(IToken)Match(input,ID,Follow._ID_in_methodDeclaration435); 
			DebugLocation(431, 2);

				registrarMetodo(tipoRetorno, (ID8!=null?ID8.Text:null));
				method = (MethodSymbol)actualScope;
				
			DebugLocation(435, 2);
			Match(input,17,Follow._17_in_methodDeclaration443); 
			DebugLocation(435, 6);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:435:6: ( formalParameters )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, decisionCanBacktrack[13]);
			int LA13_0 = input.LA(1);

			if ((LA13_0==ID||LA13_0==38||LA13_0==40||LA13_0==44))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:435:6: formalParameters
				{
				DebugLocation(435, 6);
				PushFollow(Follow._formalParameters_in_methodDeclaration445);
				formalParameters();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(435, 24);
			Match(input,18,Follow._18_in_methodDeclaration448); 
			DebugLocation(436, 2);
			Match(input,58,Follow._58_in_methodDeclaration451); 
			DebugLocation(436, 6);
			method.firstQuadruple = quadruplesList.nextNumberOfQuadruple();
			DebugLocation(436, 72);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:436:72: ( varDecl )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, decisionCanBacktrack[14]);
				int LA14_0 = input.LA(1);

				if ((LA14_0==ID))
				{
					int LA14_1 = input.LA(2);

					if ((LA14_1==ID))
					{
						alt14 = 1;
					}


				}
				else if (((LA14_0>=37 && LA14_0<=38)||LA14_0==40||LA14_0==44))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:436:72: varDecl
					{
					DebugLocation(436, 72);
					PushFollow(Follow._varDecl_in_methodDeclaration455);
					varDecl();
					PopFollow();


					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }

			DebugLocation(436, 81);
			PushFollow(Follow._someStatements_in_methodDeclaration458);
			someStatements();
			PopFollow();

			DebugLocation(436, 96);
			Match(input,59,Follow._59_in_methodDeclaration460); 
			DebugLocation(438, 2);

				if(method.returnsVoid()) {
					quadruplesList.addRETURNVOID();
				}
				else {
					quadruplesList.addSHOULD_RETURN_SOMETHING_ERROR(method.fullyQualifiedName());
				}
				actualScope = ((MethodSymbol)actualScope).enclosingScope;
				

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("methodDeclaration", 14);
			LeaveRule("methodDeclaration", 14);
			LeaveRule_methodDeclaration();
	    }
	 	DebugLocation(447, 1);
		} finally { DebugExitRule(GrammarFileName, "methodDeclaration"); }
		return;

	}
	// $ANTLR end "methodDeclaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_formalParam() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_formalParam() {}

	// $ANTLR start "formalParam"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:449:1: formalParam : t= formalParamType ID ;
	[GrammarRule("formalParam")]
	private void formalParam()
	{
		EnterRule_formalParam();
		EnterRule("formalParam", 15);
		TraceIn("formalParam", 15);
	    IToken ID9 = default(IToken);
	    string t = default(string);

		try { DebugEnterRule(GrammarFileName, "formalParam");
		DebugLocation(449, 81);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:449:12: (t= formalParamType ID )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:449:14: t= formalParamType ID
			{
			DebugLocation(449, 16);
			PushFollow(Follow._formalParamType_in_formalParam480);
			t=formalParamType();
			PopFollow();

			DebugLocation(449, 34);
			ID9=(IToken)Match(input,ID,Follow._ID_in_formalParam482); 
			DebugLocation(449, 37);
			registerFormalParameter((ID9!=null?ID9.Text:null), t);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("formalParam", 15);
			LeaveRule("formalParam", 15);
			LeaveRule_formalParam();
	    }
	 	DebugLocation(449, 81);
		} finally { DebugExitRule(GrammarFileName, "formalParam"); }
		return;

	}
	// $ANTLR end "formalParam"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_formalParameters() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_formalParameters() {}

	// $ANTLR start "formalParameters"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:451:1: formalParameters : t= formalParam ( ',' formalParam )* ;
	[GrammarRule("formalParameters")]
	private void formalParameters()
	{
		EnterRule_formalParameters();
		EnterRule("formalParameters", 16);
		TraceIn("formalParameters", 16);
		try { DebugEnterRule(GrammarFileName, "formalParameters");
		DebugLocation(451, 38);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:452:4: (t= formalParam ( ',' formalParam )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:452:4: t= formalParam ( ',' formalParam )*
			{
			DebugLocation(452, 6);
			PushFollow(Follow._formalParam_in_formalParameters498);
			formalParam();
			PopFollow();

			DebugLocation(452, 20);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:452:20: ( ',' formalParam )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, decisionCanBacktrack[15]);
				int LA15_0 = input.LA(1);

				if ((LA15_0==21))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:452:21: ',' formalParam
					{
					DebugLocation(452, 21);
					Match(input,21,Follow._21_in_formalParameters501); 
					DebugLocation(452, 25);
					PushFollow(Follow._formalParam_in_formalParameters503);
					formalParam();
					PopFollow();


					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("formalParameters", 16);
			LeaveRule("formalParameters", 16);
			LeaveRule_formalParameters();
	    }
	 	DebugLocation(452, 38);
		} finally { DebugExitRule(GrammarFileName, "formalParameters"); }
		return;

	}
	// $ANTLR end "formalParameters"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_someStatements() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_someStatements() {}

	// $ANTLR start "someStatements"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:454:1: someStatements : ( statement )* ;
	[GrammarRule("someStatements")]
	private void someStatements()
	{
		EnterRule_someStatements();
		EnterRule("someStatements", 17);
		TraceIn("someStatements", 17);
		try { DebugEnterRule(GrammarFileName, "someStatements");
		DebugLocation(454, 13);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:455:2: ( ( statement )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:455:4: ( statement )*
			{
			DebugLocation(455, 4);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:455:4: ( statement )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, decisionCanBacktrack[16]);
				int LA16_0 = input.LA(1);

				if ((LA16_0==ID||LA16_0==26||LA16_0==43||(LA16_0>=48 && LA16_0<=49)||(LA16_0>=54 && LA16_0<=55)||LA16_0==57))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:455:4: statement
					{
					DebugLocation(455, 4);
					PushFollow(Follow._statement_in_someStatements515);
					statement();
					PopFollow();


					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("someStatements", 17);
			LeaveRule("someStatements", 17);
			LeaveRule_someStatements();
	    }
	 	DebugLocation(455, 13);
		} finally { DebugExitRule(GrammarFileName, "someStatements"); }
		return;

	}
	// $ANTLR end "someStatements"

	protected sealed partial class statement_scope
	{
		public bool inExpression;
	}
	protected virtual void statement_scopeInit( statement_scope scope ) {}
	protected virtual void statement_scopeAfter( statement_scope scope ) {}
	protected readonly ListStack<statement_scope> statement_stack = new ListStack<statement_scope>();


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_statement() {}

	// $ANTLR start "statement"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:457:1: statement : ( assignment | invoke ';' | if_inst | while_inst | return_inst | print | ';' ) ;
	[GrammarRule("statement")]
	private void statement()
	{
		EnterRule_statement();
		EnterRule("statement", 18);
		TraceIn("statement", 18);
	    statement_stack.Push(new statement_scope());statement_scopeInit(statement_stack.Peek());
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(457, 3);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:461:4: ( ( assignment | invoke ';' | if_inst | while_inst | return_inst | print | ';' ) )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:461:4: ( assignment | invoke ';' | if_inst | while_inst | return_inst | print | ';' )
			{
			DebugLocation(461, 4);
			statement_stack.Peek().inExpression =  false;
			DebugLocation(462, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:462:3: ( assignment | invoke ';' | if_inst | while_inst | return_inst | print | ';' )
			int alt17=7;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, decisionCanBacktrack[17]);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA17_1 = input.LA(2);

				if ((LA17_1==23))
				{
					int LA17_8 = input.LA(3);

					if ((LA17_8==ID))
					{
						int LA17_11 = input.LA(4);

						if ((LA17_11==29))
						{
							alt17 = 1;
						}
						else if ((LA17_11==17))
						{
							alt17 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 17, 11, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 17, 8, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA17_1==29||LA17_1==34))
				{
					alt17 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 17, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 55:
				{
				int LA17_2 = input.LA(2);

				if ((LA17_2==23))
				{
					int LA17_10 = input.LA(3);

					if ((LA17_10==ID))
					{
						int LA17_12 = input.LA(4);

						if ((LA17_12==29))
						{
							alt17 = 1;
						}
						else if ((LA17_12==17))
						{
							alt17 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 17, 12, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 17, 10, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 17, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 43:
				{
				alt17 = 3;
				}
				break;
			case 57:
				{
				alt17 = 4;
				}
				break;
			case 54:
				{
				alt17 = 5;
				}
				break;
			case 48:
			case 49:
				{
				alt17 = 6;
				}
				break;
			case 26:
				{
				alt17 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:463:4: assignment
				{
				DebugLocation(463, 4);
				PushFollow(Follow._assignment_in_statement539);
				assignment();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:464:5: invoke ';'
				{
				DebugLocation(464, 5);
				PushFollow(Follow._invoke_in_statement545);
				invoke();
				PopFollow();

				DebugLocation(464, 12);
				Match(input,26,Follow._26_in_statement547); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:465:5: if_inst
				{
				DebugLocation(465, 5);
				PushFollow(Follow._if_inst_in_statement553);
				if_inst();
				PopFollow();


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:466:5: while_inst
				{
				DebugLocation(466, 5);
				PushFollow(Follow._while_inst_in_statement559);
				while_inst();
				PopFollow();


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:467:5: return_inst
				{
				DebugLocation(467, 5);
				PushFollow(Follow._return_inst_in_statement565);
				return_inst();
				PopFollow();


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:468:5: print
				{
				DebugLocation(468, 5);
				PushFollow(Follow._print_in_statement571);
				print();
				PopFollow();


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:469:5: ';'
				{
				DebugLocation(469, 5);
				Match(input,26,Follow._26_in_statement577); 

				}
				break;

			}
			} finally { DebugExitSubRule(17); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("statement", 18);
			LeaveRule("statement", 18);
			LeaveRule_statement();
	        statement_scopeAfter(statement_stack.Peek());statement_stack.Pop();
	    }
	 	DebugLocation(470, 3);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return;

	}
	// $ANTLR end "statement"

	protected sealed partial class assignment_scope
	{
		public int caso;
		public VariableSymbol par1;
		public //obj
			VariableSymbol par2;
		public //field
			ClassSymbol leftType;
	}
	protected virtual void assignment_scopeInit( assignment_scope scope ) {}
	protected virtual void assignment_scopeAfter( assignment_scope scope ) {}
	protected readonly ListStack<assignment_scope> assignment_stack = new ListStack<assignment_scope>();


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_assignment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_assignment() {}

	// $ANTLR start "assignment"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:472:1: assignment : designator '=' ( expression | 'new' ID '(' ')' ) ';' ;
	[GrammarRule("assignment")]
	private void assignment()
	{
		EnterRule_assignment();
		EnterRule("assignment", 19);
		TraceIn("assignment", 19);
	    assignment_stack.Push(new assignment_scope());assignment_scopeInit(assignment_stack.Peek());
	    IToken ID10 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(472, 1);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:479:2: ( designator '=' ( expression | 'new' ID '(' ')' ) ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:479:4: designator '=' ( expression | 'new' ID '(' ')' ) ';'
			{
			DebugLocation(479, 4);
			PushFollow(Follow._designator_in_assignment597);
			designator();
			PopFollow();

			DebugLocation(479, 15);
			Match(input,29,Follow._29_in_assignment599); 
			DebugLocation(480, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:480:3: ( expression | 'new' ID '(' ')' )
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, decisionCanBacktrack[18]);
			int LA18_0 = input.LA(1);

			if ((LA18_0==CHAR||LA18_0==DOUBLE||(LA18_0>=ID && LA18_0<=INT)||LA18_0==17||(LA18_0>=51 && LA18_0<=53)||LA18_0==55))
			{
				alt18 = 1;
			}
			else if ((LA18_0==46))
			{
				alt18 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:481:3: expression
				{
				DebugLocation(481, 3);
				PushFollow(Follow._expression_in_assignment608);
				expression();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:482:5: 'new' ID '(' ')'
				{
				DebugLocation(482, 5);
				Match(input,46,Follow._46_in_assignment614); 
				DebugLocation(482, 11);
				ID10=(IToken)Match(input,ID,Follow._ID_in_assignment616); 
				DebugLocation(482, 14);
				Match(input,17,Follow._17_in_assignment618); 
				DebugLocation(482, 18);
				Match(input,18,Follow._18_in_assignment620); 
				DebugLocation(483, 4);

							ClassSymbol tipo = directory.findType((ID10!=null?ID10.Text:null));
							VariableSymbol temp = getNewTemporalVarOfType(tipo.name);
							pOperandos.Push(temp);
							quadruplesList.addOBJECT(temp.address.ToString(), tipo.name);
							
							

				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(491, 3);

					VariableSymbol right = pOperandos.Pop();
					if(!directory.validAssignment(assignment_stack.Peek().leftType, right.type)) {
						MethodSymbol m = (MethodSymbol)actualScope;
						manageException(new Exception("En " + m.fullyQualifiedName() + ": No se puede asignar " + right.name + " a " + assignment_stack.Peek().par2.name + " porque el tipo " + 
									right.type.name + " no es asignable al tipo " + assignment_stack.Peek().leftType.name));
					}
					if(assignment_stack.Peek().caso == 0) {	//ID = right
						quadruplesList.addASSIGNMENT(right.address.ToString(), assignment_stack.Peek().par2.address.ToString());
					}
					else if(assignment_stack.Peek().caso == 1) {	//ID.ID = right
						quadruplesList.addPUTFIELD(right.address.ToString(), assignment_stack.Peek().par1.address.ToString(), assignment_stack.Peek().par2.address.ToString());
					}
					else if(assignment_stack.Peek().caso == 2) {	//this.ID = bla
						MethodSymbol method = (MethodSymbol)actualScope;
						quadruplesList.addPUTFIELD(right.address.ToString(), method.getThisParameterAddress(), assignment_stack.Peek().par2.address.ToString());	
					}
					else if(assignment_stack.Peek().caso == 3) {
						quadruplesList.addPUTARRAYELEM(assignment_stack.Peek().par2.address.ToString(), right.address.ToString());
					}
					
			DebugLocation(512, 3);
			Match(input,26,Follow._26_in_assignment638); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("assignment", 19);
			LeaveRule("assignment", 19);
			LeaveRule_assignment();
	        assignment_scopeAfter(assignment_stack.Peek());assignment_stack.Pop();
	    }
	 	DebugLocation(513, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return;

	}
	// $ANTLR end "assignment"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_designator() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_designator() {}

	// $ANTLR start "designator"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:515:1: designator : (v= ID ( arrayAccess )? |obj= ID '.' var= ID | 'this' '.' var= ID );
	[GrammarRule("designator")]
	private void designator()
	{
		EnterRule_designator();
		EnterRule("designator", 20);
		TraceIn("designator", 20);
	    IToken v = default(IToken);
	    IToken obj = default(IToken);
	    IToken var = default(IToken);

		try { DebugEnterRule(GrammarFileName, "designator");
		DebugLocation(515, 1);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:516:2: (v= ID ( arrayAccess )? |obj= ID '.' var= ID | 'this' '.' var= ID )
			int alt20=3;
			try { DebugEnterDecision(20, decisionCanBacktrack[20]);
			int LA20_0 = input.LA(1);

			if ((LA20_0==ID))
			{
				int LA20_1 = input.LA(2);

				if ((LA20_1==23))
				{
					alt20 = 2;
				}
				else if ((LA20_1==29||LA20_1==34))
				{
					alt20 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 20, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA20_0==55))
			{
				alt20 = 3;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:517:3: v= ID ( arrayAccess )?
				{
				DebugLocation(517, 5);
				v=(IToken)Match(input,ID,Follow._ID_in_designator657); 
				DebugLocation(518, 4);

							assignment_stack.Peek().caso =  0;
							verifyVariableCanBeAccessed((v!=null?v.Text:null)); 
							assignment_stack.Peek().par2 =  getVariable((v!=null?v.Text:null));
							
							assignment_stack.Peek().leftType =  assignment_stack.Peek().par2.type;
							
				DebugLocation(525, 3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:525:3: ( arrayAccess )?
				int alt19=2;
				try { DebugEnterSubRule(19);
				try { DebugEnterDecision(19, decisionCanBacktrack[19]);
				int LA19_0 = input.LA(1);

				if ((LA19_0==34))
				{
					alt19 = 1;
				}
				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:526:3: arrayAccess
					{
					DebugLocation(526, 3);
					pOperandos.Push(getVariable((v!=null?v.Text:null)));
					DebugLocation(527, 3);
					PushFollow(Follow._arrayAccess_in_designator677);
					arrayAccess();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(19); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:530:5: obj= ID '.' var= ID
				{
				DebugLocation(530, 9);
				obj=(IToken)Match(input,ID,Follow._ID_in_designator697); 
				DebugLocation(530, 15);
				Match(input,23,Follow._23_in_designator700); 
				DebugLocation(530, 23);
				var=(IToken)Match(input,ID,Follow._ID_in_designator706); 
				DebugLocation(531, 4);

							assignment_stack.Peek().caso =  1;
							verifyObjectAndInstVariableDefined((obj!=null?obj.Text:null), (var!=null?var.Text:null)); 
							assignment_stack.Peek().par1 =  getVariable((obj!=null?obj.Text:null));
							assignment_stack.Peek().par2 =  getField((obj!=null?obj.Text:null), (var!=null?var.Text:null));
							
							assignment_stack.Peek().leftType =  assignment_stack.Peek().par2.type;
							

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:539:5: 'this' '.' var= ID
				{
				DebugLocation(539, 5);
				Match(input,55,Follow._55_in_designator719); 
				DebugLocation(539, 12);
				Match(input,23,Follow._23_in_designator721); 
				DebugLocation(539, 20);
				var=(IToken)Match(input,ID,Follow._ID_in_designator727); 
				DebugLocation(540, 4);

							assignment_stack.Peek().caso =  2;
							verifyInstanceVariableDefinedInThis((var!=null?var.Text:null));
							assignment_stack.Peek().par2 =  getInstanceVariable((var!=null?var.Text:null));
							
							assignment_stack.Peek().leftType =  assignment_stack.Peek().par2.type;
							

				}
				break;

			}
		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("designator", 20);
			LeaveRule("designator", 20);
			LeaveRule_designator();
	    }
	 	DebugLocation(566, 1);
		} finally { DebugExitRule(GrammarFileName, "designator"); }
		return;

	}
	// $ANTLR end "designator"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_arrayAccess() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_arrayAccess() {}

	// $ANTLR start "arrayAccess"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:568:1: arrayAccess : ( '[' expression ']' ) ;
	[GrammarRule("arrayAccess")]
	private void arrayAccess()
	{
		EnterRule_arrayAccess();
		EnterRule("arrayAccess", 21);
		TraceIn("arrayAccess", 21);
		try { DebugEnterRule(GrammarFileName, "arrayAccess");
		DebugLocation(568, 3);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:569:2: ( ( '[' expression ']' ) )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:569:4: ( '[' expression ']' )
			{
			DebugLocation(569, 4);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:569:4: ( '[' expression ']' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:570:3: '[' expression ']'
			{
			DebugLocation(570, 3);
			Match(input,34,Follow._34_in_arrayAccess759); 
			DebugLocation(571, 3);

					bool inExpression = statement_stack.Peek().inExpression; //save the value here because it will be modified in the expression for the index
					VariableSymbol variable = pOperandos.Pop();
					MethodSymbol m = (MethodSymbol)actualScope;
					if(!(variable is ArrayVariableSymbol)) {
						string msg = "En " + m.fullyQualifiedName() + ": La variable " + variable.name
										+ " no es un array y por tanto no tiene definido el operador [] .";
						manageException(new Exception(msg));
					}
					ArrayVariableSymbol array = (ArrayVariableSymbol)variable;
					pDimensionadas.Push(((ArrayVariableSymbol)array));
					pOperadores.Push("[");
					
			DebugLocation(585, 3);
			PushFollow(Follow._expression_in_arrayAccess770);
			expression();
			PopFollow();

			DebugLocation(587, 3);

					VariableSymbol index = pOperandos.Peek();
					if(!index.type.name.Equals(SymbolTable.integerName)) {
						manageException(new Exception("En " + m.fullyQualifiedName() + ": El subindice del array " + array.name
										+ " debe ser de tipo int. Se encontro tipo " + index.type.name));
					}
					//Here we are just checking for the dimension 0 because we are handling only vectors
					quadruplesList.addVERIFYARRAYACCESS(index.address.ToString(), array.getDimension(0).ToString());
					
			DebugLocation(597, 3);
			Match(input,35,Follow._35_in_arrayAccess785); 
			DebugLocation(597, 7);
			pOperadores.Pop();
			DebugLocation(598, 3);

					index = pOperandos.Pop();
					VariableSymbol arr = pDimensionadas.Pop();
					
					//get a constant with the base address
					VariableSymbol baseConst = getNewTemporalVarOfType(SymbolTable.integerName);
					quadruplesList.addICONST(arr.address.ToString(), baseConst.address.ToString());
					
					//get the address to deref
					VariableSymbol toDeref = getNewTemporalVarOfType(SymbolTable.integerName);
					quadruplesList.addEXPRESSION_OPER("+", index.address.ToString(), baseConst.address.ToString(), toDeref.address.ToString());
					
					
					if(inExpression) {
						//getting the value of an array element
						VariableSymbol dereferencedTemp = getNewTemporalVarOfType(array.parameterizedType.name);
						quadruplesList.addGETARRAYELEM(toDeref.address.ToString(), dereferencedTemp.address.ToString());
						pOperandos.Push(dereferencedTemp);
					}
					else {
						//this is an assigment of an array element
						assignment_stack.Peek().caso =  3;
						assignment_stack.Peek().par2 =  toDeref;
						assignment_stack.Peek().leftType =  array.parameterizedType;
						//Console.WriteLine("bla = " + assignment_stack.Peek().leftType.name);
					}
					

			}


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("arrayAccess", 21);
			LeaveRule("arrayAccess", 21);
			LeaveRule_arrayAccess();
	    }
	 	DebugLocation(625, 3);
		} finally { DebugExitRule(GrammarFileName, "arrayAccess"); }
		return;

	}
	// $ANTLR end "arrayAccess"

	protected sealed partial class invoke_scope
	{
		public MethodSymbol invokedMethod;
		public VariableSymbol obj;
	}
	protected virtual void invoke_scopeInit( invoke_scope scope ) {}
	protected virtual void invoke_scopeAfter( invoke_scope scope ) {}
	protected readonly ListStack<invoke_scope> invoke_stack = new ListStack<invoke_scope>();


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_invoke() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_invoke() {}

	// $ANTLR start "invoke"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:627:1: invoke : (objId= ID | 'this' ) '.' method= ID actualParameters ;
	[GrammarRule("invoke")]
	private void invoke()
	{
		EnterRule_invoke();
		EnterRule("invoke", 22);
		TraceIn("invoke", 22);
	    invoke_stack.Push(new invoke_scope());invoke_scopeInit(invoke_stack.Peek());
	    IToken objId = default(IToken);
	    IToken method = default(IToken);

		try { DebugEnterRule(GrammarFileName, "invoke");
		DebugLocation(627, 2);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:632:3: ( (objId= ID | 'this' ) '.' method= ID actualParameters )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:633:3: (objId= ID | 'this' ) '.' method= ID actualParameters
			{
			DebugLocation(633, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:633:3: (objId= ID | 'this' )
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, decisionCanBacktrack[21]);
			int LA21_0 = input.LA(1);

			if ((LA21_0==ID))
			{
				alt21 = 1;
			}
			else if ((LA21_0==55))
			{
				alt21 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:633:4: objId= ID
				{
				DebugLocation(633, 10);
				objId=(IToken)Match(input,ID,Follow._ID_in_invoke815); 
				DebugLocation(633, 15);
				invoke_stack.Peek().obj =  getVariable((objId!=null?objId.Text:null));

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:633:59: 'this'
				{
				DebugLocation(633, 59);
				Match(input,55,Follow._55_in_invoke820); 
				DebugLocation(633, 66);
				invoke_stack.Peek().obj =  ((MethodSymbol)actualScope).getThisParameter();

				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(634, 3);
			Match(input,23,Follow._23_in_invoke828); 
			DebugLocation(634, 14);
			method=(IToken)Match(input,ID,Follow._ID_in_invoke834); 
			DebugLocation(634, 19);
			invoke_stack.Peek().invokedMethod =  getMethod(invoke_stack.Peek().obj.name, (method!=null?method.Text:null));
			DebugLocation(635, 3);

					
					if(statement_stack.Peek().inExpression && invoke_stack.Peek().invokedMethod.returnsVoid()) {
						MethodSymbol m = (MethodSymbol)actualScope;
						string msg = "En " + m.fullyQualifiedName() + ": Llamada a metodo void " + invoke_stack.Peek().invokedMethod.fullyQualifiedName() + ". No es valido llamar a un metodo void"
												+ " como parte de una expresion.";
						manageException(new Exception(msg));
					}
					
					
			DebugLocation(645, 3);
			PushFollow(Follow._actualParameters_in_invoke844);
			actualParameters();
			PopFollow();


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("invoke", 22);
			LeaveRule("invoke", 22);
			LeaveRule_invoke();
	        invoke_scopeAfter(invoke_stack.Peek());invoke_stack.Pop();
	    }
	 	DebugLocation(648, 2);
		} finally { DebugExitRule(GrammarFileName, "invoke"); }
		return;

	}
	// $ANTLR end "invoke"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_actualParameters() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_actualParameters() {}

	// $ANTLR start "actualParameters"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:650:1: actualParameters : '(' ( expression ( ',' expression )* )? ')' ;
	[GrammarRule("actualParameters")]
	private void actualParameters()
	{
		EnterRule_actualParameters();
		EnterRule("actualParameters", 23);
		TraceIn("actualParameters", 23);
		try { DebugEnterRule(GrammarFileName, "actualParameters");
		DebugLocation(650, 2);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:651:2: ( '(' ( expression ( ',' expression )* )? ')' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:652:3: '(' ( expression ( ',' expression )* )? ')'
			{
			DebugLocation(652, 3);
			pOperadores.Push("(");
			DebugLocation(653, 3);
			Match(input,17,Follow._17_in_actualParameters871); 
			DebugLocation(654, 3);

					VariableSymbol formalParam;
					VariableSymbol actualParam;
					IEnumerator<VariableSymbol> paramIterator = invoke_stack.Peek().invokedMethod.getParamIterator();
					paramIterator.MoveNext();
					LinkedList<VariableSymbol> argsList = new LinkedList<VariableSymbol>();
					argsList.AddLast(invoke_stack.Peek().obj);
					
			DebugLocation(663, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:663:3: ( expression ( ',' expression )* )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, decisionCanBacktrack[23]);
			int LA23_0 = input.LA(1);

			if ((LA23_0==CHAR||LA23_0==DOUBLE||(LA23_0>=ID && LA23_0<=INT)||LA23_0==17||(LA23_0>=51 && LA23_0<=53)||LA23_0==55))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:663:4: expression ( ',' expression )*
				{
				DebugLocation(663, 4);
				PushFollow(Follow._expression_in_actualParameters881);
				expression();
				PopFollow();

				DebugLocation(664, 3);

						if(!paramIterator.MoveNext()) {
							MethodSymbol m = (MethodSymbol)actualScope;
							string msg = "En " + m.fullyQualifiedName() + ": Parametros formales de mas en llamada a " + invoke_stack.Peek().invokedMethod.fullyQualifiedName();
							manageException(new Exception(msg));
						}
						formalParam = paramIterator.Current;
						actualParam = pOperandos.Pop();
						if(!directory.validAssignment(formalParam.type, actualParam.type)) {
							MethodSymbol m = (MethodSymbol)actualScope;
							string msg = "En " + m.fullyQualifiedName() + ": El tipo del argumento " + actualParam.name + " no es asignable al tipo del parametro formal " 
									+ formalParam.name + " en la llamada a " + invoke_stack.Peek().invokedMethod.fullyQualifiedName();
							manageException(new Exception(msg));
						}
						argsList.AddLast(actualParam);
						
				DebugLocation(681, 3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:681:3: ( ',' expression )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, decisionCanBacktrack[22]);
					int LA22_0 = input.LA(1);

					if ((LA22_0==21))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:681:4: ',' expression
						{
						DebugLocation(681, 4);
						Match(input,21,Follow._21_in_actualParameters894); 
						DebugLocation(681, 8);
						PushFollow(Follow._expression_in_actualParameters896);
						expression();
						PopFollow();

						DebugLocation(682, 3);

								if(!paramIterator.MoveNext()) {
									MethodSymbol m = (MethodSymbol)actualScope;
									string msg = "En " + m.fullyQualifiedName() + ": Parametros formales de mas en llamada a " + invoke_stack.Peek().invokedMethod.fullyQualifiedName();
									manageException(new Exception(msg));
								}
								formalParam = paramIterator.Current;
								actualParam = pOperandos.Pop();
								if(!directory.validAssignment(formalParam.type, actualParam.type)) {
									MethodSymbol m = (MethodSymbol)actualScope;
									string msg = "En " + m.fullyQualifiedName() + ": El tipo del argumento " + actualParam.name + " no es asignable al tipo del parametro formal " 
											+ formalParam.name + " en la llamada a " + invoke_stack.Peek().invokedMethod.fullyQualifiedName();
									manageException(new Exception(msg));
								}
								argsList.AddLast(actualParam);
								

						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }


				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(698, 8);
			Match(input,18,Follow._18_in_actualParameters910); 
			DebugLocation(700, 3);
			pOperadores.Pop();
			DebugLocation(701, 3);

					if(paramIterator.MoveNext()) { 
						MethodSymbol m = (MethodSymbol)actualScope;
						string msg = "En " + m.fullyQualifiedName() + ": Faltan argumentos en la llamada a " + invoke_stack.Peek().invokedMethod.fullyQualifiedName();
						manageException(new Exception(msg));
					}
					
					quadruplesList.addERA(invoke_stack.Peek().invokedMethod.fullyQualifiedName());
					int paramCount = 0;
					foreach (VariableSymbol arg in argsList) {
						quadruplesList.addPARAM(arg.address.ToString(), paramCount.ToString());
						paramCount++;
					}
					
					if(invoke_stack.Peek().invokedMethod.returnsVoid()) {
						quadruplesList.addGOSUBVOID(invoke_stack.Peek().invokedMethod.fullyQualifiedName());
					}
					else {
						VariableSymbol varToStoreResult = ((MethodSymbol)actualScope).getNewTemporal(invoke_stack.Peek().invokedMethod.returnType);
						quadruplesList.addGOSUB(invoke_stack.Peek().invokedMethod.fullyQualifiedName(), varToStoreResult.address.ToString());
						pOperandos.Push(varToStoreResult);
					}
					

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("actualParameters", 23);
			LeaveRule("actualParameters", 23);
			LeaveRule_actualParameters();
	    }
	 	DebugLocation(724, 2);
		} finally { DebugExitRule(GrammarFileName, "actualParameters"); }
		return;

	}
	// $ANTLR end "actualParameters"

	protected sealed partial class if_inst_scope
	{
		public bool elsePresent;
	}
	protected virtual void if_inst_scopeInit( if_inst_scope scope ) {}
	protected virtual void if_inst_scopeAfter( if_inst_scope scope ) {}
	protected readonly ListStack<if_inst_scope> if_inst_stack = new ListStack<if_inst_scope>();


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_if_inst() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_if_inst() {}

	// $ANTLR start "if_inst"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:726:1: if_inst : 'if' '(' expression ')' '{' someStatements '}' ( 'else' '{' someStatements '}' )? ;
	[GrammarRule("if_inst")]
	private void if_inst()
	{
		EnterRule_if_inst();
		EnterRule("if_inst", 24);
		TraceIn("if_inst", 24);
	    if_inst_stack.Push(new if_inst_scope());if_inst_scopeInit(if_inst_stack.Peek());
		try { DebugEnterRule(GrammarFileName, "if_inst");
		DebugLocation(726, 2);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:730:3: ( 'if' '(' expression ')' '{' someStatements '}' ( 'else' '{' someStatements '}' )? )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:730:3: 'if' '(' expression ')' '{' someStatements '}' ( 'else' '{' someStatements '}' )?
			{
			DebugLocation(730, 3);
			Match(input,43,Follow._43_in_if_inst937); 
			DebugLocation(730, 8);
			Match(input,17,Follow._17_in_if_inst939); 
			DebugLocation(730, 12);
			PushFollow(Follow._expression_in_if_inst941);
			expression();
			PopFollow();

			DebugLocation(730, 23);
			Match(input,18,Follow._18_in_if_inst943); 
			DebugLocation(731, 3);

					if_inst_stack.Peek().elsePresent =  false;
					VariableSymbol condition = pOperandos.Pop();
					if(!condition.type.name.Equals(SymbolTable.boolName)) {
						string msg = "En metodo " + ((MethodSymbol)actualScope).fullyQualifiedName() +  " condicion en if debe ser un valor bool.";
						manageException(new Exception(msg));
					}
					
					quadruplesList.addGOTOFALSE(condition.address.ToString(), "-");
					pSaltos.Push(quadruplesList.getLastQuadruple());
					
			DebugLocation(742, 3);
			Match(input,58,Follow._58_in_if_inst952); 
			DebugLocation(742, 8);
			PushFollow(Follow._someStatements_in_if_inst955);
			someStatements();
			PopFollow();

			DebugLocation(742, 23);
			Match(input,59,Follow._59_in_if_inst957); 
			DebugLocation(744, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:744:3: ( 'else' '{' someStatements '}' )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, decisionCanBacktrack[24]);
			int LA24_0 = input.LA(1);

			if ((LA24_0==41))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:745:3: 'else' '{' someStatements '}'
				{
				DebugLocation(745, 3);
				if_inst_stack.Peek().elsePresent =  true;
				DebugLocation(746, 3);
				Match(input,41,Follow._41_in_if_inst973); 
				DebugLocation(747, 3);

						quadruplesList.addGOTO("-");
						Quadruple end = quadruplesList.getLastQuadruple();
						Quadruple falso = pSaltos.Pop();
						falso.operando2 = quadruplesList.nextNumberOfQuadruple().ToString();
						pSaltos.Push(end);
						
				DebugLocation(754, 3);
				Match(input,58,Follow._58_in_if_inst982); 
				DebugLocation(754, 7);
				PushFollow(Follow._someStatements_in_if_inst984);
				someStatements();
				PopFollow();

				DebugLocation(754, 22);
				Match(input,59,Follow._59_in_if_inst986); 
				DebugLocation(755, 3);

						Quadruple gotoEnd = pSaltos.Pop();
						gotoEnd.operando1 = quadruplesList.nextNumberOfQuadruple().ToString();
						

				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(761, 3);

					if(!if_inst_stack.Peek().elsePresent) {
						Quadruple end = pSaltos.Pop();
						end.operando2 = quadruplesList.nextNumberOfQuadruple().ToString();
					}
					

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("if_inst", 24);
			LeaveRule("if_inst", 24);
			LeaveRule_if_inst();
	        if_inst_scopeAfter(if_inst_stack.Peek());if_inst_stack.Pop();
	    }
	 	DebugLocation(767, 2);
		} finally { DebugExitRule(GrammarFileName, "if_inst"); }
		return;

	}
	// $ANTLR end "if_inst"

	protected sealed partial class while_inst_scope
	{
		public int start;
	}
	protected virtual void while_inst_scopeInit( while_inst_scope scope ) {}
	protected virtual void while_inst_scopeAfter( while_inst_scope scope ) {}
	protected readonly ListStack<while_inst_scope> while_inst_stack = new ListStack<while_inst_scope>();


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_while_inst() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_while_inst() {}

	// $ANTLR start "while_inst"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:769:1: while_inst : 'while' '(' expression ')' '{' someStatements '}' ;
	[GrammarRule("while_inst")]
	private void while_inst()
	{
		EnterRule_while_inst();
		EnterRule("while_inst", 25);
		TraceIn("while_inst", 25);
	    while_inst_stack.Push(new while_inst_scope());while_inst_scopeInit(while_inst_stack.Peek());
		try { DebugEnterRule(GrammarFileName, "while_inst");
		DebugLocation(769, 3);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:773:5: ( 'while' '(' expression ')' '{' someStatements '}' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:773:5: 'while' '(' expression ')' '{' someStatements '}'
			{
			DebugLocation(773, 5);
			while_inst_stack.Peek().start =  quadruplesList.nextNumberOfQuadruple();
			DebugLocation(774, 4);
			Match(input,57,Follow._57_in_while_inst1024); 
			DebugLocation(774, 12);
			Match(input,17,Follow._17_in_while_inst1026); 
			DebugLocation(774, 16);
			PushFollow(Follow._expression_in_while_inst1028);
			expression();
			PopFollow();

			DebugLocation(774, 27);
			Match(input,18,Follow._18_in_while_inst1030); 
			DebugLocation(775, 4);

						VariableSymbol condition = pOperandos.Pop();
						if(!condition.type.name.Equals(SymbolTable.boolName)) {
							string msg = "En metodo " + ((MethodSymbol)actualScope).fullyQualifiedName() +  " condicion en while debe ser un valor bool.";
							manageException(new Exception(msg));
						}
						quadruplesList.addGOTOFALSE(condition.address.ToString(), "-");
						pSaltos.Push(quadruplesList.getLastQuadruple());
						
			DebugLocation(784, 4);
			Match(input,58,Follow._58_in_while_inst1041); 
			DebugLocation(784, 8);
			PushFollow(Follow._someStatements_in_while_inst1043);
			someStatements();
			PopFollow();

			DebugLocation(784, 23);
			Match(input,59,Follow._59_in_while_inst1045); 
			DebugLocation(785, 4);

						quadruplesList.addGOTO(while_inst_stack.Peek().start.ToString());
						Quadruple start = pSaltos.Pop();
						start.operando2 = quadruplesList.nextNumberOfQuadruple().ToString();
						

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("while_inst", 25);
			LeaveRule("while_inst", 25);
			LeaveRule_while_inst();
	        while_inst_scopeAfter(while_inst_stack.Peek());while_inst_stack.Pop();
	    }
	 	DebugLocation(790, 3);
		} finally { DebugExitRule(GrammarFileName, "while_inst"); }
		return;

	}
	// $ANTLR end "while_inst"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_return_inst() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_return_inst() {}

	// $ANTLR start "return_inst"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:792:1: return_inst : 'return' ( expression )? ';' ;
	[GrammarRule("return_inst")]
	private void return_inst()
	{
		EnterRule_return_inst();
		EnterRule("return_inst", 26);
		TraceIn("return_inst", 26);

	    	bool returnsSomething = false;
	    	VariableSymbol varToReturn;
	    	MethodSymbol method;

		try { DebugEnterRule(GrammarFileName, "return_inst");
		DebugLocation(792, 2);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:798:3: ( 'return' ( expression )? ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:799:3: 'return' ( expression )? ';'
			{
			DebugLocation(799, 3);
			method = (MethodSymbol)actualScope;
			DebugLocation(800, 3);
			Match(input,54,Follow._54_in_return_inst1073); 
			DebugLocation(802, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:802:3: ( expression )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, decisionCanBacktrack[25]);
			int LA25_0 = input.LA(1);

			if ((LA25_0==CHAR||LA25_0==DOUBLE||(LA25_0>=ID && LA25_0<=INT)||LA25_0==17||(LA25_0>=51 && LA25_0<=53)||LA25_0==55))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:804:3: expression
				{
				DebugLocation(804, 3);

						returnsSomething = true;
						if(method.returnsVoid()) {
							string msg = "Error en return: No se permite regresar un valor en el metodo void " + method.fullyQualifiedName();
							manageException(new Exception(msg));
						}
						
				DebugLocation(811, 3);
				PushFollow(Follow._expression_in_return_inst1092);
				expression();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(815, 3);

					if(!method.returnsVoid() && !returnsSomething) {
						string msg = "Error en return: " + method.fullyQualifiedName() + " debe regresar un valor tipo " + method.returnType.name;
						manageException(new Exception(msg));
					}
					if(method.returnsVoid()) {
						quadruplesList.addRETURNVOID();
					}
					else {
						varToReturn = pOperandos.Pop();
						if(!directory.validAssignment(method.returnType, varToReturn.type)) {
							string msg = "Error en return: Tipo " + varToReturn.type.name + " no se puede regresar como tipo " + method.returnType.name
									+ " en " + method.fullyQualifiedName();
							manageException(new Exception(msg));
						}
						quadruplesList.addRETURN(varToReturn.address.ToString());
					}
					
					
			DebugLocation(835, 3);
			Match(input,26,Follow._26_in_return_inst1114); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("return_inst", 26);
			LeaveRule("return_inst", 26);
			LeaveRule_return_inst();
	    }
	 	DebugLocation(836, 2);
		} finally { DebugExitRule(GrammarFileName, "return_inst"); }
		return;

	}
	// $ANTLR end "return_inst"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_read() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_read() {}

	// $ANTLR start "read"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:838:1: read : ( 'readint' | 'readchar' | 'readdouble' ) '(' ')' ;
	[GrammarRule("read")]
	private void read()
	{
		EnterRule_read();
		EnterRule("read", 27);
		TraceIn("read", 27);
		try { DebugEnterRule(GrammarFileName, "read");
		DebugLocation(838, 2);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:838:6: ( ( 'readint' | 'readchar' | 'readdouble' ) '(' ')' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:839:3: ( 'readint' | 'readchar' | 'readdouble' ) '(' ')'
			{
			DebugLocation(839, 3);

					VariableSymbol temp = null;
					
			DebugLocation(842, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:842:3: ( 'readint' | 'readchar' | 'readdouble' )
			int alt26=3;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, decisionCanBacktrack[26]);
			switch (input.LA(1))
			{
			case 53:
				{
				alt26 = 1;
				}
				break;
			case 51:
				{
				alt26 = 2;
				}
				break;
			case 52:
				{
				alt26 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:843:3: 'readint'
				{
				DebugLocation(843, 3);
				Match(input,53,Follow._53_in_read1136); 
				DebugLocation(844, 3);

						temp = getNewTemporalVarOfType(SymbolTable.integerName);
						quadruplesList.addREADINT(temp.address.ToString());
						

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:848:4: 'readchar'
				{
				DebugLocation(848, 4);
				Match(input,51,Follow._51_in_read1145); 
				DebugLocation(849, 3);

						temp = getNewTemporalVarOfType(SymbolTable.charName);
						quadruplesList.addREADCHAR(temp.address.ToString());
						

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:853:4: 'readdouble'
				{
				DebugLocation(853, 4);
				Match(input,52,Follow._52_in_read1154); 
				DebugLocation(854, 3);

						temp = getNewTemporalVarOfType(SymbolTable.doubleName);
						quadruplesList.addREADDOUBLE(temp.address.ToString());
						

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(860, 3);
			Match(input,17,Follow._17_in_read1170); 
			DebugLocation(860, 7);
			Match(input,18,Follow._18_in_read1172); 
			DebugLocation(860, 11);
			pOperandos.Push(temp);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("read", 27);
			LeaveRule("read", 27);
			LeaveRule_read();
	    }
	 	DebugLocation(861, 2);
		} finally { DebugExitRule(GrammarFileName, "read"); }
		return;

	}
	// $ANTLR end "read"

	protected sealed partial class print_scope
	{
		public bool printline;
	}
	protected virtual void print_scopeInit( print_scope scope ) {}
	protected virtual void print_scopeAfter( print_scope scope ) {}
	protected readonly ListStack<print_scope> print_stack = new ListStack<print_scope>();


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_print() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_print() {}

	// $ANTLR start "print"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:863:1: print : ( 'printline' | 'print' ) '(' ( expression ( ',' expression )* )? ')' ';' ;
	[GrammarRule("print")]
	private void print()
	{
		EnterRule_print();
		EnterRule("print", 28);
		TraceIn("print", 28);
	    print_stack.Push(new print_scope());print_scopeInit(print_stack.Peek());
		try { DebugEnterRule(GrammarFileName, "print");
		DebugLocation(863, 2);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:867:2: ( ( 'printline' | 'print' ) '(' ( expression ( ',' expression )* )? ')' ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:867:4: ( 'printline' | 'print' ) '(' ( expression ( ',' expression )* )? ')' ';'
			{
			DebugLocation(867, 4);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:867:4: ( 'printline' | 'print' )
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, decisionCanBacktrack[27]);
			int LA27_0 = input.LA(1);

			if ((LA27_0==49))
			{
				alt27 = 1;
			}
			else if ((LA27_0==48))
			{
				alt27 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:867:5: 'printline'
				{
				DebugLocation(867, 5);
				Match(input,49,Follow._49_in_print1193); 
				DebugLocation(867, 16);
				print_stack.Peek().printline =  true;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:867:46: 'print'
				{
				DebugLocation(867, 46);
				Match(input,48,Follow._48_in_print1198); 
				DebugLocation(867, 54);
				print_stack.Peek().printline =  false;

				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(867, 84);
			Match(input,17,Follow._17_in_print1203); 
			DebugLocation(868, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:868:3: ( expression ( ',' expression )* )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, decisionCanBacktrack[29]);
			int LA29_0 = input.LA(1);

			if ((LA29_0==CHAR||LA29_0==DOUBLE||(LA29_0>=ID && LA29_0<=INT)||LA29_0==17||(LA29_0>=51 && LA29_0<=53)||LA29_0==55))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:869:3: expression ( ',' expression )*
				{
				DebugLocation(869, 3);
				PushFollow(Follow._expression_in_print1212);
				expression();
				PopFollow();

				DebugLocation(870, 3);

						VariableSymbol varToPrint = pOperandos.Pop();
						MethodSymbol method = (MethodSymbol)actualScope;
						if(!SymbolTable.isPrimitiveType(varToPrint.type.name)) {
							string msg = "Error en " + method.fullyQualifiedName() + " en print(..). Se encontro tipo " + varToPrint.type.name + ", pero print(..) "
									+ "solo puede imprimir primitivos. ";
							manageException(new Exception(msg));
						}
						quadruplesList.addPRINT(varToPrint.address.ToString());
						
				DebugLocation(880, 3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:880:3: ( ',' expression )*
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=2;
					try { DebugEnterDecision(28, decisionCanBacktrack[28]);
					int LA28_0 = input.LA(1);

					if ((LA28_0==21))
					{
						alt28 = 1;
					}


					} finally { DebugExitDecision(28); }
					switch ( alt28 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:880:4: ',' expression
						{
						DebugLocation(880, 4);
						Match(input,21,Follow._21_in_print1222); 
						DebugLocation(880, 8);
						PushFollow(Follow._expression_in_print1224);
						expression();
						PopFollow();

						DebugLocation(881, 3);

								varToPrint = pOperandos.Pop();
								method = (MethodSymbol)actualScope;
								if(!SymbolTable.isPrimitiveType(varToPrint.type.name)) {
									string msg = "Error en " + method.fullyQualifiedName() + " en print(..). Se encontro tipo " + varToPrint.type.name + ", pero print(..) "
											+ "solo puede imprimir primitivos. ";
									manageException(new Exception(msg));
								}
								quadruplesList.addPRINT(varToPrint.address.ToString());
								

						}
						break;

					default:
						goto loop28;
					}
				}

				loop28:
					;

				} finally { DebugExitSubRule(28); }


				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(894, 3);
			Match(input,18,Follow._18_in_print1245); 
			DebugLocation(894, 7);
			Match(input,26,Follow._26_in_print1247); 
			DebugLocation(895, 3);

					if(print_stack.Peek().printline) {
						quadruplesList.addPRINTLINE();
					}
					

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("print", 28);
			LeaveRule("print", 28);
			LeaveRule_print();
	        print_scopeAfter(print_stack.Peek());print_stack.Pop();
	    }
	 	DebugLocation(900, 2);
		} finally { DebugExitRule(GrammarFileName, "print"); }
		return;

	}
	// $ANTLR end "print"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}

	// $ANTLR start "expression"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:902:1: expression : es ( relOp es )? ;
	[GrammarRule("expression")]
	private void expression()
	{
		EnterRule_expression();
		EnterRule("expression", 29);
		TraceIn("expression", 29);
	    string relOp11 = default(string);

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(902, 110);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:903:2: ( es ( relOp es )? )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:903:4: es ( relOp es )?
			{
			DebugLocation(903, 4);
			statement_stack.Peek().inExpression =  true;
			DebugLocation(904, 3);
			PushFollow(Follow._es_in_expression1267);
			es();
			PopFollow();

			DebugLocation(904, 6);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:904:6: ( relOp es )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, decisionCanBacktrack[30]);
			int LA30_0 = input.LA(1);

			if ((LA30_0==16||(LA30_0>=27 && LA30_0<=28)||(LA30_0>=30 && LA30_0<=32)))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:904:7: relOp es
				{
				DebugLocation(904, 7);
				PushFollow(Follow._relOp_in_expression1270);
				relOp11=relOp();
				PopFollow();

				DebugLocation(904, 13);
				pOperadores.Push(relOp11);
				DebugLocation(904, 50);
				PushFollow(Follow._es_in_expression1274);
				es();
				PopFollow();

				DebugLocation(904, 53);
				aplicaOperadorPendienteQueSea(operadoresRelacionales);

				}
				break;

			}
			} finally { DebugExitSubRule(30); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("expression", 29);
			LeaveRule("expression", 29);
			LeaveRule_expression();
	    }
	 	DebugLocation(904, 110);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_es() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_es() {}

	// $ANTLR start "es"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:906:1: es : term (op= ( '+' | '-' | 'or' ) term )* ;
	[GrammarRule("es")]
	private void es()
	{
		EnterRule_es();
		EnterRule("es", 30);
		TraceIn("es", 30);
	    IToken op = default(IToken);

		try { DebugEnterRule(GrammarFileName, "es");
		DebugLocation(906, 4);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:907:2: ( term (op= ( '+' | '-' | 'or' ) term )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:907:4: term (op= ( '+' | '-' | 'or' ) term )*
			{
			DebugLocation(907, 4);
			PushFollow(Follow._term_in_es1287);
			term();
			PopFollow();

			DebugLocation(907, 9);
			aplicaOperadorPendienteQueSea(masMenosOr);
			DebugLocation(908, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:908:3: (op= ( '+' | '-' | 'or' ) term )*
			try { DebugEnterSubRule(31);
			while (true)
			{
				int alt31=2;
				try { DebugEnterDecision(31, decisionCanBacktrack[31]);
				int LA31_0 = input.LA(1);

				if ((LA31_0==20||LA31_0==22||LA31_0==47))
				{
					alt31 = 1;
				}


				} finally { DebugExitDecision(31); }
				switch ( alt31 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:909:4: op= ( '+' | '-' | 'or' ) term
					{
					DebugLocation(909, 7);

					op=(IToken)input.LT(1);
					if (input.LA(1)==20||input.LA(1)==22||input.LA(1)==47)
					{
						input.Consume();
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(909, 28);
					pOperadores.Push((op!=null?op.Text:null));
					DebugLocation(910, 4);
					PushFollow(Follow._term_in_es1320);
					term();
					PopFollow();

					DebugLocation(910, 9);
					aplicaOperadorPendienteQueSea(masMenosOr);

					}
					break;

				default:
					goto loop31;
				}
			}

			loop31:
				;

			} finally { DebugExitSubRule(31); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("es", 30);
			LeaveRule("es", 30);
			LeaveRule_es();
	    }
	 	DebugLocation(911, 4);
		} finally { DebugExitRule(GrammarFileName, "es"); }
		return;

	}
	// $ANTLR end "es"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_term() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_term() {}

	// $ANTLR start "term"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:913:1: term : factor (op= ( '*' | '/' | 'and' ) factor )* ;
	[GrammarRule("term")]
	private void term()
	{
		EnterRule_term();
		EnterRule("term", 31);
		TraceIn("term", 31);
	    IToken op = default(IToken);

		try { DebugEnterRule(GrammarFileName, "term");
		DebugLocation(913, 4);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:913:6: ( factor (op= ( '*' | '/' | 'and' ) factor )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:913:8: factor (op= ( '*' | '/' | 'and' ) factor )*
			{
			DebugLocation(913, 8);
			PushFollow(Follow._factor_in_term1336);
			factor();
			PopFollow();

			DebugLocation(913, 15);
			aplicaOperadorPendienteQueSea(porEntreAnd);
			DebugLocation(914, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:914:3: (op= ( '*' | '/' | 'and' ) factor )*
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=2;
				try { DebugEnterDecision(32, decisionCanBacktrack[32]);
				int LA32_0 = input.LA(1);

				if ((LA32_0==19||LA32_0==24||LA32_0==36))
				{
					alt32 = 1;
				}


				} finally { DebugExitDecision(32); }
				switch ( alt32 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:915:4: op= ( '*' | '/' | 'and' ) factor
					{
					DebugLocation(915, 7);

					op=(IToken)input.LT(1);
					if (input.LA(1)==19||input.LA(1)==24||input.LA(1)==36)
					{
						input.Consume();
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(915, 29);
					pOperadores.Push((op!=null?op.Text:null));
					DebugLocation(916, 4);
					PushFollow(Follow._factor_in_term1369);
					factor();
					PopFollow();

					DebugLocation(916, 11);
					aplicaOperadorPendienteQueSea(porEntreAnd);

					}
					break;

				default:
					goto loop32;
				}
			}

			loop32:
				;

			} finally { DebugExitSubRule(32); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("term", 31);
			LeaveRule("term", 31);
			LeaveRule_term();
	    }
	 	DebugLocation(917, 4);
		} finally { DebugExitRule(GrammarFileName, "term"); }
		return;

	}
	// $ANTLR end "term"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_factor() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_factor() {}

	// $ANTLR start "factor"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:919:1: factor : ( read | invoke |v= ID ( arrayAccess )? |obj= ID '.' var= ID | 'this' '.' var= ID | INT | CHAR | DOUBLE | '(' expression ')' );
	[GrammarRule("factor")]
	private void factor()
	{
		EnterRule_factor();
		EnterRule("factor", 32);
		TraceIn("factor", 32);
	    IToken v = default(IToken);
	    IToken obj = default(IToken);
	    IToken var = default(IToken);
	    IToken INT12 = default(IToken);
	    IToken CHAR13 = default(IToken);
	    IToken DOUBLE14 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "factor");
		DebugLocation(919, 2);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:920:2: ( read | invoke |v= ID ( arrayAccess )? |obj= ID '.' var= ID | 'this' '.' var= ID | INT | CHAR | DOUBLE | '(' expression ')' )
			int alt34=9;
			try { DebugEnterDecision(34, decisionCanBacktrack[34]);
			switch (input.LA(1))
			{
			case 51:
			case 52:
			case 53:
				{
				alt34 = 1;
				}
				break;
			case ID:
				{
				int LA34_2 = input.LA(2);

				if ((LA34_2==23))
				{
					int LA34_8 = input.LA(3);

					if ((LA34_8==ID))
					{
						int LA34_11 = input.LA(4);

						if ((LA34_11==16||(LA34_11>=18 && LA34_11<=22)||LA34_11==24||(LA34_11>=26 && LA34_11<=28)||(LA34_11>=30 && LA34_11<=32)||(LA34_11>=35 && LA34_11<=36)||LA34_11==47))
						{
							alt34 = 4;
						}
						else if ((LA34_11==17))
						{
							alt34 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 34, 11, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 34, 8, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA34_2==16||(LA34_2>=18 && LA34_2<=22)||LA34_2==24||(LA34_2>=26 && LA34_2<=28)||(LA34_2>=30 && LA34_2<=32)||(LA34_2>=34 && LA34_2<=36)||LA34_2==47))
				{
					alt34 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 34, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 55:
				{
				int LA34_3 = input.LA(2);

				if ((LA34_3==23))
				{
					int LA34_10 = input.LA(3);

					if ((LA34_10==ID))
					{
						int LA34_12 = input.LA(4);

						if ((LA34_12==16||(LA34_12>=18 && LA34_12<=22)||LA34_12==24||(LA34_12>=26 && LA34_12<=28)||(LA34_12>=30 && LA34_12<=32)||(LA34_12>=35 && LA34_12<=36)||LA34_12==47))
						{
							alt34 = 5;
						}
						else if ((LA34_12==17))
						{
							alt34 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 34, 12, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 34, 10, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 34, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INT:
				{
				alt34 = 6;
				}
				break;
			case CHAR:
				{
				alt34 = 7;
				}
				break;
			case DOUBLE:
				{
				alt34 = 8;
				}
				break;
			case 17:
				{
				alt34 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:921:3: read
				{
				DebugLocation(921, 3);
				PushFollow(Follow._read_in_factor1388);
				read();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:922:5: invoke
				{
				DebugLocation(922, 5);
				PushFollow(Follow._invoke_in_factor1394);
				invoke();
				PopFollow();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:923:5: v= ID ( arrayAccess )?
				{
				DebugLocation(923, 7);
				v=(IToken)Match(input,ID,Follow._ID_in_factor1404); 
				DebugLocation(924, 3);

						VariableSymbol varSymbol = getVariable((v!=null?v.Text:null));
						pOperandos.Push(varSymbol);
						
				DebugLocation(928, 3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:928:3: ( arrayAccess )?
				int alt33=2;
				try { DebugEnterSubRule(33);
				try { DebugEnterDecision(33, decisionCanBacktrack[33]);
				int LA33_0 = input.LA(1);

				if ((LA33_0==34))
				{
					alt33 = 1;
				}
				} finally { DebugExitDecision(33); }
				switch (alt33)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:928:3: arrayAccess
					{
					DebugLocation(928, 3);
					PushFollow(Follow._arrayAccess_in_factor1412);
					arrayAccess();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(33); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:929:5: obj= ID '.' var= ID
				{
				DebugLocation(929, 9);
				obj=(IToken)Match(input,ID,Follow._ID_in_factor1423); 
				DebugLocation(929, 14);
				Match(input,23,Follow._23_in_factor1425); 
				DebugLocation(929, 22);
				var=(IToken)Match(input,ID,Follow._ID_in_factor1431); 
				DebugLocation(930, 3);

						VariableSymbol objeto = getVariable((obj!=null?obj.Text:null));
						VariableSymbol field = getField((obj!=null?obj.Text:null), (var!=null?var.Text:null));
						VariableSymbol temp = getNewTemporalVarOfType(field.type.name);
						pOperandos.Push(temp);
						quadruplesList.addGETFIELD(temp.address.ToString(), objeto.address.ToString(), field.address.ToString());
						

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:938:5: 'this' '.' var= ID
				{
				DebugLocation(938, 5);
				Match(input,55,Follow._55_in_factor1444); 
				DebugLocation(938, 12);
				Match(input,23,Follow._23_in_factor1446); 
				DebugLocation(938, 20);
				var=(IToken)Match(input,ID,Follow._ID_in_factor1452); 
				DebugLocation(939, 3);

						VariableSymbol field = getInstanceVariable((var!=null?var.Text:null));
						VariableSymbol temp = getNewTemporalVarOfType(field.type.name);
						pOperandos.Push(temp);
						MethodSymbol method = (MethodSymbol)actualScope;
						quadruplesList.addGETFIELD(temp.address.ToString(), method.getThisParameterAddress(), field.address.ToString());
						

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:966:5: INT
				{
				DebugLocation(966, 5);
				INT12=(IToken)Match(input,INT,Follow._INT_in_factor1472); 
				DebugLocation(967, 3);

						try {
							int intConst = int.Parse((INT12!=null?INT12.Text:null));
						}
						catch(Exception e) {
							MethodSymbol methodSymbol = (MethodSymbol)actualScope;
							string msg = "Error en " + methodSymbol.fullyQualifiedName() + ". Constante entera es demasiado grande o pequena para un int: " + (INT12!=null?INT12.Text:null);
							manageException(new Exception(msg));
						}
						pushICONST((INT12!=null?INT12.Text:null));
						

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:978:5: CHAR
				{
				DebugLocation(978, 5);
				CHAR13=(IToken)Match(input,CHAR,Follow._CHAR_in_factor1483); 
				DebugLocation(978, 10);
				pushCCONST((CHAR13!=null?CHAR13.Text:null));

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:979:5: DOUBLE
				{
				DebugLocation(979, 5);
				DOUBLE14=(IToken)Match(input,DOUBLE,Follow._DOUBLE_in_factor1492); 
				DebugLocation(980, 3);

						try {
							double doubleConst = double.Parse((DOUBLE14!=null?DOUBLE14.Text:null));
						}
						catch(Exception e) {
							MethodSymbol methodSymbol = (MethodSymbol)actualScope;
							string msg = "Error en " + methodSymbol.fullyQualifiedName() + ". Constante double es demasiado grande o pequena para un double: " + (DOUBLE14!=null?DOUBLE14.Text:null);
							manageException(new Exception(msg));
						}
						
						pushDCONST((DOUBLE14!=null?DOUBLE14.Text:null));
						

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:992:5: '(' expression ')'
				{
				DebugLocation(992, 5);
				Match(input,17,Follow._17_in_factor1503); 
				DebugLocation(992, 8);
				pOperadores.Push("(");
				DebugLocation(992, 33);
				PushFollow(Follow._expression_in_factor1506);
				expression();
				PopFollow();

				DebugLocation(992, 44);
				Match(input,18,Follow._18_in_factor1508); 
				DebugLocation(992, 48);
				pOperadores.Pop();

				}
				break;

			}
		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("factor", 32);
			LeaveRule("factor", 32);
			LeaveRule_factor();
	    }
	 	DebugLocation(993, 2);
		} finally { DebugExitRule(GrammarFileName, "factor"); }
		return;

	}
	// $ANTLR end "factor"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_relOp() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_relOp() {}

	// $ANTLR start "relOp"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:995:1: relOp returns [string operador] : op= ( '==' | '!=' | '>' | '>=' | '<' | '<=' ) ;
	[GrammarRule("relOp")]
	private string relOp()
	{
		EnterRule_relOp();
		EnterRule("relOp", 33);
		TraceIn("relOp", 33);
	    string operador = default(string);


	    IToken op = default(IToken);

		try { DebugEnterRule(GrammarFileName, "relOp");
		DebugLocation(995, 101);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:995:31: (op= ( '==' | '!=' | '>' | '>=' | '<' | '<=' ) )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:995:34: op= ( '==' | '!=' | '>' | '>=' | '<' | '<=' )
			{
			DebugLocation(995, 37);

			op=(IToken)input.LT(1);
			if (input.LA(1)==16||(input.LA(1)>=27 && input.LA(1)<=28)||(input.LA(1)>=30 && input.LA(1)<=32))
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(995, 79);
			operador = (op!=null?op.Text:null);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("relOp", 33);
			LeaveRule("relOp", 33);
			LeaveRule_relOp();
	    }
	 	DebugLocation(995, 101);
		} finally { DebugExitRule(GrammarFileName, "relOp"); }
		return operador;

	}
	// $ANTLR end "relOp"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _programName_in_program61 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _classDecl_in_program63 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _classMain_in_program68 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _50_in_programName77 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_programName79 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _26_in_programName81 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _39_in_classMain92 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_classMain94 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_classMain96 = new BitSet(new ulong[]{0x800116000004400UL});
		public static readonly BitSet _varDecl_in_classMain98 = new BitSet(new ulong[]{0x800116000004400UL});
		public static readonly BitSet _methodDeclaration_in_classMain101 = new BitSet(new ulong[]{0x800114000004400UL});
		public static readonly BitSet _59_in_classMain106 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _39_in_classDecl125 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_classDecl131 = new BitSet(new ulong[]{0x400040000000000UL});
		public static readonly BitSet _superClass_in_classDecl134 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_classDecl140 = new BitSet(new ulong[]{0x800116000004400UL});
		public static readonly BitSet _varDecl_in_classDecl142 = new BitSet(new ulong[]{0x800116000004400UL});
		public static readonly BitSet _methodDeclaration_in_classDecl145 = new BitSet(new ulong[]{0x800114000004400UL});
		public static readonly BitSet _59_in_classDecl148 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _42_in_superClass158 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_superClass160 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _56_in_vars171 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_vars173 = new BitSet(new ulong[]{0x116000000402UL});
		public static readonly BitSet _varDecl_in_vars175 = new BitSet(new ulong[]{0x116000000402UL});
		public static readonly BitSet _primitiveType_in_varDecl207 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _referenceType_in_varDecl215 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_varDecl220 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _arrayVarDeclaration_in_varDecl238 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _26_in_varDecl246 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_primitiveType265 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_referenceType285 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _37_in_arrayVarDeclaration298 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _27_in_arrayVarDeclaration300 = new BitSet(new ulong[]{0x114000000000UL});
		public static readonly BitSet _primitiveType_in_arrayVarDeclaration306 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_arrayVarDeclaration308 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _34_in_arrayVarDeclaration310 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _INT_in_arrayVarDeclaration312 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _35_in_arrayVarDeclaration314 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_arrayVarDeclaration316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_voidType339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_formalParamType356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _referenceType_in_formalParamType370 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _45_in_methods389 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_methods391 = new BitSet(new ulong[]{0x114000004402UL});
		public static readonly BitSet _methodDeclaration_in_methods393 = new BitSet(new ulong[]{0x114000004402UL});
		public static readonly BitSet _primitiveType_in_methodDeclaration412 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _referenceType_in_methodDeclaration420 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _voidType_in_methodDeclaration428 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_methodDeclaration435 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_methodDeclaration443 = new BitSet(new ulong[]{0x114000040400UL});
		public static readonly BitSet _formalParameters_in_methodDeclaration445 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _18_in_methodDeclaration448 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_methodDeclaration451 = new BitSet(new ulong[]{0xAC3196004000400UL});
		public static readonly BitSet _varDecl_in_methodDeclaration455 = new BitSet(new ulong[]{0xAC3196004000400UL});
		public static readonly BitSet _someStatements_in_methodDeclaration458 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _59_in_methodDeclaration460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _formalParamType_in_formalParam480 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_formalParam482 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _formalParam_in_formalParameters498 = new BitSet(new ulong[]{0x200002UL});
		public static readonly BitSet _21_in_formalParameters501 = new BitSet(new ulong[]{0x114000000400UL});
		public static readonly BitSet _formalParam_in_formalParameters503 = new BitSet(new ulong[]{0x200002UL});
		public static readonly BitSet _statement_in_someStatements515 = new BitSet(new ulong[]{0x2C3080004000402UL});
		public static readonly BitSet _assignment_in_statement539 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _invoke_in_statement545 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _26_in_statement547 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _if_inst_in_statement553 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _while_inst_in_statement559 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _return_inst_in_statement565 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _print_in_statement571 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _26_in_statement577 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _designator_in_assignment597 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _29_in_assignment599 = new BitSet(new ulong[]{0xB8400000020CA0UL});
		public static readonly BitSet _expression_in_assignment608 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _46_in_assignment614 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_assignment616 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_assignment618 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _18_in_assignment620 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _26_in_assignment638 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_designator657 = new BitSet(new ulong[]{0x400000002UL});
		public static readonly BitSet _arrayAccess_in_designator677 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_designator697 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _23_in_designator700 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_designator706 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _55_in_designator719 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _23_in_designator721 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_designator727 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _34_in_arrayAccess759 = new BitSet(new ulong[]{0xB8000000020CA0UL});
		public static readonly BitSet _expression_in_arrayAccess770 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _35_in_arrayAccess785 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_invoke815 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _55_in_invoke820 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _23_in_invoke828 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_invoke834 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _actualParameters_in_invoke844 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _17_in_actualParameters871 = new BitSet(new ulong[]{0xB8000000060CA0UL});
		public static readonly BitSet _expression_in_actualParameters881 = new BitSet(new ulong[]{0x240000UL});
		public static readonly BitSet _21_in_actualParameters894 = new BitSet(new ulong[]{0xB8000000020CA0UL});
		public static readonly BitSet _expression_in_actualParameters896 = new BitSet(new ulong[]{0x240000UL});
		public static readonly BitSet _18_in_actualParameters910 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _43_in_if_inst937 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_if_inst939 = new BitSet(new ulong[]{0xB8000000020CA0UL});
		public static readonly BitSet _expression_in_if_inst941 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _18_in_if_inst943 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_if_inst952 = new BitSet(new ulong[]{0xAC3080004000400UL});
		public static readonly BitSet _someStatements_in_if_inst955 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _59_in_if_inst957 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _41_in_if_inst973 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_if_inst982 = new BitSet(new ulong[]{0xAC3080004000400UL});
		public static readonly BitSet _someStatements_in_if_inst984 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _59_in_if_inst986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _57_in_while_inst1024 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_while_inst1026 = new BitSet(new ulong[]{0xB8000000020CA0UL});
		public static readonly BitSet _expression_in_while_inst1028 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _18_in_while_inst1030 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_while_inst1041 = new BitSet(new ulong[]{0xAC3080004000400UL});
		public static readonly BitSet _someStatements_in_while_inst1043 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _59_in_while_inst1045 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _54_in_return_inst1073 = new BitSet(new ulong[]{0xB8000004020CA0UL});
		public static readonly BitSet _expression_in_return_inst1092 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _26_in_return_inst1114 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _53_in_read1136 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _51_in_read1145 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _52_in_read1154 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_read1170 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _18_in_read1172 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _49_in_print1193 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _48_in_print1198 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_print1203 = new BitSet(new ulong[]{0xB8000000060CA0UL});
		public static readonly BitSet _expression_in_print1212 = new BitSet(new ulong[]{0x240000UL});
		public static readonly BitSet _21_in_print1222 = new BitSet(new ulong[]{0xB8000000020CA0UL});
		public static readonly BitSet _expression_in_print1224 = new BitSet(new ulong[]{0x240000UL});
		public static readonly BitSet _18_in_print1245 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _26_in_print1247 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _es_in_expression1267 = new BitSet(new ulong[]{0x1D8010002UL});
		public static readonly BitSet _relOp_in_expression1270 = new BitSet(new ulong[]{0xB8000000020CA0UL});
		public static readonly BitSet _es_in_expression1274 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _term_in_es1287 = new BitSet(new ulong[]{0x800000500002UL});
		public static readonly BitSet _set_in_es1302 = new BitSet(new ulong[]{0xB8000000020CA0UL});
		public static readonly BitSet _term_in_es1320 = new BitSet(new ulong[]{0x800000500002UL});
		public static readonly BitSet _factor_in_term1336 = new BitSet(new ulong[]{0x1001080002UL});
		public static readonly BitSet _set_in_term1351 = new BitSet(new ulong[]{0xB8000000020CA0UL});
		public static readonly BitSet _factor_in_term1369 = new BitSet(new ulong[]{0x1001080002UL});
		public static readonly BitSet _read_in_factor1388 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _invoke_in_factor1394 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_factor1404 = new BitSet(new ulong[]{0x400000002UL});
		public static readonly BitSet _arrayAccess_in_factor1412 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_factor1423 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _23_in_factor1425 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_factor1431 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _55_in_factor1444 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _23_in_factor1446 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_factor1452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_factor1472 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHAR_in_factor1483 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOUBLE_in_factor1492 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _17_in_factor1503 = new BitSet(new ulong[]{0xB8000000020CA0UL});
		public static readonly BitSet _expression_in_factor1506 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _18_in_factor1508 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_relOp1529 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
