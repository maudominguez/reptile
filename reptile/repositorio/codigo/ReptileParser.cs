//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g 2011-10-28 22:23:41

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


	using System;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class ReptileParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "CHAR", "COMMENT", "DOUBLE", "ESC_SEQ", "EXPONENT", "HEX_DIGIT", "ID", "INT", "OCTAL_ESC", "UNICODE_ESC", "WS", "'!='", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "':'", "';'", "'<'", "'<='", "'='", "'=='", "'>'", "'>='", "'CharVector'", "'DoubleVector'", "'IntVector'", "'['", "']'", "'and'", "'char'", "'class'", "'classes'", "'double'", "'else'", "'extends'", "'if'", "'int'", "'main'", "'methods'", "'new'", "'or'", "'print'", "'read'", "'return'", "'this'", "'vars'", "'void'", "'while'", "'{'", "'}'"
	};
	public const int EOF=-1;
	public const int T__15=15;
	public const int T__16=16;
	public const int T__17=17;
	public const int T__18=18;
	public const int T__19=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int CHAR=4;
	public const int COMMENT=5;
	public const int DOUBLE=6;
	public const int ESC_SEQ=7;
	public const int EXPONENT=8;
	public const int HEX_DIGIT=9;
	public const int ID=10;
	public const int INT=11;
	public const int OCTAL_ESC=12;
	public const int UNICODE_ESC=13;
	public const int WS=14;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public ReptileParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public ReptileParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return ReptileParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g"; } }


	SymbolTable directory;
	Stack<string> pOperadores = new Stack<string>();
	Stack<VariableSymbol> pOperandos = new Stack<VariableSymbol>();
	QuadruplesList quadruplesList = new QuadruplesList();

	Scope actualScope;
	Scope globalScope = new GlobalScope();

	LinkedList<string> operadoresRelacionales = new LinkedList<string>(new string[] {"==", "!=", ">", "<", ">=", "<="});
	LinkedList<string> masMenosOr = new LinkedList<string>(new string[] {"+", "-", "or"});
	LinkedList<string> porEntreAnd = new LinkedList<string>(new string[] {"*", "/", "and"});

	protected override object RecoverFromMismatchedToken(IIntStream input, int ttype, BitSet follow)
	{
	      throw new MismatchedTokenException(ttype, input);
	}

	public override object RecoverFromMismatchedSet(IIntStream input, RecognitionException e, BitSet follow)
	{
	        throw e;
	}

	void createDirectories() {
		directory = new SymbolTable();
	}

	void defineScopeGlobal() {
		globalScope = new GlobalScope();
		directory.Add("GlobalScope", (ScopeWithMethods)globalScope);
	}

	void registerClass(string className, string superClase) {
		try {
			ClassSymbol clasePadre = null;
			if(superClase != null) {
				try {
					clasePadre = directory.findType(superClase);
				}
				catch(Exception exception) {
					manageException(exception);
				}
			}
			
			ClassSymbol newClass = new ClassSymbol(className, clasePadre);
			directory.Add(newClass.name, newClass);
			actualScope = newClass;
		}
		catch(Exception exception) {
			manageException(exception);	//manejarException
		}
	}

	//usado con metodos y variables
	void registerVariableInScope(string variableName, ClassSymbol tipo) {
		VariableSymbol variable = new VariableSymbol(variableName, tipo);
		actualScope.defineVariable(variable.name, variable);
	}

	void registrarMetodo(ClassSymbol tipoRetorno, string methodName) {
		ScopeWithMethods scope = (ScopeWithMethods)actualScope;
		MethodSymbol methodSymbol = new MethodSymbol(methodName, tipoRetorno, scope);
		scope.defineMethod(methodName, methodSymbol);
		actualScope = methodSymbol;
	}

	void registerFormalParameter(string variableName, string tipo) {
		ClassSymbol tipoParam = directory.findType(tipo);
		VariableSymbol variableSymbol = new VariableSymbol(variableName, tipoParam);
		MethodSymbol methodSymbol = (MethodSymbol) actualScope;	//casting para poder llamar a defineParameter(..)
		methodSymbol.defineParameter(variableName, variableSymbol);
	}

	bool verifyVariableCanBeAccessed(string variable) {
		VariableSymbol varSymbol = actualScope.getVariableSymbol(variable);
		if(varSymbol == null) {
			generateVariableNotFoundError(variable);
			return false;
		}
		return true;
	}

	void generateVariableNotFoundError(string variable) {
			Exception e = new Exception("No se encontro la variable " + variable);
			manageException(e);
	}

	void verifyObjectAndInstVariableDefined(string objeto, string instVar) {
		verifyVariableCanBeAccessed(objeto);
		VariableSymbol obj = actualScope.getVariableSymbol(objeto);
		ClassSymbol tipo = obj.type;
		VariableSymbol varDeInstancia = tipo.getVariableSymbol(instVar);
		if(varDeInstancia == null) {
			generateInstanceVariableNotFoundError(tipo.name, instVar);
		}
	}

	VariableSymbol getVariable(string variable) {
		verifyVariableCanBeAccessed(variable);
		return actualScope.getVariableSymbol(variable);
	}

	VariableSymbol getField(string objeto, string instVar) {
		verifyObjectAndInstVariableDefined(objeto, instVar);
		VariableSymbol obj = actualScope.getVariableSymbol(objeto);
		ClassSymbol tipo = obj.type;
		VariableSymbol varDeInstancia = tipo.getVariableSymbol(instVar);
		return varDeInstancia;
	}

	void generateInstanceVariableNotFoundError(string clase, string variable) {
		Exception e = new Exception("No se encontro la variable de instancia " + variable + " en el tipo " + clase);
		manageException(e);
	}

	void verifyInstanceVariableDefinedInThis(string var) {
		ScopeWithMethods enclosingScope = ((MethodSymbol)actualScope).enclosingScope;
		if(enclosingScope is GlobalScope) {
			Exception e = new Exception("No se puede usar 'this' si no es dentro de una clase.");
			manageException(e);
			return;
		}
		else {
			ClassSymbol clase = (ClassSymbol)enclosingScope;
			VariableSymbol instVariable = clase.getVariableSymbol(var);
			if(instVariable == null) {
				generateInstanceVariableNotFoundError(clase.name, var);
			}
		}
	}

	VariableSymbol getInstanceVariable(string var) {
		verifyInstanceVariableDefinedInThis(var);
		ScopeWithMethods enclosingScope = ((MethodSymbol)actualScope).enclosingScope;
		ClassSymbol clase = (ClassSymbol)enclosingScope;
		return clase.getVariableSymbol(var);
	}

	void verifyIsVector(string var) {
		if(verifyVariableCanBeAccessed(var)) {
			VariableSymbol arr = actualScope.getVariableSymbol(var);
			if(!arr.type.isVectorType()) {
				generateIsNotVectorError(arr.name);
			}
		}
	}

	void generateIsNotVectorError(string variable) {
		Exception e = new Exception("La variable " + variable + " no es de ninguna clase Vector y por tanto no tiene definido el operador [] .");
		manageException(e);
	}

	public bool tiposSonCompatiblesEnOperacion() {
		VariableSymbol right = pOperandos.Pop();
		VariableSymbol left = pOperandos.Pop();
		pOperandos.Push(left);
		pOperandos.Push(right);
		string operador = pOperadores.Peek();
		ClassSymbol tipoResultado = directory.resultType(left.type, right.type, operador);
		if(tipoResultado.isVoidType()) {
			return false;
		}
		return true;
	}

	public void aplicaOperadorPendienteQueSea(LinkedList<string> operadoresBuscados) {
		if(pOperadores.Count > 0) {
			string operador = pOperadores.Peek();
			if(operadoresBuscados.Contains(operador)) {
				if(tiposSonCompatiblesEnOperacion()) {
					pOperadores.Pop();
					VariableSymbol right = pOperandos.Pop();
					VariableSymbol left = pOperandos.Pop();
					ClassSymbol tipoResultado = directory.resultType(left.type, right.type, operador);
					
					VariableSymbol temporal = getNewTemporalVarOfType(tipoResultado.name);
					//TODO generar cuadruplo usando operador, left, right y temporal
					quadruplesList.addEXPRESSION_OPER(operador, left.address.ToString(), right.address.ToString(), temporal.address.ToString());
					
					pOperandos.Push(temporal);
				}
				else {
					//TODO accion correctiva: sacar los dos operandos y el operador de sus pilas
					pOperadores.Pop();
					VariableSymbol right = pOperandos.Pop();
					VariableSymbol left = pOperandos.Pop();
					manageException(new Exception("Operador \"" + operador + "\" no es valido para " + 
						left.type.name + " " + left.name + ", " + right.type.name + " " + right.name));
				}
			}
		}
	}

	public void pushICONST(string iConst) {
		VariableSymbol temp = getNewTemporalVarOfType("int");
		pOperandos.Push(temp);
		quadruplesList.addICONST(iConst, temp.address.ToString());
	}

	public void pushCCONST(string cConst) {
		VariableSymbol temp = getNewTemporalVarOfType("char");
		pOperandos.Push(temp);
		quadruplesList.addCCONST(cConst, temp.address.ToString());
	}

	public void pushDCONST(string dConst) {
		VariableSymbol temp = getNewTemporalVarOfType("double");
		pOperandos.Push(temp);
		quadruplesList.addDCONST(dConst, temp.address.ToString());
	}

	public VariableSymbol getNewTemporalVarOfType(string type) {
		ClassSymbol tipo = directory.findType(type);
		VariableSymbol temp = ((MethodSymbol)actualScope).getNewTemporal(tipo);
		return temp;
	}

	public string typeOfVector(string type) {
		if(type.Equals(SymbolTable.integerVectorName)) {
			return SymbolTable.integerName;
		}
		else if(type.Equals(SymbolTable.charVectorName)) {
			return SymbolTable.charName;
		}
		else if(type.Equals(SymbolTable.doubleVectorName)) {
			return SymbolTable.doubleName;
		}
		else {
			manageException(new Exception("El tipo " + type + " no es un tipo de vector conocido."));
			return "";
		}
	}

	public void pushFieldOfTemporalVariable(string instVariable) {
		VariableSymbol objeto = pOperandos.Pop();
		VariableSymbol field = objeto.type.getVariableSymbol(instVariable);
		if(field == null) {
			generateInstanceVariableNotFoundError(objeto.type.name, instVariable);
		}
		VariableSymbol temp = getNewTemporalVarOfType(field.type.name);
		pOperandos.Push(temp);
		quadruplesList.addGETFIELD(temp.address.ToString(), objeto.address.ToString(), field.address.ToString());	
	}

	public void printQuadruplesList() {
		Console.WriteLine(quadruplesList.ToString());
	}

	public static void manageException(Exception e) {
		Console.WriteLine(e.ToString());
		throw new RecognitionException("Se encontro Error semantico\n");
	}


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_program() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_program() {}

	// $ANTLR start "program"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:286:8: public program : ( classes )? ( vars )? ( methods )? mainMethod ;
	[GrammarRule("program")]
	public void program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(286, 124);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:286:16: ( ( classes )? ( vars )? ( methods )? mainMethod )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:286:18: ( classes )? ( vars )? ( methods )? mainMethod
			{
			DebugLocation(286, 18);
			createDirectories(); defineScopeGlobal();
			DebugLocation(286, 62);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:286:62: ( classes )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_0 = input.LA(1);

			if ((LA1_0==40))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:286:62: classes
				{
				DebugLocation(286, 62);
				PushFollow(Follow._classes_in_program61);
				classes();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(286, 71);
			actualScope = globalScope;
			DebugLocation(286, 100);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:286:100: ( vars )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
			int LA2_0 = input.LA(1);

			if ((LA2_0==54))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:286:100: vars
				{
				DebugLocation(286, 100);
				PushFollow(Follow._vars_in_program66);
				vars();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(286, 106);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:286:106: ( methods )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_0 = input.LA(1);

			if ((LA3_0==47))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:286:106: methods
				{
				DebugLocation(286, 106);
				PushFollow(Follow._methods_in_program69);
				methods();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(286, 115);
			PushFollow(Follow._mainMethod_in_program72);
			mainMethod();
			PopFollow();


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
	    }
	 	DebugLocation(286, 124);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return;

	}
	// $ANTLR end "program"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_mainMethod() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_mainMethod() {}

	// $ANTLR start "mainMethod"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:288:1: mainMethod : 'void' 'main' '(' ')' '{' ( vars )? someStatements '}' ;
	[GrammarRule("mainMethod")]
	private void mainMethod()
	{
		EnterRule_mainMethod();
		EnterRule("mainMethod", 2);
		TraceIn("mainMethod", 2);
		try { DebugEnterRule(GrammarFileName, "mainMethod");
		DebugLocation(288, 139);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:289:2: ( 'void' 'main' '(' ')' '{' ( vars )? someStatements '}' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:289:4: 'void' 'main' '(' ')' '{' ( vars )? someStatements '}'
			{
			DebugLocation(289, 4);
			Match(input,55,Follow._55_in_mainMethod81); 
			DebugLocation(289, 11);
			Match(input,46,Follow._46_in_mainMethod83); 
			DebugLocation(289, 18);
			Match(input,16,Follow._16_in_mainMethod85); 
			DebugLocation(289, 22);
			Match(input,17,Follow._17_in_mainMethod87); 
			DebugLocation(289, 26);
			Match(input,57,Follow._57_in_mainMethod89); 
			DebugLocation(289, 29);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:289:29: ( vars )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, decisionCanBacktrack[4]);
			int LA4_0 = input.LA(1);

			if ((LA4_0==54))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:289:29: vars
				{
				DebugLocation(289, 29);
				PushFollow(Follow._vars_in_mainMethod90);
				vars();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(289, 35);
			PushFollow(Follow._someStatements_in_mainMethod93);
			someStatements();
			PopFollow();

			DebugLocation(289, 50);
			Match(input,58,Follow._58_in_mainMethod95); 
			DebugLocation(289, 54);
			directory.printDirectory(); directory.printTypesDirectory(); printQuadruplesList();

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("mainMethod", 2);
			LeaveRule("mainMethod", 2);
			LeaveRule_mainMethod();
	    }
	 	DebugLocation(289, 139);
		} finally { DebugExitRule(GrammarFileName, "mainMethod"); }
		return;

	}
	// $ANTLR end "mainMethod"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_classes() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_classes() {}

	// $ANTLR start "classes"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:291:1: classes : 'classes' ':' ( classDecl )* ;
	[GrammarRule("classes")]
	private void classes()
	{
		EnterRule_classes();
		EnterRule("classes", 3);
		TraceIn("classes", 3);
		try { DebugEnterRule(GrammarFileName, "classes");
		DebugLocation(291, 34);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:291:9: ( 'classes' ':' ( classDecl )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:291:11: 'classes' ':' ( classDecl )*
			{
			DebugLocation(291, 11);
			Match(input,40,Follow._40_in_classes106); 
			DebugLocation(291, 21);
			Match(input,24,Follow._24_in_classes108); 
			DebugLocation(291, 25);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:291:25: ( classDecl )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, decisionCanBacktrack[5]);
				int LA5_0 = input.LA(1);

				if ((LA5_0==39))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:291:25: classDecl
					{
					DebugLocation(291, 25);
					PushFollow(Follow._classDecl_in_classes110);
					classDecl();
					PopFollow();


					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("classes", 3);
			LeaveRule("classes", 3);
			LeaveRule_classes();
	    }
	 	DebugLocation(291, 34);
		} finally { DebugExitRule(GrammarFileName, "classes"); }
		return;

	}
	// $ANTLR end "classes"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_classDecl() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_classDecl() {}

	// $ANTLR start "classDecl"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:293:1: classDecl : 'class' clase= ID ( superClass )? '{' ( vars )? ( methods )? '}' ;
	[GrammarRule("classDecl")]
	private void classDecl()
	{
		EnterRule_classDecl();
		EnterRule("classDecl", 4);
		TraceIn("classDecl", 4);
	    IToken clase = default(IToken);
	    string superClass1 = default(string);

		try { DebugEnterRule(GrammarFileName, "classDecl");
		DebugLocation(293, 117);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:294:5: ( 'class' clase= ID ( superClass )? '{' ( vars )? ( methods )? '}' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:294:9: 'class' clase= ID ( superClass )? '{' ( vars )? ( methods )? '}'
			{
			DebugLocation(294, 9);
			Match(input,39,Follow._39_in_classDecl125); 
			DebugLocation(294, 23);
			clase=(IToken)Match(input,ID,Follow._ID_in_classDecl131); 
			DebugLocation(294, 28);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:294:28: ( superClass )?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, decisionCanBacktrack[6]);
			int LA6_0 = input.LA(1);

			if ((LA6_0==43))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:294:29: superClass
				{
				DebugLocation(294, 29);
				PushFollow(Follow._superClass_in_classDecl134);
				superClass1=superClass();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(6); }

			DebugLocation(294, 42);
			registerClass((clase!=null?clase.Text:null), superClass1);
			DebugLocation(294, 96);
			Match(input,57,Follow._57_in_classDecl140); 
			DebugLocation(294, 100);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:294:100: ( vars )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
			int LA7_0 = input.LA(1);

			if ((LA7_0==54))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:294:100: vars
				{
				DebugLocation(294, 100);
				PushFollow(Follow._vars_in_classDecl142);
				vars();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(7); }

			DebugLocation(294, 106);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:294:106: ( methods )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, decisionCanBacktrack[8]);
			int LA8_0 = input.LA(1);

			if ((LA8_0==47))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:294:106: methods
				{
				DebugLocation(294, 106);
				PushFollow(Follow._methods_in_classDecl145);
				methods();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(294, 115);
			Match(input,58,Follow._58_in_classDecl148); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("classDecl", 4);
			LeaveRule("classDecl", 4);
			LeaveRule_classDecl();
	    }
	 	DebugLocation(294, 117);
		} finally { DebugExitRule(GrammarFileName, "classDecl"); }
		return;

	}
	// $ANTLR end "classDecl"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_superClass() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_superClass() {}

	// $ANTLR start "superClass"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:296:1: superClass returns [string superClase] : 'extends' ID ;
	[GrammarRule("superClass")]
	private string superClass()
	{
		EnterRule_superClass();
		EnterRule("superClass", 5);
		TraceIn("superClass", 5);
	    string superClase = default(string);


	    IToken ID2 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "superClass");
		DebugLocation(296, 77);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:296:38: ( 'extends' ID )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:296:40: 'extends' ID
			{
			DebugLocation(296, 40);
			Match(input,43,Follow._43_in_superClass158); 
			DebugLocation(296, 50);
			ID2=(IToken)Match(input,ID,Follow._ID_in_superClass160); 
			DebugLocation(296, 53);
			superClase = (ID2!=null?ID2.Text:null);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("superClass", 5);
			LeaveRule("superClass", 5);
			LeaveRule_superClass();
	    }
	 	DebugLocation(296, 77);
		} finally { DebugExitRule(GrammarFileName, "superClass"); }
		return superClase;

	}
	// $ANTLR end "superClass"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_vars() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_vars() {}

	// $ANTLR start "vars"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:298:1: vars : 'vars' ':' ( varDecl )* ;
	[GrammarRule("vars")]
	private void vars()
	{
		EnterRule_vars();
		EnterRule("vars", 6);
		TraceIn("vars", 6);
		try { DebugEnterRule(GrammarFileName, "vars");
		DebugLocation(298, 22);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:299:2: ( 'vars' ':' ( varDecl )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:299:4: 'vars' ':' ( varDecl )*
			{
			DebugLocation(299, 4);
			Match(input,54,Follow._54_in_vars171); 
			DebugLocation(299, 11);
			Match(input,24,Follow._24_in_vars173); 
			DebugLocation(299, 15);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:299:15: ( varDecl )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, decisionCanBacktrack[9]);
				int LA9_0 = input.LA(1);

				if ((LA9_0==ID))
				{
					int LA9_2 = input.LA(2);

					if ((LA9_2==ID))
					{
						alt9 = 1;
					}


				}
				else if (((LA9_0>=32 && LA9_0<=34)||LA9_0==38||LA9_0==41||LA9_0==45))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:299:15: varDecl
					{
					DebugLocation(299, 15);
					PushFollow(Follow._varDecl_in_vars175);
					varDecl();
					PopFollow();


					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("vars", 6);
			LeaveRule("vars", 6);
			LeaveRule_vars();
	    }
	 	DebugLocation(299, 22);
		} finally { DebugExitRule(GrammarFileName, "vars"); }
		return;

	}
	// $ANTLR end "vars"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_varDecl() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_varDecl() {}

	// $ANTLR start "varDecl"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:301:1: varDecl : (t= primitiveType |t= referenceType ) ID ';' ;
	[GrammarRule("varDecl")]
	private void varDecl()
	{
		EnterRule_varDecl();
		EnterRule("varDecl", 7);
		TraceIn("varDecl", 7);
	    IToken ID3 = default(IToken);
	    string t = default(string);


	    	ClassSymbol clase;

		try { DebugEnterRule(GrammarFileName, "varDecl");
		DebugLocation(301, 138);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:305:5: ( (t= primitiveType |t= referenceType ) ID ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:305:9: (t= primitiveType |t= referenceType ) ID ';'
			{
			DebugLocation(305, 9);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:305:9: (t= primitiveType |t= referenceType )
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			int LA10_0 = input.LA(1);

			if ((LA10_0==38||LA10_0==41||LA10_0==45))
			{
				alt10 = 1;
			}
			else if ((LA10_0==ID||(LA10_0>=32 && LA10_0<=34)))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:305:10: t= primitiveType
				{
				DebugLocation(305, 12);
				PushFollow(Follow._primitiveType_in_varDecl200);
				t=primitiveType();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:305:30: t= referenceType
				{
				DebugLocation(305, 32);
				PushFollow(Follow._referenceType_in_varDecl208);
				t=referenceType();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(305, 49);
			clase = directory.findType(t);
			DebugLocation(305, 88);
			ID3=(IToken)Match(input,ID,Follow._ID_in_varDecl213); 
			DebugLocation(305, 91);
			registerVariableInScope((ID3!=null?ID3.Text:null), clase);
			DebugLocation(305, 135);
			Match(input,25,Follow._25_in_varDecl217); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("varDecl", 7);
			LeaveRule("varDecl", 7);
			LeaveRule_varDecl();
	    }
	 	DebugLocation(305, 138);
		} finally { DebugExitRule(GrammarFileName, "varDecl"); }
		return;

	}
	// $ANTLR end "varDecl"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_primitiveType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_primitiveType() {}

	// $ANTLR start "primitiveType"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:307:1: primitiveType returns [string tipo] : t= ( 'int' | 'char' | 'double' ) ;
	[GrammarRule("primitiveType")]
	private string primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 8);
		TraceIn("primitiveType", 8);
	    string tipo = default(string);


	    IToken t = default(IToken);

		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(307, 84);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:307:35: (t= ( 'int' | 'char' | 'double' ) )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:307:37: t= ( 'int' | 'char' | 'double' )
			{
			DebugLocation(307, 39);

			t=(IToken)input.LT(1);
			if (input.LA(1)==38||input.LA(1)==41||input.LA(1)==45)
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(307, 67);
			tipo = (t!=null?t.Text:null);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("primitiveType", 8);
			LeaveRule("primitiveType", 8);
			LeaveRule_primitiveType();
	    }
	 	DebugLocation(307, 84);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return tipo;

	}
	// $ANTLR end "primitiveType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_referenceType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_referenceType() {}

	// $ANTLR start "referenceType"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:309:1: referenceType returns [string tipo] : ( vectorType | ID ) ;
	[GrammarRule("referenceType")]
	private string referenceType()
	{
		EnterRule_referenceType();
		EnterRule("referenceType", 9);
		TraceIn("referenceType", 9);
	    string tipo = default(string);


	    IToken ID5 = default(IToken);
	    string vectorType4 = default(string);

		try { DebugEnterRule(GrammarFileName, "referenceType");
		DebugLocation(309, 4);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:309:35: ( ( vectorType | ID ) )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:310:5: ( vectorType | ID )
			{
			DebugLocation(310, 5);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:310:5: ( vectorType | ID )
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
			int LA11_0 = input.LA(1);

			if (((LA11_0>=32 && LA11_0<=34)))
			{
				alt11 = 1;
			}
			else if ((LA11_0==ID))
			{
				alt11 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 11, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:310:6: vectorType
				{
				DebugLocation(310, 6);
				PushFollow(Follow._vectorType_in_referenceType262);
				vectorType4=vectorType();
				PopFollow();

				DebugLocation(310, 17);
				tipo = vectorType4;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:311:7: ID
				{
				DebugLocation(311, 7);
				ID5=(IToken)Match(input,ID,Follow._ID_in_referenceType272); 
				DebugLocation(311, 10);
				tipo = (ID5!=null?ID5.Text:null);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("referenceType", 9);
			LeaveRule("referenceType", 9);
			LeaveRule_referenceType();
	    }
	 	DebugLocation(313, 4);
		} finally { DebugExitRule(GrammarFileName, "referenceType"); }
		return tipo;

	}
	// $ANTLR end "referenceType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_vectorType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_vectorType() {}

	// $ANTLR start "vectorType"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:315:1: vectorType returns [string t] : ( 'CharVector' | 'IntVector' | 'DoubleVector' );
	[GrammarRule("vectorType")]
	private string vectorType()
	{
		EnterRule_vectorType();
		EnterRule("vectorType", 10);
		TraceIn("vectorType", 10);
	    string t = default(string);


		try { DebugEnterRule(GrammarFileName, "vectorType");
		DebugLocation(315, 4);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:315:29: ( 'CharVector' | 'IntVector' | 'DoubleVector' )
			int alt12=3;
			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
			switch (input.LA(1))
			{
			case 32:
				{
				alt12 = 1;
				}
				break;
			case 34:
				{
				alt12 = 2;
				}
				break;
			case 33:
				{
				alt12 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:316:5: 'CharVector'
				{
				DebugLocation(316, 5);
				Match(input,32,Follow._32_in_vectorType304); 
				DebugLocation(316, 18);
				t = SymbolTable.charVectorName;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:317:7: 'IntVector'
				{
				DebugLocation(317, 7);
				Match(input,34,Follow._34_in_vectorType314); 
				DebugLocation(317, 19);
				t = SymbolTable.integerVectorName;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:318:7: 'DoubleVector'
				{
				DebugLocation(318, 7);
				Match(input,33,Follow._33_in_vectorType324); 
				DebugLocation(318, 22);
				t = SymbolTable.doubleVectorName;

				}
				break;

			}
		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("vectorType", 10);
			LeaveRule("vectorType", 10);
			LeaveRule_vectorType();
	    }
	 	DebugLocation(319, 4);
		} finally { DebugExitRule(GrammarFileName, "vectorType"); }
		return t;

	}
	// $ANTLR end "vectorType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_voidType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_voidType() {}

	// $ANTLR start "voidType"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:321:1: voidType returns [string tipo] : t= 'void' ;
	[GrammarRule("voidType")]
	private string voidType()
	{
		EnterRule_voidType();
		EnterRule("voidType", 11);
		TraceIn("voidType", 11);
	    string tipo = default(string);


	    IToken t = default(IToken);

		try { DebugEnterRule(GrammarFileName, "voidType");
		DebugLocation(321, 60);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:321:30: (t= 'void' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:321:32: t= 'void'
			{
			DebugLocation(321, 34);
			t=(IToken)Match(input,55,Follow._55_in_voidType345); 
			DebugLocation(321, 43);
			tipo = (t!=null?t.Text:null);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("voidType", 11);
			LeaveRule("voidType", 11);
			LeaveRule_voidType();
	    }
	 	DebugLocation(321, 60);
		} finally { DebugExitRule(GrammarFileName, "voidType"); }
		return tipo;

	}
	// $ANTLR end "voidType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_formalParamType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_formalParamType() {}

	// $ANTLR start "formalParamType"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:323:1: formalParamType returns [string tipo] : (t= primitiveType |t= referenceType ) ;
	[GrammarRule("formalParamType")]
	private string formalParamType()
	{
		EnterRule_formalParamType();
		EnterRule("formalParamType", 12);
		TraceIn("formalParamType", 12);
	    string tipo = default(string);


	    string t = default(string);

		try { DebugEnterRule(GrammarFileName, "formalParamType");
		DebugLocation(323, 23);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:323:37: ( (t= primitiveType |t= referenceType ) )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:323:39: (t= primitiveType |t= referenceType )
			{
			DebugLocation(323, 39);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:323:39: (t= primitiveType |t= referenceType )
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, decisionCanBacktrack[13]);
			int LA13_0 = input.LA(1);

			if ((LA13_0==38||LA13_0==41||LA13_0==45))
			{
				alt13 = 1;
			}
			else if ((LA13_0==ID||(LA13_0>=32 && LA13_0<=34)))
			{
				alt13 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:323:40: t= primitiveType
				{
				DebugLocation(323, 42);
				PushFollow(Follow._primitiveType_in_formalParamType362);
				t=primitiveType();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:324:8: t= referenceType
				{
				DebugLocation(324, 10);
				PushFollow(Follow._referenceType_in_formalParamType376);
				t=referenceType();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(325, 6);
			tipo = t;

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("formalParamType", 12);
			LeaveRule("formalParamType", 12);
			LeaveRule_formalParamType();
	    }
	 	DebugLocation(325, 23);
		} finally { DebugExitRule(GrammarFileName, "formalParamType"); }
		return tipo;

	}
	// $ANTLR end "formalParamType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_methods() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_methods() {}

	// $ANTLR start "methods"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:327:1: methods : 'methods' ':' ( methodDeclaration )* ;
	[GrammarRule("methods")]
	private void methods()
	{
		EnterRule_methods();
		EnterRule("methods", 13);
		TraceIn("methods", 13);
		try { DebugEnterRule(GrammarFileName, "methods");
		DebugLocation(327, 35);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:328:2: ( 'methods' ':' ( methodDeclaration )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:328:4: 'methods' ':' ( methodDeclaration )*
			{
			DebugLocation(328, 4);
			Match(input,47,Follow._47_in_methods395); 
			DebugLocation(328, 14);
			Match(input,24,Follow._24_in_methods397); 
			DebugLocation(328, 18);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:328:18: ( methodDeclaration )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, decisionCanBacktrack[14]);
				int LA14_0 = input.LA(1);

				if ((LA14_0==55))
				{
					int LA14_1 = input.LA(2);

					if ((LA14_1==ID))
					{
						alt14 = 1;
					}


				}
				else if ((LA14_0==ID||(LA14_0>=32 && LA14_0<=34)||LA14_0==38||LA14_0==41||LA14_0==45))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:328:18: methodDeclaration
					{
					DebugLocation(328, 18);
					PushFollow(Follow._methodDeclaration_in_methods399);
					methodDeclaration();
					PopFollow();


					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("methods", 13);
			LeaveRule("methods", 13);
			LeaveRule_methods();
	    }
	 	DebugLocation(328, 35);
		} finally { DebugExitRule(GrammarFileName, "methods"); }
		return;

	}
	// $ANTLR end "methods"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_methodDeclaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_methodDeclaration() {}

	// $ANTLR start "methodDeclaration"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:330:1: methodDeclaration : (tRet= primitiveType |tRet= referenceType |tRet= voidType ) ID '(' ( formalParameters )? ')' '{' ( vars )? someStatements '}' ;
	[GrammarRule("methodDeclaration")]
	private void methodDeclaration()
	{
		EnterRule_methodDeclaration();
		EnterRule("methodDeclaration", 14);
		TraceIn("methodDeclaration", 14);
	    IToken ID6 = default(IToken);
	    string tRet = default(string);


	    	ClassSymbol tipoRetorno;

		try { DebugEnterRule(GrammarFileName, "methodDeclaration");
		DebugLocation(330, 1);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:334:3: ( (tRet= primitiveType |tRet= referenceType |tRet= voidType ) ID '(' ( formalParameters )? ')' '{' ( vars )? someStatements '}' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:334:3: (tRet= primitiveType |tRet= referenceType |tRet= voidType ) ID '(' ( formalParameters )? ')' '{' ( vars )? someStatements '}'
			{
			DebugLocation(334, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:334:3: (tRet= primitiveType |tRet= referenceType |tRet= voidType )
			int alt15=3;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, decisionCanBacktrack[15]);
			switch (input.LA(1))
			{
			case 38:
			case 41:
			case 45:
				{
				alt15 = 1;
				}
				break;
			case ID:
			case 32:
			case 33:
			case 34:
				{
				alt15 = 2;
				}
				break;
			case 55:
				{
				alt15 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:334:4: tRet= primitiveType
				{
				DebugLocation(334, 9);
				PushFollow(Follow._primitiveType_in_methodDeclaration418);
				tRet=primitiveType();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:334:27: tRet= referenceType
				{
				DebugLocation(334, 32);
				PushFollow(Follow._referenceType_in_methodDeclaration426);
				tRet=referenceType();
				PopFollow();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:334:50: tRet= voidType
				{
				DebugLocation(334, 55);
				PushFollow(Follow._voidType_in_methodDeclaration434);
				tRet=voidType();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(334, 67);
			tipoRetorno = directory.findType(tRet);
			DebugLocation(335, 2);
			ID6=(IToken)Match(input,ID,Follow._ID_in_methodDeclaration441); 
			DebugLocation(335, 5);
			registrarMetodo(tipoRetorno, (ID6!=null?ID6.Text:null));
			DebugLocation(336, 2);
			Match(input,16,Follow._16_in_methodDeclaration447); 
			DebugLocation(336, 6);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:336:6: ( formalParameters )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, decisionCanBacktrack[16]);
			int LA16_0 = input.LA(1);

			if ((LA16_0==ID||(LA16_0>=32 && LA16_0<=34)||LA16_0==38||LA16_0==41||LA16_0==45))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:336:6: formalParameters
				{
				DebugLocation(336, 6);
				PushFollow(Follow._formalParameters_in_methodDeclaration449);
				formalParameters();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(336, 24);
			Match(input,17,Follow._17_in_methodDeclaration452); 
			DebugLocation(337, 2);
			Match(input,57,Follow._57_in_methodDeclaration456); 
			DebugLocation(337, 6);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:337:6: ( vars )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, decisionCanBacktrack[17]);
			int LA17_0 = input.LA(1);

			if ((LA17_0==54))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:337:6: vars
				{
				DebugLocation(337, 6);
				PushFollow(Follow._vars_in_methodDeclaration458);
				vars();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(337, 12);
			PushFollow(Follow._someStatements_in_methodDeclaration461);
			someStatements();
			PopFollow();

			DebugLocation(337, 27);
			Match(input,58,Follow._58_in_methodDeclaration463); 
			DebugLocation(338, 2);
			actualScope = ((MethodSymbol)actualScope).enclosingScope;

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("methodDeclaration", 14);
			LeaveRule("methodDeclaration", 14);
			LeaveRule_methodDeclaration();
	    }
	 	DebugLocation(339, 1);
		} finally { DebugExitRule(GrammarFileName, "methodDeclaration"); }
		return;

	}
	// $ANTLR end "methodDeclaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_formalParam() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_formalParam() {}

	// $ANTLR start "formalParam"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:341:1: formalParam : t= formalParamType ID ;
	[GrammarRule("formalParam")]
	private void formalParam()
	{
		EnterRule_formalParam();
		EnterRule("formalParam", 15);
		TraceIn("formalParam", 15);
	    IToken ID7 = default(IToken);
	    string t = default(string);

		try { DebugEnterRule(GrammarFileName, "formalParam");
		DebugLocation(341, 81);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:341:12: (t= formalParamType ID )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:341:14: t= formalParamType ID
			{
			DebugLocation(341, 16);
			PushFollow(Follow._formalParamType_in_formalParam481);
			t=formalParamType();
			PopFollow();

			DebugLocation(341, 34);
			ID7=(IToken)Match(input,ID,Follow._ID_in_formalParam483); 
			DebugLocation(341, 37);
			registerFormalParameter((ID7!=null?ID7.Text:null), t);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("formalParam", 15);
			LeaveRule("formalParam", 15);
			LeaveRule_formalParam();
	    }
	 	DebugLocation(341, 81);
		} finally { DebugExitRule(GrammarFileName, "formalParam"); }
		return;

	}
	// $ANTLR end "formalParam"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_formalParameters() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_formalParameters() {}

	// $ANTLR start "formalParameters"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:343:1: formalParameters : t= formalParam ( ',' formalParam )* ;
	[GrammarRule("formalParameters")]
	private void formalParameters()
	{
		EnterRule_formalParameters();
		EnterRule("formalParameters", 16);
		TraceIn("formalParameters", 16);
		try { DebugEnterRule(GrammarFileName, "formalParameters");
		DebugLocation(343, 38);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:344:4: (t= formalParam ( ',' formalParam )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:344:4: t= formalParam ( ',' formalParam )*
			{
			DebugLocation(344, 6);
			PushFollow(Follow._formalParam_in_formalParameters499);
			formalParam();
			PopFollow();

			DebugLocation(344, 20);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:344:20: ( ',' formalParam )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, decisionCanBacktrack[18]);
				int LA18_0 = input.LA(1);

				if ((LA18_0==20))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:344:21: ',' formalParam
					{
					DebugLocation(344, 21);
					Match(input,20,Follow._20_in_formalParameters502); 
					DebugLocation(344, 25);
					PushFollow(Follow._formalParam_in_formalParameters504);
					formalParam();
					PopFollow();


					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("formalParameters", 16);
			LeaveRule("formalParameters", 16);
			LeaveRule_formalParameters();
	    }
	 	DebugLocation(344, 38);
		} finally { DebugExitRule(GrammarFileName, "formalParameters"); }
		return;

	}
	// $ANTLR end "formalParameters"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_someStatements() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_someStatements() {}

	// $ANTLR start "someStatements"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:346:1: someStatements : ( statement )* ;
	[GrammarRule("someStatements")]
	private void someStatements()
	{
		EnterRule_someStatements();
		EnterRule("someStatements", 17);
		TraceIn("someStatements", 17);
		try { DebugEnterRule(GrammarFileName, "someStatements");
		DebugLocation(346, 13);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:347:2: ( ( statement )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:347:4: ( statement )*
			{
			DebugLocation(347, 4);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:347:4: ( statement )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, decisionCanBacktrack[19]);
				int LA19_0 = input.LA(1);

				if ((LA19_0==ID||LA19_0==25||LA19_0==44||(LA19_0>=50 && LA19_0<=53)||LA19_0==56))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:347:4: statement
					{
					DebugLocation(347, 4);
					PushFollow(Follow._statement_in_someStatements516);
					statement();
					PopFollow();


					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("someStatements", 17);
			LeaveRule("someStatements", 17);
			LeaveRule_someStatements();
	    }
	 	DebugLocation(347, 13);
		} finally { DebugExitRule(GrammarFileName, "someStatements"); }
		return;

	}
	// $ANTLR end "someStatements"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_statement() {}

	// $ANTLR start "statement"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:349:1: statement : ( assignment | invoke ';' | if_inst | while_inst | return_inst | read | print | ';' );
	[GrammarRule("statement")]
	private void statement()
	{
		EnterRule_statement();
		EnterRule("statement", 18);
		TraceIn("statement", 18);
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(349, 7);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:349:11: ( assignment | invoke ';' | if_inst | while_inst | return_inst | read | print | ';' )
			int alt20=8;
			try { DebugEnterDecision(20, decisionCanBacktrack[20]);
			switch (input.LA(1))
			{
			case ID:
				{
				switch (input.LA(2))
				{
				case 22:
					{
					int LA20_9 = input.LA(3);

					if ((LA20_9==ID))
					{
						int LA20_11 = input.LA(4);

						if ((LA20_11==28))
						{
							alt20 = 1;
						}
						else if ((LA20_11==16))
						{
							alt20 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 20, 11, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 20, 9, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 28:
				case 35:
					{
					alt20 = 1;
					}
					break;
				case 16:
					{
					alt20 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 20, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case 53:
				{
				alt20 = 1;
				}
				break;
			case 44:
				{
				alt20 = 3;
				}
				break;
			case 56:
				{
				alt20 = 4;
				}
				break;
			case 52:
				{
				alt20 = 5;
				}
				break;
			case 51:
				{
				alt20 = 6;
				}
				break;
			case 50:
				{
				alt20 = 7;
				}
				break;
			case 25:
				{
				alt20 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:349:13: assignment
				{
				DebugLocation(349, 13);
				PushFollow(Follow._assignment_in_statement525);
				assignment();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:350:5: invoke ';'
				{
				DebugLocation(350, 5);
				PushFollow(Follow._invoke_in_statement531);
				invoke();
				PopFollow();

				DebugLocation(350, 12);
				Match(input,25,Follow._25_in_statement533); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:351:5: if_inst
				{
				DebugLocation(351, 5);
				PushFollow(Follow._if_inst_in_statement539);
				if_inst();
				PopFollow();


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:352:5: while_inst
				{
				DebugLocation(352, 5);
				PushFollow(Follow._while_inst_in_statement545);
				while_inst();
				PopFollow();


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:353:5: return_inst
				{
				DebugLocation(353, 5);
				PushFollow(Follow._return_inst_in_statement551);
				return_inst();
				PopFollow();


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:354:5: read
				{
				DebugLocation(354, 5);
				PushFollow(Follow._read_in_statement557);
				read();
				PopFollow();


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:355:5: print
				{
				DebugLocation(355, 5);
				PushFollow(Follow._print_in_statement563);
				print();
				PopFollow();


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:356:5: ';'
				{
				DebugLocation(356, 5);
				Match(input,25,Follow._25_in_statement569); 

				}
				break;

			}
		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("statement", 18);
			LeaveRule("statement", 18);
			LeaveRule_statement();
	    }
	 	DebugLocation(356, 7);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return;

	}
	// $ANTLR end "statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_assignment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_assignment() {}

	// $ANTLR start "assignment"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:358:1: assignment : designator '=' expression ';' ;
	[GrammarRule("assignment")]
	private void assignment()
	{
		EnterRule_assignment();
		EnterRule("assignment", 19);
		TraceIn("assignment", 19);
		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(358, 1);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:359:2: ( designator '=' expression ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:359:4: designator '=' expression ';'
			{
			DebugLocation(359, 4);
			PushFollow(Follow._designator_in_assignment582);
			designator();
			PopFollow();

			DebugLocation(359, 15);
			Match(input,28,Follow._28_in_assignment584); 
			DebugLocation(359, 19);
			PushFollow(Follow._expression_in_assignment586);
			expression();
			PopFollow();

			DebugLocation(360, 3);
			Match(input,25,Follow._25_in_assignment590); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("assignment", 19);
			LeaveRule("assignment", 19);
			LeaveRule_assignment();
	    }
	 	DebugLocation(361, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return;

	}
	// $ANTLR end "assignment"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_designator() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_designator() {}

	// $ANTLR start "designator"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:363:1: designator : (v= ID |obj= ID '.' var= ID | 'this' '.' var= ID | ( ID '[' expression ']' ) );
	[GrammarRule("designator")]
	private void designator()
	{
		EnterRule_designator();
		EnterRule("designator", 20);
		TraceIn("designator", 20);
	    IToken v = default(IToken);
	    IToken obj = default(IToken);
	    IToken var = default(IToken);
	    IToken ID8 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "designator");
		DebugLocation(363, 1);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:364:2: (v= ID |obj= ID '.' var= ID | 'this' '.' var= ID | ( ID '[' expression ']' ) )
			int alt21=4;
			try { DebugEnterDecision(21, decisionCanBacktrack[21]);
			int LA21_0 = input.LA(1);

			if ((LA21_0==ID))
			{
				switch (input.LA(2))
				{
				case 22:
					{
					alt21 = 2;
					}
					break;
				case 35:
					{
					alt21 = 4;
					}
					break;
				case 17:
				case 28:
					{
					alt21 = 1;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 21, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA21_0==53))
			{
				alt21 = 3;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:365:3: v= ID
				{
				DebugLocation(365, 5);
				v=(IToken)Match(input,ID,Follow._ID_in_designator610); 
				DebugLocation(365, 10);
				verifyVariableCanBeAccessed((v!=null?v.Text:null)); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:366:5: obj= ID '.' var= ID
				{
				DebugLocation(366, 9);
				obj=(IToken)Match(input,ID,Follow._ID_in_designator623); 
				DebugLocation(366, 15);
				Match(input,22,Follow._22_in_designator626); 
				DebugLocation(366, 23);
				var=(IToken)Match(input,ID,Follow._ID_in_designator632); 
				DebugLocation(366, 28);
				verifyObjectAndInstVariableDefined((obj!=null?obj.Text:null), (var!=null?var.Text:null)); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:367:5: 'this' '.' var= ID
				{
				DebugLocation(367, 5);
				Match(input,53,Follow._53_in_designator641); 
				DebugLocation(367, 12);
				Match(input,22,Follow._22_in_designator643); 
				DebugLocation(367, 20);
				var=(IToken)Match(input,ID,Follow._ID_in_designator649); 
				DebugLocation(367, 27);
				verifyInstanceVariableDefinedInThis((var!=null?var.Text:null));

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:368:5: ( ID '[' expression ']' )
				{
				DebugLocation(368, 5);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:368:5: ( ID '[' expression ']' )
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:368:6: ID '[' expression ']'
				{
				DebugLocation(368, 6);
				ID8=(IToken)Match(input,ID,Follow._ID_in_designator664); 
				DebugLocation(368, 9);
				Match(input,35,Follow._35_in_designator666); 
				DebugLocation(368, 13);
				PushFollow(Follow._expression_in_designator668);
				expression();
				PopFollow();

				DebugLocation(368, 24);
				Match(input,36,Follow._36_in_designator670); 

				}

				DebugLocation(369, 3);

						verifyIsVector((ID8!=null?ID8.Text:null));
						
						//TODO verificar que el resultado de la expresion es un entero
						

				}
				break;

			}
		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("designator", 20);
			LeaveRule("designator", 20);
			LeaveRule_designator();
	    }
	 	DebugLocation(374, 1);
		} finally { DebugExitRule(GrammarFileName, "designator"); }
		return;

	}
	// $ANTLR end "designator"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_invoke() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_invoke() {}

	// $ANTLR start "invoke"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:377:1: invoke : ( ID actualParameters | ID '.' ID actualParameters );
	[GrammarRule("invoke")]
	private void invoke()
	{
		EnterRule_invoke();
		EnterRule("invoke", 21);
		TraceIn("invoke", 21);
		try { DebugEnterRule(GrammarFileName, "invoke");
		DebugLocation(377, 2);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:377:8: ( ID actualParameters | ID '.' ID actualParameters )
			int alt22=2;
			try { DebugEnterDecision(22, decisionCanBacktrack[22]);
			int LA22_0 = input.LA(1);

			if ((LA22_0==ID))
			{
				int LA22_1 = input.LA(2);

				if ((LA22_1==22))
				{
					alt22 = 2;
				}
				else if ((LA22_1==16))
				{
					alt22 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 22, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 22, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:377:10: ID actualParameters
				{
				DebugLocation(377, 10);
				Match(input,ID,Follow._ID_in_invoke690); 
				DebugLocation(377, 13);
				PushFollow(Follow._actualParameters_in_invoke692);
				actualParameters();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:378:5: ID '.' ID actualParameters
				{
				DebugLocation(378, 5);
				Match(input,ID,Follow._ID_in_invoke700); 
				DebugLocation(378, 8);
				Match(input,22,Follow._22_in_invoke702); 
				DebugLocation(378, 12);
				Match(input,ID,Follow._ID_in_invoke704); 
				DebugLocation(378, 15);
				PushFollow(Follow._actualParameters_in_invoke706);
				actualParameters();
				PopFollow();


				}
				break;

			}
		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("invoke", 21);
			LeaveRule("invoke", 21);
			LeaveRule_invoke();
	    }
	 	DebugLocation(379, 2);
		} finally { DebugExitRule(GrammarFileName, "invoke"); }
		return;

	}
	// $ANTLR end "invoke"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_if_inst() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_if_inst() {}

	// $ANTLR start "if_inst"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:381:1: if_inst : 'if' '(' expression ')' '{' someStatements '}' ( 'else' '{' someStatements '}' )? ;
	[GrammarRule("if_inst")]
	private void if_inst()
	{
		EnterRule_if_inst();
		EnterRule("if_inst", 22);
		TraceIn("if_inst", 22);
		try { DebugEnterRule(GrammarFileName, "if_inst");
		DebugLocation(381, 89);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:381:9: ( 'if' '(' expression ')' '{' someStatements '}' ( 'else' '{' someStatements '}' )? )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:381:11: 'if' '(' expression ')' '{' someStatements '}' ( 'else' '{' someStatements '}' )?
			{
			DebugLocation(381, 11);
			Match(input,44,Follow._44_in_if_inst719); 
			DebugLocation(381, 16);
			Match(input,16,Follow._16_in_if_inst721); 
			DebugLocation(381, 20);
			PushFollow(Follow._expression_in_if_inst723);
			expression();
			PopFollow();

			DebugLocation(381, 31);
			Match(input,17,Follow._17_in_if_inst725); 
			DebugLocation(381, 35);
			Match(input,57,Follow._57_in_if_inst727); 
			DebugLocation(381, 39);
			PushFollow(Follow._someStatements_in_if_inst729);
			someStatements();
			PopFollow();

			DebugLocation(381, 54);
			Match(input,58,Follow._58_in_if_inst731); 
			DebugLocation(381, 58);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:381:58: ( 'else' '{' someStatements '}' )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, decisionCanBacktrack[23]);
			int LA23_0 = input.LA(1);

			if ((LA23_0==42))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:381:59: 'else' '{' someStatements '}'
				{
				DebugLocation(381, 59);
				Match(input,42,Follow._42_in_if_inst734); 
				DebugLocation(381, 66);
				Match(input,57,Follow._57_in_if_inst736); 
				DebugLocation(381, 70);
				PushFollow(Follow._someStatements_in_if_inst738);
				someStatements();
				PopFollow();

				DebugLocation(381, 85);
				Match(input,58,Follow._58_in_if_inst740); 

				}
				break;

			}
			} finally { DebugExitSubRule(23); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("if_inst", 22);
			LeaveRule("if_inst", 22);
			LeaveRule_if_inst();
	    }
	 	DebugLocation(381, 89);
		} finally { DebugExitRule(GrammarFileName, "if_inst"); }
		return;

	}
	// $ANTLR end "if_inst"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_while_inst() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_while_inst() {}

	// $ANTLR start "while_inst"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:383:1: while_inst : 'while' '(' expression ')' '{' someStatements '}' ;
	[GrammarRule("while_inst")]
	private void while_inst()
	{
		EnterRule_while_inst();
		EnterRule("while_inst", 23);
		TraceIn("while_inst", 23);
		try { DebugEnterRule(GrammarFileName, "while_inst");
		DebugLocation(383, 62);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:383:12: ( 'while' '(' expression ')' '{' someStatements '}' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:383:14: 'while' '(' expression ')' '{' someStatements '}'
			{
			DebugLocation(383, 14);
			Match(input,56,Follow._56_in_while_inst750); 
			DebugLocation(383, 22);
			Match(input,16,Follow._16_in_while_inst752); 
			DebugLocation(383, 26);
			PushFollow(Follow._expression_in_while_inst754);
			expression();
			PopFollow();

			DebugLocation(383, 37);
			Match(input,17,Follow._17_in_while_inst756); 
			DebugLocation(383, 41);
			Match(input,57,Follow._57_in_while_inst758); 
			DebugLocation(383, 45);
			PushFollow(Follow._someStatements_in_while_inst760);
			someStatements();
			PopFollow();

			DebugLocation(383, 60);
			Match(input,58,Follow._58_in_while_inst762); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("while_inst", 23);
			LeaveRule("while_inst", 23);
			LeaveRule_while_inst();
	    }
	 	DebugLocation(383, 62);
		} finally { DebugExitRule(GrammarFileName, "while_inst"); }
		return;

	}
	// $ANTLR end "while_inst"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_return_inst() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_return_inst() {}

	// $ANTLR start "return_inst"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:385:1: return_inst : 'return' ( expression )? ';' ;
	[GrammarRule("return_inst")]
	private void return_inst()
	{
		EnterRule_return_inst();
		EnterRule("return_inst", 24);
		TraceIn("return_inst", 24);
		try { DebugEnterRule(GrammarFileName, "return_inst");
		DebugLocation(385, 38);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:385:13: ( 'return' ( expression )? ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:385:15: 'return' ( expression )? ';'
			{
			DebugLocation(385, 15);
			Match(input,52,Follow._52_in_return_inst770); 
			DebugLocation(385, 24);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:385:24: ( expression )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, decisionCanBacktrack[24]);
			int LA24_0 = input.LA(1);

			if ((LA24_0==CHAR||LA24_0==DOUBLE||(LA24_0>=ID && LA24_0<=INT)||LA24_0==16||LA24_0==48||LA24_0==53))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:385:24: expression
				{
				DebugLocation(385, 24);
				PushFollow(Follow._expression_in_return_inst772);
				expression();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(385, 36);
			Match(input,25,Follow._25_in_return_inst775); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("return_inst", 24);
			LeaveRule("return_inst", 24);
			LeaveRule_return_inst();
	    }
	 	DebugLocation(385, 38);
		} finally { DebugExitRule(GrammarFileName, "return_inst"); }
		return;

	}
	// $ANTLR end "return_inst"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_read() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_read() {}

	// $ANTLR start "read"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:387:1: read : 'read' '(' designator ')' ';' ;
	[GrammarRule("read")]
	private void read()
	{
		EnterRule_read();
		EnterRule("read", 25);
		TraceIn("read", 25);
		try { DebugEnterRule(GrammarFileName, "read");
		DebugLocation(387, 36);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:387:6: ( 'read' '(' designator ')' ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:387:8: 'read' '(' designator ')' ';'
			{
			DebugLocation(387, 8);
			Match(input,51,Follow._51_in_read783); 
			DebugLocation(387, 15);
			Match(input,16,Follow._16_in_read785); 
			DebugLocation(387, 19);
			PushFollow(Follow._designator_in_read787);
			designator();
			PopFollow();

			DebugLocation(387, 30);
			Match(input,17,Follow._17_in_read789); 
			DebugLocation(387, 34);
			Match(input,25,Follow._25_in_read791); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("read", 25);
			LeaveRule("read", 25);
			LeaveRule_read();
	    }
	 	DebugLocation(387, 36);
		} finally { DebugExitRule(GrammarFileName, "read"); }
		return;

	}
	// $ANTLR end "read"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_print() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_print() {}

	// $ANTLR start "print"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:389:1: print : 'print' '(' expression ')' ';' ;
	[GrammarRule("print")]
	private void print()
	{
		EnterRule_print();
		EnterRule("print", 26);
		TraceIn("print", 26);
		try { DebugEnterRule(GrammarFileName, "print");
		DebugLocation(389, 38);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:389:7: ( 'print' '(' expression ')' ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:389:9: 'print' '(' expression ')' ';'
			{
			DebugLocation(389, 9);
			Match(input,50,Follow._50_in_print799); 
			DebugLocation(389, 17);
			Match(input,16,Follow._16_in_print801); 
			DebugLocation(389, 21);
			PushFollow(Follow._expression_in_print803);
			expression();
			PopFollow();

			DebugLocation(389, 32);
			Match(input,17,Follow._17_in_print805); 
			DebugLocation(389, 36);
			Match(input,25,Follow._25_in_print807); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("print", 26);
			LeaveRule("print", 26);
			LeaveRule_print();
	    }
	 	DebugLocation(389, 38);
		} finally { DebugExitRule(GrammarFileName, "print"); }
		return;

	}
	// $ANTLR end "print"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_actualParameters() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_actualParameters() {}

	// $ANTLR start "actualParameters"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:391:1: actualParameters : '(' ( expression ( ',' expression )* )? ')' ;
	[GrammarRule("actualParameters")]
	private void actualParameters()
	{
		EnterRule_actualParameters();
		EnterRule("actualParameters", 27);
		TraceIn("actualParameters", 27);
		try { DebugEnterRule(GrammarFileName, "actualParameters");
		DebugLocation(391, 42);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:392:2: ( '(' ( expression ( ',' expression )* )? ')' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:392:4: '(' ( expression ( ',' expression )* )? ')'
			{
			DebugLocation(392, 4);
			Match(input,16,Follow._16_in_actualParameters817); 
			DebugLocation(392, 8);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:392:8: ( expression ( ',' expression )* )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, decisionCanBacktrack[26]);
			int LA26_0 = input.LA(1);

			if ((LA26_0==CHAR||LA26_0==DOUBLE||(LA26_0>=ID && LA26_0<=INT)||LA26_0==16||LA26_0==48||LA26_0==53))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:392:9: expression ( ',' expression )*
				{
				DebugLocation(392, 9);
				PushFollow(Follow._expression_in_actualParameters820);
				expression();
				PopFollow();

				DebugLocation(392, 20);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:392:20: ( ',' expression )*
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, decisionCanBacktrack[25]);
					int LA25_0 = input.LA(1);

					if ((LA25_0==20))
					{
						alt25 = 1;
					}


					} finally { DebugExitDecision(25); }
					switch ( alt25 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:392:21: ',' expression
						{
						DebugLocation(392, 21);
						Match(input,20,Follow._20_in_actualParameters823); 
						DebugLocation(392, 25);
						PushFollow(Follow._expression_in_actualParameters825);
						expression();
						PopFollow();


						}
						break;

					default:
						goto loop25;
					}
				}

				loop25:
					;

				} finally { DebugExitSubRule(25); }


				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(392, 40);
			Match(input,17,Follow._17_in_actualParameters831); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("actualParameters", 27);
			LeaveRule("actualParameters", 27);
			LeaveRule_actualParameters();
	    }
	 	DebugLocation(392, 42);
		} finally { DebugExitRule(GrammarFileName, "actualParameters"); }
		return;

	}
	// $ANTLR end "actualParameters"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}

	// $ANTLR start "expression"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:394:1: expression : es ( relOp es )? ;
	[GrammarRule("expression")]
	private void expression()
	{
		EnterRule_expression();
		EnterRule("expression", 28);
		TraceIn("expression", 28);
	    string relOp9 = default(string);

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(394, 111);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:395:2: ( es ( relOp es )? )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:395:4: es ( relOp es )?
			{
			DebugLocation(395, 4);
			PushFollow(Follow._es_in_expression841);
			es();
			PopFollow();

			DebugLocation(395, 7);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:395:7: ( relOp es )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, decisionCanBacktrack[27]);
			int LA27_0 = input.LA(1);

			if ((LA27_0==15||(LA27_0>=26 && LA27_0<=27)||(LA27_0>=29 && LA27_0<=31)))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:395:8: relOp es
				{
				DebugLocation(395, 8);
				PushFollow(Follow._relOp_in_expression844);
				relOp9=relOp();
				PopFollow();

				DebugLocation(395, 14);
				pOperadores.Push(relOp9);
				DebugLocation(395, 51);
				PushFollow(Follow._es_in_expression848);
				es();
				PopFollow();

				DebugLocation(395, 54);
				aplicaOperadorPendienteQueSea(operadoresRelacionales);

				}
				break;

			}
			} finally { DebugExitSubRule(27); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("expression", 28);
			LeaveRule("expression", 28);
			LeaveRule_expression();
	    }
	 	DebugLocation(395, 111);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_es() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_es() {}

	// $ANTLR start "es"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:397:1: es : term (op= ( '+' | '-' | 'or' ) term )* ;
	[GrammarRule("es")]
	private void es()
	{
		EnterRule_es();
		EnterRule("es", 29);
		TraceIn("es", 29);
	    IToken op = default(IToken);

		try { DebugEnterRule(GrammarFileName, "es");
		DebugLocation(397, 4);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:398:2: ( term (op= ( '+' | '-' | 'or' ) term )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:398:4: term (op= ( '+' | '-' | 'or' ) term )*
			{
			DebugLocation(398, 4);
			PushFollow(Follow._term_in_es861);
			term();
			PopFollow();

			DebugLocation(398, 9);
			aplicaOperadorPendienteQueSea(masMenosOr);
			DebugLocation(399, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:399:3: (op= ( '+' | '-' | 'or' ) term )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, decisionCanBacktrack[28]);
				int LA28_0 = input.LA(1);

				if ((LA28_0==19||LA28_0==21||LA28_0==49))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:400:4: op= ( '+' | '-' | 'or' ) term
					{
					DebugLocation(400, 7);

					op=(IToken)input.LT(1);
					if (input.LA(1)==19||input.LA(1)==21||input.LA(1)==49)
					{
						input.Consume();
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(400, 28);
					pOperadores.Push((op!=null?op.Text:null));
					DebugLocation(401, 4);
					PushFollow(Follow._term_in_es894);
					term();
					PopFollow();

					DebugLocation(401, 9);
					aplicaOperadorPendienteQueSea(masMenosOr);

					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("es", 29);
			LeaveRule("es", 29);
			LeaveRule_es();
	    }
	 	DebugLocation(402, 4);
		} finally { DebugExitRule(GrammarFileName, "es"); }
		return;

	}
	// $ANTLR end "es"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_term() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_term() {}

	// $ANTLR start "term"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:404:1: term : factor (op= ( '*' | '/' | 'and' ) factor )* ;
	[GrammarRule("term")]
	private void term()
	{
		EnterRule_term();
		EnterRule("term", 30);
		TraceIn("term", 30);
	    IToken op = default(IToken);

		try { DebugEnterRule(GrammarFileName, "term");
		DebugLocation(404, 4);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:404:6: ( factor (op= ( '*' | '/' | 'and' ) factor )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:404:8: factor (op= ( '*' | '/' | 'and' ) factor )*
			{
			DebugLocation(404, 8);
			PushFollow(Follow._factor_in_term910);
			factor();
			PopFollow();

			DebugLocation(404, 15);
			aplicaOperadorPendienteQueSea(porEntreAnd);
			DebugLocation(405, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:405:3: (op= ( '*' | '/' | 'and' ) factor )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, decisionCanBacktrack[29]);
				int LA29_0 = input.LA(1);

				if ((LA29_0==18||LA29_0==23||LA29_0==37))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:406:4: op= ( '*' | '/' | 'and' ) factor
					{
					DebugLocation(406, 7);

					op=(IToken)input.LT(1);
					if (input.LA(1)==18||input.LA(1)==23||input.LA(1)==37)
					{
						input.Consume();
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(406, 29);
					pOperadores.Push((op!=null?op.Text:null));
					DebugLocation(407, 4);
					PushFollow(Follow._factor_in_term943);
					factor();
					PopFollow();

					DebugLocation(407, 11);
					aplicaOperadorPendienteQueSea(porEntreAnd);

					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("term", 30);
			LeaveRule("term", 30);
			LeaveRule_term();
	    }
	 	DebugLocation(408, 4);
		} finally { DebugExitRule(GrammarFileName, "term"); }
		return;

	}
	// $ANTLR end "term"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_factor() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_factor() {}

	// $ANTLR start "factor"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:410:1: factor : ( invoke |v= ID |obj= ID '.' var= ID | 'this' '.' var= ID | ID '[' expression ']' | INT | CHAR | DOUBLE | '(' expression ')' ( '.' ID )? | 'new' ID '(' ')' | 'new' vectorType '[' expression ']' );
	[GrammarRule("factor")]
	private void factor()
	{
		EnterRule_factor();
		EnterRule("factor", 31);
		TraceIn("factor", 31);
	    IToken v = default(IToken);
	    IToken obj = default(IToken);
	    IToken var = default(IToken);
	    IToken ID10 = default(IToken);
	    IToken INT11 = default(IToken);
	    IToken CHAR12 = default(IToken);
	    IToken DOUBLE13 = default(IToken);
	    IToken ID14 = default(IToken);
	    IToken ID15 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "factor");
		DebugLocation(410, 2);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:410:8: ( invoke |v= ID |obj= ID '.' var= ID | 'this' '.' var= ID | ID '[' expression ']' | INT | CHAR | DOUBLE | '(' expression ')' ( '.' ID )? | 'new' ID '(' ')' | 'new' vectorType '[' expression ']' )
			int alt31=11;
			try { DebugEnterDecision(31, decisionCanBacktrack[31]);
			switch (input.LA(1))
			{
			case ID:
				{
				switch (input.LA(2))
				{
				case 22:
					{
					int LA31_8 = input.LA(3);

					if ((LA31_8==ID))
					{
						int LA31_14 = input.LA(4);

						if ((LA31_14==16))
						{
							alt31 = 1;
						}
						else if ((LA31_14==15||(LA31_14>=17 && LA31_14<=21)||LA31_14==23||(LA31_14>=25 && LA31_14<=27)||(LA31_14>=29 && LA31_14<=31)||(LA31_14>=36 && LA31_14<=37)||LA31_14==49))
						{
							alt31 = 3;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 31, 14, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 31, 8, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 35:
					{
					alt31 = 5;
					}
					break;
				case 16:
					{
					alt31 = 1;
					}
					break;
				case 15:
				case 17:
				case 18:
				case 19:
				case 20:
				case 21:
				case 23:
				case 25:
				case 26:
				case 27:
				case 29:
				case 30:
				case 31:
				case 36:
				case 37:
				case 49:
					{
					alt31 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 31, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case 53:
				{
				alt31 = 4;
				}
				break;
			case INT:
				{
				alt31 = 6;
				}
				break;
			case CHAR:
				{
				alt31 = 7;
				}
				break;
			case DOUBLE:
				{
				alt31 = 8;
				}
				break;
			case 16:
				{
				alt31 = 9;
				}
				break;
			case 48:
				{
				int LA31_7 = input.LA(2);

				if ((LA31_7==ID))
				{
					alt31 = 10;
				}
				else if (((LA31_7>=32 && LA31_7<=34)))
				{
					alt31 = 11;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 31, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 31, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:410:10: invoke
				{
				DebugLocation(410, 10);
				PushFollow(Follow._invoke_in_factor958);
				invoke();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:411:5: v= ID
				{
				DebugLocation(411, 7);
				v=(IToken)Match(input,ID,Follow._ID_in_factor969); 
				DebugLocation(412, 3);

						VariableSymbol varSymbol = getVariable((v!=null?v.Text:null));
						pOperandos.Push(varSymbol);
						

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:416:5: obj= ID '.' var= ID
				{
				DebugLocation(416, 9);
				obj=(IToken)Match(input,ID,Follow._ID_in_factor984); 
				DebugLocation(416, 14);
				Match(input,22,Follow._22_in_factor986); 
				DebugLocation(416, 22);
				var=(IToken)Match(input,ID,Follow._ID_in_factor992); 
				DebugLocation(417, 3);

						VariableSymbol objeto = getVariable((obj!=null?obj.Text:null));
						VariableSymbol field = getField((obj!=null?obj.Text:null), (var!=null?var.Text:null));
						VariableSymbol temp = getNewTemporalVarOfType(field.type.name);
						pOperandos.Push(temp);
						quadruplesList.addGETFIELD(temp.address.ToString(), objeto.address.ToString(), field.address.ToString());
						

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:424:5: 'this' '.' var= ID
				{
				DebugLocation(424, 5);
				Match(input,53,Follow._53_in_factor1003); 
				DebugLocation(424, 12);
				Match(input,22,Follow._22_in_factor1005); 
				DebugLocation(424, 20);
				var=(IToken)Match(input,ID,Follow._ID_in_factor1011); 
				DebugLocation(425, 3);

						VariableSymbol field = getInstanceVariable((var!=null?var.Text:null));
						VariableSymbol temp = getNewTemporalVarOfType(field.type.name);
						pOperandos.Push(temp);
						MethodSymbol method = (MethodSymbol)actualScope;
						quadruplesList.addGETFIELD(temp.address.ToString(), method.getThisParameterAddress(), field.address.ToString());
						

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:432:5: ID '[' expression ']'
				{
				DebugLocation(432, 5);
				ID10=(IToken)Match(input,ID,Follow._ID_in_factor1022); 
				DebugLocation(432, 8);
				Match(input,35,Follow._35_in_factor1024); 
				DebugLocation(432, 12);
				pOperadores.Push("[");
				DebugLocation(432, 37);
				PushFollow(Follow._expression_in_factor1028);
				expression();
				PopFollow();

				DebugLocation(432, 48);
				Match(input,36,Follow._36_in_factor1030); 
				DebugLocation(432, 52);
				pOperadores.Pop();
				DebugLocation(433, 3);

						verifyIsVector((ID10!=null?ID10.Text:null));
						VariableSymbol index = pOperandos.Pop();
						if(!index.type.name.Equals("int")) {
							manageException(new Exception("El subindice del Vector " + (ID10!=null?ID10.Text:null) + " debe ser de tipo int."));
						}
						else {
							VariableSymbol arr = getVariable((ID10!=null?ID10.Text:null));
							string tipo = typeOfVector(arr.type.name);
							VariableSymbol temp = getNewTemporalVarOfType(tipo);
							pOperandos.Push(temp);
							quadruplesList.addGETVECTORELEM(temp.address.ToString(), arr.address.ToString(), index.address.ToString());
						}
						

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:447:5: INT
				{
				DebugLocation(447, 5);
				INT11=(IToken)Match(input,INT,Follow._INT_in_factor1043); 
				DebugLocation(447, 9);
				pushICONST((INT11!=null?INT11.Text:null));

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:448:5: CHAR
				{
				DebugLocation(448, 5);
				CHAR12=(IToken)Match(input,CHAR,Follow._CHAR_in_factor1052); 
				DebugLocation(448, 10);
				pushCCONST((CHAR12!=null?CHAR12.Text:null));

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:449:5: DOUBLE
				{
				DebugLocation(449, 5);
				DOUBLE13=(IToken)Match(input,DOUBLE,Follow._DOUBLE_in_factor1061); 
				DebugLocation(449, 12);
				pushDCONST((DOUBLE13!=null?DOUBLE13.Text:null));

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:450:5: '(' expression ')' ( '.' ID )?
				{
				DebugLocation(450, 5);
				Match(input,16,Follow._16_in_factor1070); 
				DebugLocation(450, 8);
				pOperadores.Push("(");
				DebugLocation(450, 33);
				PushFollow(Follow._expression_in_factor1073);
				expression();
				PopFollow();

				DebugLocation(450, 44);
				Match(input,17,Follow._17_in_factor1075); 
				DebugLocation(450, 48);
				pOperadores.Pop();
				DebugLocation(450, 69);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:450:69: ( '.' ID )?
				int alt30=2;
				try { DebugEnterSubRule(30);
				try { DebugEnterDecision(30, decisionCanBacktrack[30]);
				int LA30_0 = input.LA(1);

				if ((LA30_0==22))
				{
					alt30 = 1;
				}
				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:450:70: '.' ID
					{
					DebugLocation(450, 70);
					Match(input,22,Follow._22_in_factor1080); 
					DebugLocation(450, 74);
					ID14=(IToken)Match(input,ID,Follow._ID_in_factor1082); 
					DebugLocation(450, 77);
					pushFieldOfTemporalVariable((ID14!=null?ID14.Text:null));

					}
					break;

				}
				} finally { DebugExitSubRule(30); }


				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:451:5: 'new' ID '(' ')'
				{
				DebugLocation(451, 5);
				Match(input,48,Follow._48_in_factor1093); 
				DebugLocation(451, 11);
				ID15=(IToken)Match(input,ID,Follow._ID_in_factor1095); 
				DebugLocation(451, 14);
				Match(input,16,Follow._16_in_factor1097); 
				DebugLocation(451, 18);
				Match(input,17,Follow._17_in_factor1099); 
				DebugLocation(452, 3);

						ClassSymbol tipo = directory.findType((ID15!=null?ID15.Text:null));
						VariableSymbol temp = getNewTemporalVarOfType(tipo.name);
						pOperandos.Push(temp);
						quadruplesList.addOBJECT(temp.address.ToString(), tipo.countVariables().ToString());
						

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:460:5: 'new' vectorType '[' expression ']'
				{
				DebugLocation(460, 5);
				Match(input,48,Follow._48_in_factor1116); 
				DebugLocation(460, 11);
				PushFollow(Follow._vectorType_in_factor1118);
				vectorType();
				PopFollow();

				DebugLocation(460, 22);
				Match(input,35,Follow._35_in_factor1120); 
				DebugLocation(460, 26);
				PushFollow(Follow._expression_in_factor1122);
				expression();
				PopFollow();

				DebugLocation(460, 37);
				Match(input,36,Follow._36_in_factor1124); 

				}
				break;

			}
		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("factor", 31);
			LeaveRule("factor", 31);
			LeaveRule_factor();
	    }
	 	DebugLocation(462, 2);
		} finally { DebugExitRule(GrammarFileName, "factor"); }
		return;

	}
	// $ANTLR end "factor"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_relOp() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_relOp() {}

	// $ANTLR start "relOp"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:464:1: relOp returns [string operador] : op= ( '==' | '!=' | '>' | '>=' | '<' | '<=' ) ;
	[GrammarRule("relOp")]
	private string relOp()
	{
		EnterRule_relOp();
		EnterRule("relOp", 32);
		TraceIn("relOp", 32);
	    string operador = default(string);


	    IToken op = default(IToken);

		try { DebugEnterRule(GrammarFileName, "relOp");
		DebugLocation(464, 101);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:464:31: (op= ( '==' | '!=' | '>' | '>=' | '<' | '<=' ) )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:464:34: op= ( '==' | '!=' | '>' | '>=' | '<' | '<=' )
			{
			DebugLocation(464, 37);

			op=(IToken)input.LT(1);
			if (input.LA(1)==15||(input.LA(1)>=26 && input.LA(1)<=27)||(input.LA(1)>=29 && input.LA(1)<=31))
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(464, 79);
			operador = (op!=null?op.Text:null);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("relOp", 32);
			LeaveRule("relOp", 32);
			LeaveRule_relOp();
	    }
	 	DebugLocation(464, 101);
		} finally { DebugExitRule(GrammarFileName, "relOp"); }
		return operador;

	}
	// $ANTLR end "relOp"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _classes_in_program61 = new BitSet(new ulong[]{0xC0800000000000UL});
		public static readonly BitSet _vars_in_program66 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _methods_in_program69 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _mainMethod_in_program72 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _55_in_mainMethod81 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_mainMethod83 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_mainMethod85 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_mainMethod87 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_mainMethod89 = new BitSet(new ulong[]{0x57C100002000400UL});
		public static readonly BitSet _vars_in_mainMethod90 = new BitSet(new ulong[]{0x53C100002000400UL});
		public static readonly BitSet _someStatements_in_mainMethod93 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_mainMethod95 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _40_in_classes106 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_classes108 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _classDecl_in_classes110 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _39_in_classDecl125 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_classDecl131 = new BitSet(new ulong[]{0x200080000000000UL});
		public static readonly BitSet _superClass_in_classDecl134 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_classDecl140 = new BitSet(new ulong[]{0x440800000000000UL});
		public static readonly BitSet _vars_in_classDecl142 = new BitSet(new ulong[]{0x400800000000000UL});
		public static readonly BitSet _methods_in_classDecl145 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_classDecl148 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _43_in_superClass158 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_superClass160 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _54_in_vars171 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_vars173 = new BitSet(new ulong[]{0x224700000402UL});
		public static readonly BitSet _varDecl_in_vars175 = new BitSet(new ulong[]{0x224700000402UL});
		public static readonly BitSet _primitiveType_in_varDecl200 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _referenceType_in_varDecl208 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_varDecl213 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_varDecl217 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_primitiveType236 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _vectorType_in_referenceType262 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_referenceType272 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_vectorType304 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _34_in_vectorType314 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _33_in_vectorType324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _55_in_voidType345 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_formalParamType362 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _referenceType_in_formalParamType376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _47_in_methods395 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_methods397 = new BitSet(new ulong[]{0x80224700000402UL});
		public static readonly BitSet _methodDeclaration_in_methods399 = new BitSet(new ulong[]{0x80224700000402UL});
		public static readonly BitSet _primitiveType_in_methodDeclaration418 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _referenceType_in_methodDeclaration426 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _voidType_in_methodDeclaration434 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_methodDeclaration441 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_methodDeclaration447 = new BitSet(new ulong[]{0x224700020400UL});
		public static readonly BitSet _formalParameters_in_methodDeclaration449 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_methodDeclaration452 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_methodDeclaration456 = new BitSet(new ulong[]{0x57C100002000400UL});
		public static readonly BitSet _vars_in_methodDeclaration458 = new BitSet(new ulong[]{0x53C100002000400UL});
		public static readonly BitSet _someStatements_in_methodDeclaration461 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_methodDeclaration463 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _formalParamType_in_formalParam481 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_formalParam483 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _formalParam_in_formalParameters499 = new BitSet(new ulong[]{0x100002UL});
		public static readonly BitSet _20_in_formalParameters502 = new BitSet(new ulong[]{0x224700000400UL});
		public static readonly BitSet _formalParam_in_formalParameters504 = new BitSet(new ulong[]{0x100002UL});
		public static readonly BitSet _statement_in_someStatements516 = new BitSet(new ulong[]{0x13C100002000402UL});
		public static readonly BitSet _assignment_in_statement525 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _invoke_in_statement531 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_statement533 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _if_inst_in_statement539 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _while_inst_in_statement545 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _return_inst_in_statement551 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _read_in_statement557 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _print_in_statement563 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _25_in_statement569 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _designator_in_assignment582 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _28_in_assignment584 = new BitSet(new ulong[]{0x21000000010C50UL});
		public static readonly BitSet _expression_in_assignment586 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_assignment590 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_designator610 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_designator623 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _22_in_designator626 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_designator632 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _53_in_designator641 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _22_in_designator643 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_designator649 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_designator664 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _35_in_designator666 = new BitSet(new ulong[]{0x21000000010C50UL});
		public static readonly BitSet _expression_in_designator668 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _36_in_designator670 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_invoke690 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _actualParameters_in_invoke692 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_invoke700 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _22_in_invoke702 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_invoke704 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _actualParameters_in_invoke706 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _44_in_if_inst719 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_if_inst721 = new BitSet(new ulong[]{0x21000000010C50UL});
		public static readonly BitSet _expression_in_if_inst723 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_if_inst725 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_if_inst727 = new BitSet(new ulong[]{0x53C100002000400UL});
		public static readonly BitSet _someStatements_in_if_inst729 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_if_inst731 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _42_in_if_inst734 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_if_inst736 = new BitSet(new ulong[]{0x53C100002000400UL});
		public static readonly BitSet _someStatements_in_if_inst738 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_if_inst740 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _56_in_while_inst750 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_while_inst752 = new BitSet(new ulong[]{0x21000000010C50UL});
		public static readonly BitSet _expression_in_while_inst754 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_while_inst756 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_while_inst758 = new BitSet(new ulong[]{0x53C100002000400UL});
		public static readonly BitSet _someStatements_in_while_inst760 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_while_inst762 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _52_in_return_inst770 = new BitSet(new ulong[]{0x21000002010C50UL});
		public static readonly BitSet _expression_in_return_inst772 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_return_inst775 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _51_in_read783 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_read785 = new BitSet(new ulong[]{0x20000000000400UL});
		public static readonly BitSet _designator_in_read787 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_read789 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_read791 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _50_in_print799 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_print801 = new BitSet(new ulong[]{0x21000000010C50UL});
		public static readonly BitSet _expression_in_print803 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_print805 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_print807 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _16_in_actualParameters817 = new BitSet(new ulong[]{0x21000000030C50UL});
		public static readonly BitSet _expression_in_actualParameters820 = new BitSet(new ulong[]{0x120000UL});
		public static readonly BitSet _20_in_actualParameters823 = new BitSet(new ulong[]{0x21000000010C50UL});
		public static readonly BitSet _expression_in_actualParameters825 = new BitSet(new ulong[]{0x120000UL});
		public static readonly BitSet _17_in_actualParameters831 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _es_in_expression841 = new BitSet(new ulong[]{0xEC008002UL});
		public static readonly BitSet _relOp_in_expression844 = new BitSet(new ulong[]{0x21000000010C50UL});
		public static readonly BitSet _es_in_expression848 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _term_in_es861 = new BitSet(new ulong[]{0x2000000280002UL});
		public static readonly BitSet _set_in_es876 = new BitSet(new ulong[]{0x21000000010C50UL});
		public static readonly BitSet _term_in_es894 = new BitSet(new ulong[]{0x2000000280002UL});
		public static readonly BitSet _factor_in_term910 = new BitSet(new ulong[]{0x2000840002UL});
		public static readonly BitSet _set_in_term925 = new BitSet(new ulong[]{0x21000000010C50UL});
		public static readonly BitSet _factor_in_term943 = new BitSet(new ulong[]{0x2000840002UL});
		public static readonly BitSet _invoke_in_factor958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_factor969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_factor984 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _22_in_factor986 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_factor992 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _53_in_factor1003 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _22_in_factor1005 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_factor1011 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_factor1022 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _35_in_factor1024 = new BitSet(new ulong[]{0x21000000010C50UL});
		public static readonly BitSet _expression_in_factor1028 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _36_in_factor1030 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_factor1043 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHAR_in_factor1052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOUBLE_in_factor1061 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _16_in_factor1070 = new BitSet(new ulong[]{0x21000000010C50UL});
		public static readonly BitSet _expression_in_factor1073 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_factor1075 = new BitSet(new ulong[]{0x400002UL});
		public static readonly BitSet _22_in_factor1080 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_factor1082 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _48_in_factor1093 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_factor1095 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_factor1097 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_factor1099 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _48_in_factor1116 = new BitSet(new ulong[]{0x700000000UL});
		public static readonly BitSet _vectorType_in_factor1118 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _35_in_factor1120 = new BitSet(new ulong[]{0x21000000010C50UL});
		public static readonly BitSet _expression_in_factor1122 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _36_in_factor1124 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_relOp1147 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
