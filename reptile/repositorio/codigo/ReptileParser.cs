//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g 2011-11-10 17:31:20

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


	using System;
	using System.IO;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class ReptileParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "BOOL", "CHAR", "COMMENT", "DOUBLE", "ESC_SEQ", "EXPONENT", "HEX_DIGIT", "ID", "INT", "OCTAL_ESC", "UNICODE_ESC", "VOID", "WS", "'!='", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "':'", "';'", "'<'", "'<='", "'='", "'=='", "'>'", "'>='", "'CharVector'", "'DoubleVector'", "'IntVector'", "'Main'", "'['", "']'", "'and'", "'char'", "'class'", "'double'", "'else'", "'extends'", "'if'", "'int'", "'methods'", "'new'", "'or'", "'print'", "'read'", "'return'", "'this'", "'vars'", "'while'", "'{'", "'}'"
	};
	public const int EOF=-1;
	public const int T__17=17;
	public const int T__18=18;
	public const int T__19=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int BOOL=4;
	public const int CHAR=5;
	public const int COMMENT=6;
	public const int DOUBLE=7;
	public const int ESC_SEQ=8;
	public const int EXPONENT=9;
	public const int HEX_DIGIT=10;
	public const int ID=11;
	public const int INT=12;
	public const int OCTAL_ESC=13;
	public const int UNICODE_ESC=14;
	public const int VOID=15;
	public const int WS=16;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public ReptileParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public ReptileParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return ReptileParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g"; } }


	SymbolTable directory;
	Stack<string> pOperadores = new Stack<string>();
	Stack<VariableSymbol> pOperandos = new Stack<VariableSymbol>();
	QuadruplesList quadruplesList = new QuadruplesList();
	string mainClassName = "Main";
	string mainMethodName = "main";

	Scope actualScope;
	ClassSymbol mainClass;

	LinkedList<string> operadoresRelacionales = new LinkedList<string>(new string[] {"==", "!=", ">", "<", ">=", "<="});
	LinkedList<string> masMenosOr = new LinkedList<string>(new string[] {"+", "-", "or"});
	LinkedList<string> porEntreAnd = new LinkedList<string>(new string[] {"*", "/", "and"});

	protected override object RecoverFromMismatchedToken(IIntStream input, int ttype, BitSet follow)
	{
	      throw new MismatchedTokenException(ttype, input);
	}

	public override object RecoverFromMismatchedSet(IIntStream input, RecognitionException e, BitSet follow)
	{
	        throw e;
	}

	void createDirectories() {
		directory = new SymbolTable();
	}

	void defineMainClass() {
		mainClass = new ClassSymbol(mainClassName, null);
		directory.Add(mainClass.name, (ScopeWithMethods)mainClass);
	}

	void registerClass(string className, string superClase) {
		try {
			ClassSymbol clasePadre = null;
			if(superClase != null) {
				try {
					clasePadre = directory.findType(superClase);
				}
				catch(Exception exception) {
					manageException(exception);
				}
			}
			
			ClassSymbol newClass = new ClassSymbol(className, clasePadre);
			directory.Add(newClass.name, newClass);
			actualScope = newClass;
		}
		catch(Exception exception) {
			manageException(exception);	//manejarException
		}
	}

	//usado con metodos y variables
	void registerVariableInScope(string variableName, ClassSymbol tipo) {
		VariableSymbol variable = new VariableSymbol(variableName, tipo);
		if(actualScope is MethodSymbol) {
			((MethodSymbol)actualScope).defineLocalVariable(variableName, variable);
		}
		else {
			actualScope.defineVariable(variable.name, variable);
		}
	}

	void registrarMetodo(ClassSymbol tipoRetorno, string methodName) {
		ScopeWithMethods scope = (ScopeWithMethods)actualScope;
		MethodSymbol methodSymbol = new MethodSymbol(methodName, tipoRetorno, scope);
		scope.defineMethod(methodName, methodSymbol);
		actualScope = methodSymbol;
	}

	void registerFormalParameter(string variableName, string tipo) {
		ClassSymbol tipoParam = directory.findType(tipo);
		VariableSymbol variableSymbol = new VariableSymbol(variableName, tipoParam);
		MethodSymbol methodSymbol = (MethodSymbol) actualScope;	//casting para poder llamar a defineParameter(..)
		methodSymbol.defineParameter(variableName, variableSymbol);
	}

	bool verifyVariableCanBeAccessed(string variable) {
		VariableSymbol varSymbol = actualScope.getVariableSymbol(variable);
		if(varSymbol == null) {
			generateVariableNotFoundError(variable);
			return false;
		}
		return true;
	}

	void generateVariableNotFoundError(string variable) {
			Exception e = new Exception("No se encontro la variable " + variable);
			manageException(e);
	}

	void verifyObjectAndInstVariableDefined(string objeto, string instVar) {
		verifyVariableCanBeAccessed(objeto);
		VariableSymbol obj = actualScope.getVariableSymbol(objeto);
		ClassSymbol tipo = obj.type;
		verifyInstVariableDefinedInClassSymbol(tipo, instVar);
	}

	void verifyInstVariableDefinedInClassSymbol(ClassSymbol tipo, string instVar) {
		VariableSymbol varDeInstancia = tipo.getVariableSymbol(instVar);
		if(varDeInstancia == null) {
			generateInstanceVariableNotFoundError(tipo.name, instVar);
		}
	}

	VariableSymbol getVariable(string variable) {
		verifyVariableCanBeAccessed(variable);
		return actualScope.getVariableSymbol(variable);
	}

	VariableSymbol getField(string objeto, string instVar) {
		verifyObjectAndInstVariableDefined(objeto, instVar);
		VariableSymbol obj = actualScope.getVariableSymbol(objeto);
		ClassSymbol tipo = obj.type;
		VariableSymbol varDeInstancia = tipo.getVariableSymbol(instVar);
		return varDeInstancia;
	}

	MethodSymbol getMethod(string objeto, string method) {
		verifyObjectAndMethodDefined(objeto, method);
		VariableSymbol obj = actualScope.getVariableSymbol(objeto);
		MethodSymbol methodSymbol = obj.type.getMethodSymbol(method);
		return methodSymbol;
	}

	void verifyObjectAndMethodDefined(string objeto, string method) {
		verifyVariableCanBeAccessed(objeto);
		VariableSymbol obj = actualScope.getVariableSymbol(objeto);
		ClassSymbol type = obj.type;
		verifyMethodDefinedInClassSymbol(type, method);
	}

	void verifyMethodDefinedInClassSymbol(ClassSymbol type, string method) {
		MethodSymbol methodSymbol = type.getMethodSymbol(method);
		if(methodSymbol == null) {
			string msg = "Metodo " + method + " no esta definido en la clase " + type.name + " ni en alguna superclase.";
			manageException(new Exception(msg));
		}
	}

	void generateInstanceVariableNotFoundError(string scope, string variable) {
		Exception e = new Exception("No se encontro la variable de instancia " + variable + " en " + scope);
		manageException(e);
	}

	void verifyInstanceVariableDefinedInThis(string var) {
		ScopeWithMethods enclosingScope = ((MethodSymbol)actualScope).enclosingScope;
		VariableSymbol instVariable = enclosingScope.getVariableSymbol(var);
		if(instVariable == null) {
			generateInstanceVariableNotFoundError(enclosingScope.name, var);
		}
	}

	VariableSymbol getInstanceVariable(string var) {
		verifyInstanceVariableDefinedInThis(var);
		ScopeWithMethods enclosingScope = ((MethodSymbol)actualScope).enclosingScope;
		ClassSymbol clase = (ClassSymbol)enclosingScope;
		return clase.getVariableSymbol(var);
	}

	void verifyIsVector(string var) {
		if(verifyVariableCanBeAccessed(var)) {
			VariableSymbol arr = actualScope.getVariableSymbol(var);
			if(!arr.type.isVectorType()) {
				generateIsNotVectorError(arr.name);
			}
		}
	}

	void generateIsNotVectorError(string variable) {
		Exception e = new Exception("La variable " + variable + " no es de ninguna clase Vector y por tanto no tiene definido el operador [] .");
		manageException(e);
	}

	public bool tiposSonCompatiblesEnOperacion() {
		VariableSymbol right = pOperandos.Pop();
		VariableSymbol left = pOperandos.Pop();
		pOperandos.Push(left);
		pOperandos.Push(right);
		string operador = pOperadores.Peek();
		ClassSymbol tipoResultado = directory.resultType(left.type, right.type, operador);
		if(tipoResultado.isVoidType()) {
			return false;
		}
		return true;
	}

	public void aplicaOperadorPendienteQueSea(LinkedList<string> operadoresBuscados) {
		if(pOperadores.Count > 0) {
			string operador = pOperadores.Peek();
			if(operadoresBuscados.Contains(operador)) {
				if(tiposSonCompatiblesEnOperacion()) {
					pOperadores.Pop();
					VariableSymbol right = pOperandos.Pop();
					VariableSymbol left = pOperandos.Pop();
					ClassSymbol tipoResultado = directory.resultType(left.type, right.type, operador);
					
					VariableSymbol temporal = getNewTemporalVarOfType(tipoResultado.name);
					quadruplesList.addEXPRESSION_OPER(operador, left.address.ToString(), right.address.ToString(), temporal.address.ToString());
					pOperandos.Push(temporal);
				}
				else {
					
					pOperadores.Pop();
					VariableSymbol right = pOperandos.Pop();
					VariableSymbol left = pOperandos.Pop();
					manageException(new Exception("Operador \"" + operador + "\" no es valido para " + 
						left.type.name + " " + left.name + ", " + right.type.name + " " + right.name));
				}
			}
		}
	}

	public void pushICONST(string iConst) {
		VariableSymbol temp = getNewTemporalVarOfType("int");
		pOperandos.Push(temp);
		quadruplesList.addICONST(iConst, temp.address.ToString());
	}

	public void pushCCONST(string cConst) {
		VariableSymbol temp = getNewTemporalVarOfType("char");
		pOperandos.Push(temp);
		quadruplesList.addCCONST(cConst, temp.address.ToString());
	}

	public void pushDCONST(string dConst) {
		VariableSymbol temp = getNewTemporalVarOfType("double");
		pOperandos.Push(temp);
		quadruplesList.addDCONST(dConst, temp.address.ToString());
	}

	public VariableSymbol getNewTemporalVarOfType(string type) {
		ClassSymbol tipo = directory.findType(type);
		VariableSymbol temp = ((MethodSymbol)actualScope).getNewTemporal(tipo);
		return temp;
	}

	public string typeOfVector(string type) {
		if(type.Equals(SymbolTable.integerVectorName)) {
			return SymbolTable.integerName;
		}
		else if(type.Equals(SymbolTable.charVectorName)) {
			return SymbolTable.charName;
		}
		else if(type.Equals(SymbolTable.doubleVectorName)) {
			return SymbolTable.doubleName;
		}
		else {
			manageException(new Exception("El tipo " + type + " no es un tipo de vector conocido."));
			return "";
		}
	}

	public void printQuadruplesList() {
		Console.WriteLine(quadruplesList.ToString());
	}

	public void verifyMainMethodDefinedInMainClass() {
		MethodSymbol mainMethod = mainClass.getMethodSymbol(mainMethodName);
		if(mainMethod == null) {
			string errorMsg = "Debe definir al metodo void main() {..} en la clase Main";
			manageException(new Exception(errorMsg));
		}
		else if(mainMethod.returnType.name != SymbolTable.voidName) {
			string errorMsg = "El tipo de retorno de main() {..} en la clase Main debe ser void";
			manageException(new Exception(errorMsg));
		}
	}

	public static void manageException(Exception e) {
		Console.WriteLine(e.ToString());
		throw new RecognitionException("Se encontro Error semantico\n");
	}


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_program() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_program() {}

	// $ANTLR start "program"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:311:8: public program : ( classDecl )* classMain ;
	[GrammarRule("program")]
	public void program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(311, 106);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:311:16: ( ( classDecl )* classMain )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:311:18: ( classDecl )* classMain
			{
			DebugLocation(311, 18);
			createDirectories(); defineMainClass();
			DebugLocation(311, 60);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:311:60: ( classDecl )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, decisionCanBacktrack[1]);
				int LA1_0 = input.LA(1);

				if ((LA1_0==42))
				{
					int LA1_1 = input.LA(2);

					if ((LA1_1==ID))
					{
						alt1 = 1;
					}


				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:311:60: classDecl
					{
					DebugLocation(311, 60);
					PushFollow(Follow._classDecl_in_program61);
					classDecl();
					PopFollow();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(311, 71);
			actualScope = mainClass;
			DebugLocation(311, 98);
			PushFollow(Follow._classMain_in_program66);
			classMain();
			PopFollow();


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
	    }
	 	DebugLocation(311, 106);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return;

	}
	// $ANTLR end "program"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_classMain() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_classMain() {}

	// $ANTLR start "classMain"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:313:1: classMain : 'class' 'Main' '{' ( vars )? methods '}' ;
	[GrammarRule("classMain")]
	private void classMain()
	{
		EnterRule_classMain();
		EnterRule("classMain", 2);
		TraceIn("classMain", 2);
		try { DebugEnterRule(GrammarFileName, "classMain");
		DebugLocation(313, 3);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:314:2: ( 'class' 'Main' '{' ( vars )? methods '}' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:314:4: 'class' 'Main' '{' ( vars )? methods '}'
			{
			DebugLocation(314, 4);
			Match(input,42,Follow._42_in_classMain75); 
			DebugLocation(314, 12);
			Match(input,37,Follow._37_in_classMain77); 
			DebugLocation(314, 19);
			Match(input,57,Follow._57_in_classMain79); 
			DebugLocation(314, 23);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:314:23: ( vars )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
			int LA2_0 = input.LA(1);

			if ((LA2_0==55))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:314:23: vars
				{
				DebugLocation(314, 23);
				PushFollow(Follow._vars_in_classMain81);
				vars();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(314, 29);
			PushFollow(Follow._methods_in_classMain84);
			methods();
			PopFollow();

			DebugLocation(314, 37);
			quadruplesList.addHALT();
			DebugLocation(314, 65);
			Match(input,58,Follow._58_in_classMain88); 
			DebugLocation(315, 3);

					verifyMainMethodDefinedInMainClass();
					
					directory.printDirectory(); directory.printTypesDirectory(); printQuadruplesList();
					
					
					string outputFile = "C:\\dev\\reptile\\reptile\\repositorio\\codigo\\virtualMachine\\src\\code.txt";
					System.IO.File.WriteAllText(@outputFile, directory.formattedSymbolTable() + quadruplesList.countQuadruples() + "\n" + quadruplesList.ToString());


					

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("classMain", 2);
			LeaveRule("classMain", 2);
			LeaveRule_classMain();
	    }
	 	DebugLocation(325, 3);
		} finally { DebugExitRule(GrammarFileName, "classMain"); }
		return;

	}
	// $ANTLR end "classMain"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_classDecl() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_classDecl() {}

	// $ANTLR start "classDecl"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:327:1: classDecl : 'class' clase= ID ( superClass )? '{' ( vars )? ( methods )? '}' ;
	[GrammarRule("classDecl")]
	private void classDecl()
	{
		EnterRule_classDecl();
		EnterRule("classDecl", 3);
		TraceIn("classDecl", 3);
	    IToken clase = default(IToken);
	    string superClass1 = default(string);

		try { DebugEnterRule(GrammarFileName, "classDecl");
		DebugLocation(327, 117);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:328:5: ( 'class' clase= ID ( superClass )? '{' ( vars )? ( methods )? '}' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:328:9: 'class' clase= ID ( superClass )? '{' ( vars )? ( methods )? '}'
			{
			DebugLocation(328, 9);
			Match(input,42,Follow._42_in_classDecl107); 
			DebugLocation(328, 23);
			clase=(IToken)Match(input,ID,Follow._ID_in_classDecl113); 
			DebugLocation(328, 28);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:328:28: ( superClass )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_0 = input.LA(1);

			if ((LA3_0==45))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:328:29: superClass
				{
				DebugLocation(328, 29);
				PushFollow(Follow._superClass_in_classDecl116);
				superClass1=superClass();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(328, 42);
			registerClass((clase!=null?clase.Text:null), superClass1);
			DebugLocation(328, 96);
			Match(input,57,Follow._57_in_classDecl122); 
			DebugLocation(328, 100);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:328:100: ( vars )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, decisionCanBacktrack[4]);
			int LA4_0 = input.LA(1);

			if ((LA4_0==55))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:328:100: vars
				{
				DebugLocation(328, 100);
				PushFollow(Follow._vars_in_classDecl124);
				vars();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(328, 106);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:328:106: ( methods )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, decisionCanBacktrack[5]);
			int LA5_0 = input.LA(1);

			if ((LA5_0==48))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:328:106: methods
				{
				DebugLocation(328, 106);
				PushFollow(Follow._methods_in_classDecl127);
				methods();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(5); }

			DebugLocation(328, 115);
			Match(input,58,Follow._58_in_classDecl130); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("classDecl", 3);
			LeaveRule("classDecl", 3);
			LeaveRule_classDecl();
	    }
	 	DebugLocation(328, 117);
		} finally { DebugExitRule(GrammarFileName, "classDecl"); }
		return;

	}
	// $ANTLR end "classDecl"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_superClass() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_superClass() {}

	// $ANTLR start "superClass"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:330:1: superClass returns [string superClase] : 'extends' ID ;
	[GrammarRule("superClass")]
	private string superClass()
	{
		EnterRule_superClass();
		EnterRule("superClass", 4);
		TraceIn("superClass", 4);
	    string superClase = default(string);


	    IToken ID2 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "superClass");
		DebugLocation(330, 77);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:330:38: ( 'extends' ID )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:330:40: 'extends' ID
			{
			DebugLocation(330, 40);
			Match(input,45,Follow._45_in_superClass140); 
			DebugLocation(330, 50);
			ID2=(IToken)Match(input,ID,Follow._ID_in_superClass142); 
			DebugLocation(330, 53);
			superClase = (ID2!=null?ID2.Text:null);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("superClass", 4);
			LeaveRule("superClass", 4);
			LeaveRule_superClass();
	    }
	 	DebugLocation(330, 77);
		} finally { DebugExitRule(GrammarFileName, "superClass"); }
		return superClase;

	}
	// $ANTLR end "superClass"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_vars() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_vars() {}

	// $ANTLR start "vars"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:332:1: vars : 'vars' ':' ( varDecl )* ;
	[GrammarRule("vars")]
	private void vars()
	{
		EnterRule_vars();
		EnterRule("vars", 5);
		TraceIn("vars", 5);
		try { DebugEnterRule(GrammarFileName, "vars");
		DebugLocation(332, 22);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:333:2: ( 'vars' ':' ( varDecl )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:333:4: 'vars' ':' ( varDecl )*
			{
			DebugLocation(333, 4);
			Match(input,55,Follow._55_in_vars153); 
			DebugLocation(333, 11);
			Match(input,26,Follow._26_in_vars155); 
			DebugLocation(333, 15);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:333:15: ( varDecl )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, decisionCanBacktrack[6]);
				int LA6_0 = input.LA(1);

				if ((LA6_0==ID))
				{
					int LA6_2 = input.LA(2);

					if ((LA6_2==ID))
					{
						alt6 = 1;
					}


				}
				else if (((LA6_0>=34 && LA6_0<=36)||LA6_0==41||LA6_0==43||LA6_0==47))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:333:15: varDecl
					{
					DebugLocation(333, 15);
					PushFollow(Follow._varDecl_in_vars157);
					varDecl();
					PopFollow();


					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("vars", 5);
			LeaveRule("vars", 5);
			LeaveRule_vars();
	    }
	 	DebugLocation(333, 22);
		} finally { DebugExitRule(GrammarFileName, "vars"); }
		return;

	}
	// $ANTLR end "vars"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_varDecl() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_varDecl() {}

	// $ANTLR start "varDecl"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:335:1: varDecl : (t= primitiveType |t= referenceType ) ID ';' ;
	[GrammarRule("varDecl")]
	private void varDecl()
	{
		EnterRule_varDecl();
		EnterRule("varDecl", 6);
		TraceIn("varDecl", 6);
	    IToken ID3 = default(IToken);
	    string t = default(string);


	    	ClassSymbol clase;

		try { DebugEnterRule(GrammarFileName, "varDecl");
		DebugLocation(335, 9);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:339:5: ( (t= primitiveType |t= referenceType ) ID ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:339:9: (t= primitiveType |t= referenceType ) ID ';'
			{
			DebugLocation(339, 9);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:339:9: (t= primitiveType |t= referenceType )
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
			int LA7_0 = input.LA(1);

			if ((LA7_0==41||LA7_0==43||LA7_0==47))
			{
				alt7 = 1;
			}
			else if ((LA7_0==ID||(LA7_0>=34 && LA7_0<=36)))
			{
				alt7 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:339:10: t= primitiveType
				{
				DebugLocation(339, 12);
				PushFollow(Follow._primitiveType_in_varDecl182);
				t=primitiveType();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:339:30: t= referenceType
				{
				DebugLocation(339, 32);
				PushFollow(Follow._referenceType_in_varDecl190);
				t=referenceType();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(7); }

			DebugLocation(339, 49);
			clase = directory.findType(t);
			DebugLocation(339, 88);
			ID3=(IToken)Match(input,ID,Follow._ID_in_varDecl195); 
			DebugLocation(340, 6);
			registerVariableInScope((ID3!=null?ID3.Text:null), clase);
			DebugLocation(341, 6);
			Match(input,27,Follow._27_in_varDecl211); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("varDecl", 6);
			LeaveRule("varDecl", 6);
			LeaveRule_varDecl();
	    }
	 	DebugLocation(341, 9);
		} finally { DebugExitRule(GrammarFileName, "varDecl"); }
		return;

	}
	// $ANTLR end "varDecl"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_primitiveType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_primitiveType() {}

	// $ANTLR start "primitiveType"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:343:1: primitiveType returns [string tipo] : t= ( 'int' | 'char' | 'double' ) ;
	[GrammarRule("primitiveType")]
	private string primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 7);
		TraceIn("primitiveType", 7);
	    string tipo = default(string);


	    IToken t = default(IToken);

		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(343, 84);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:343:35: (t= ( 'int' | 'char' | 'double' ) )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:343:37: t= ( 'int' | 'char' | 'double' )
			{
			DebugLocation(343, 39);

			t=(IToken)input.LT(1);
			if (input.LA(1)==41||input.LA(1)==43||input.LA(1)==47)
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(343, 67);
			tipo = (t!=null?t.Text:null);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("primitiveType", 7);
			LeaveRule("primitiveType", 7);
			LeaveRule_primitiveType();
	    }
	 	DebugLocation(343, 84);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return tipo;

	}
	// $ANTLR end "primitiveType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_referenceType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_referenceType() {}

	// $ANTLR start "referenceType"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:345:1: referenceType returns [string tipo] : ( vectorType | ID ) ;
	[GrammarRule("referenceType")]
	private string referenceType()
	{
		EnterRule_referenceType();
		EnterRule("referenceType", 8);
		TraceIn("referenceType", 8);
	    string tipo = default(string);


	    IToken ID5 = default(IToken);
	    string vectorType4 = default(string);

		try { DebugEnterRule(GrammarFileName, "referenceType");
		DebugLocation(345, 4);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:345:35: ( ( vectorType | ID ) )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:346:5: ( vectorType | ID )
			{
			DebugLocation(346, 5);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:346:5: ( vectorType | ID )
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, decisionCanBacktrack[8]);
			int LA8_0 = input.LA(1);

			if (((LA8_0>=34 && LA8_0<=36)))
			{
				alt8 = 1;
			}
			else if ((LA8_0==ID))
			{
				alt8 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:346:6: vectorType
				{
				DebugLocation(346, 6);
				PushFollow(Follow._vectorType_in_referenceType256);
				vectorType4=vectorType();
				PopFollow();

				DebugLocation(346, 17);
				tipo = vectorType4;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:347:7: ID
				{
				DebugLocation(347, 7);
				ID5=(IToken)Match(input,ID,Follow._ID_in_referenceType266); 
				DebugLocation(347, 10);
				tipo = (ID5!=null?ID5.Text:null);

				}
				break;

			}
			} finally { DebugExitSubRule(8); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("referenceType", 8);
			LeaveRule("referenceType", 8);
			LeaveRule_referenceType();
	    }
	 	DebugLocation(349, 4);
		} finally { DebugExitRule(GrammarFileName, "referenceType"); }
		return tipo;

	}
	// $ANTLR end "referenceType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_vectorType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_vectorType() {}

	// $ANTLR start "vectorType"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:351:1: vectorType returns [string t] : ( 'CharVector' | 'IntVector' | 'DoubleVector' );
	[GrammarRule("vectorType")]
	private string vectorType()
	{
		EnterRule_vectorType();
		EnterRule("vectorType", 9);
		TraceIn("vectorType", 9);
	    string t = default(string);


		try { DebugEnterRule(GrammarFileName, "vectorType");
		DebugLocation(351, 4);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:351:29: ( 'CharVector' | 'IntVector' | 'DoubleVector' )
			int alt9=3;
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			switch (input.LA(1))
			{
			case 34:
				{
				alt9 = 1;
				}
				break;
			case 36:
				{
				alt9 = 2;
				}
				break;
			case 35:
				{
				alt9 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:352:5: 'CharVector'
				{
				DebugLocation(352, 5);
				Match(input,34,Follow._34_in_vectorType298); 
				DebugLocation(352, 18);
				t = SymbolTable.charVectorName;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:353:7: 'IntVector'
				{
				DebugLocation(353, 7);
				Match(input,36,Follow._36_in_vectorType308); 
				DebugLocation(353, 19);
				t = SymbolTable.integerVectorName;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:354:7: 'DoubleVector'
				{
				DebugLocation(354, 7);
				Match(input,35,Follow._35_in_vectorType318); 
				DebugLocation(354, 22);
				t = SymbolTable.doubleVectorName;

				}
				break;

			}
		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("vectorType", 9);
			LeaveRule("vectorType", 9);
			LeaveRule_vectorType();
	    }
	 	DebugLocation(355, 4);
		} finally { DebugExitRule(GrammarFileName, "vectorType"); }
		return t;

	}
	// $ANTLR end "vectorType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_voidType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_voidType() {}

	// $ANTLR start "voidType"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:357:1: voidType returns [string tipo] : t= 'void' ;
	[GrammarRule("voidType")]
	private string voidType()
	{
		EnterRule_voidType();
		EnterRule("voidType", 10);
		TraceIn("voidType", 10);
	    string tipo = default(string);


	    IToken t = default(IToken);

		try { DebugEnterRule(GrammarFileName, "voidType");
		DebugLocation(357, 60);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:357:30: (t= 'void' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:357:32: t= 'void'
			{
			DebugLocation(357, 34);
			t=(IToken)Match(input,VOID,Follow._VOID_in_voidType339); 
			DebugLocation(357, 43);
			tipo = (t!=null?t.Text:null);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("voidType", 10);
			LeaveRule("voidType", 10);
			LeaveRule_voidType();
	    }
	 	DebugLocation(357, 60);
		} finally { DebugExitRule(GrammarFileName, "voidType"); }
		return tipo;

	}
	// $ANTLR end "voidType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_formalParamType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_formalParamType() {}

	// $ANTLR start "formalParamType"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:359:1: formalParamType returns [string tipo] : (t= primitiveType |t= referenceType ) ;
	[GrammarRule("formalParamType")]
	private string formalParamType()
	{
		EnterRule_formalParamType();
		EnterRule("formalParamType", 11);
		TraceIn("formalParamType", 11);
	    string tipo = default(string);


	    string t = default(string);

		try { DebugEnterRule(GrammarFileName, "formalParamType");
		DebugLocation(359, 23);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:359:37: ( (t= primitiveType |t= referenceType ) )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:359:39: (t= primitiveType |t= referenceType )
			{
			DebugLocation(359, 39);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:359:39: (t= primitiveType |t= referenceType )
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			int LA10_0 = input.LA(1);

			if ((LA10_0==41||LA10_0==43||LA10_0==47))
			{
				alt10 = 1;
			}
			else if ((LA10_0==ID||(LA10_0>=34 && LA10_0<=36)))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:359:40: t= primitiveType
				{
				DebugLocation(359, 42);
				PushFollow(Follow._primitiveType_in_formalParamType356);
				t=primitiveType();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:360:8: t= referenceType
				{
				DebugLocation(360, 10);
				PushFollow(Follow._referenceType_in_formalParamType370);
				t=referenceType();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(361, 6);
			tipo = t;

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("formalParamType", 11);
			LeaveRule("formalParamType", 11);
			LeaveRule_formalParamType();
	    }
	 	DebugLocation(361, 23);
		} finally { DebugExitRule(GrammarFileName, "formalParamType"); }
		return tipo;

	}
	// $ANTLR end "formalParamType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_methods() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_methods() {}

	// $ANTLR start "methods"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:363:1: methods : 'methods' ':' ( methodDeclaration )* ;
	[GrammarRule("methods")]
	private void methods()
	{
		EnterRule_methods();
		EnterRule("methods", 12);
		TraceIn("methods", 12);
		try { DebugEnterRule(GrammarFileName, "methods");
		DebugLocation(363, 35);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:364:2: ( 'methods' ':' ( methodDeclaration )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:364:4: 'methods' ':' ( methodDeclaration )*
			{
			DebugLocation(364, 4);
			Match(input,48,Follow._48_in_methods389); 
			DebugLocation(364, 14);
			Match(input,26,Follow._26_in_methods391); 
			DebugLocation(364, 18);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:364:18: ( methodDeclaration )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, decisionCanBacktrack[11]);
				int LA11_0 = input.LA(1);

				if ((LA11_0==ID||LA11_0==VOID||(LA11_0>=34 && LA11_0<=36)||LA11_0==41||LA11_0==43||LA11_0==47))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:364:18: methodDeclaration
					{
					DebugLocation(364, 18);
					PushFollow(Follow._methodDeclaration_in_methods393);
					methodDeclaration();
					PopFollow();


					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("methods", 12);
			LeaveRule("methods", 12);
			LeaveRule_methods();
	    }
	 	DebugLocation(364, 35);
		} finally { DebugExitRule(GrammarFileName, "methods"); }
		return;

	}
	// $ANTLR end "methods"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_methodDeclaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_methodDeclaration() {}

	// $ANTLR start "methodDeclaration"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:366:1: methodDeclaration : (tRet= primitiveType |tRet= referenceType |tRet= voidType ) ID '(' ( formalParameters )? ')' '{' ( vars )? someStatements '}' ;
	[GrammarRule("methodDeclaration")]
	private void methodDeclaration()
	{
		EnterRule_methodDeclaration();
		EnterRule("methodDeclaration", 13);
		TraceIn("methodDeclaration", 13);
	    IToken ID6 = default(IToken);
	    string tRet = default(string);


	    	ClassSymbol tipoRetorno;
	    	MethodSymbol method;

		try { DebugEnterRule(GrammarFileName, "methodDeclaration");
		DebugLocation(366, 1);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:371:3: ( (tRet= primitiveType |tRet= referenceType |tRet= voidType ) ID '(' ( formalParameters )? ')' '{' ( vars )? someStatements '}' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:371:3: (tRet= primitiveType |tRet= referenceType |tRet= voidType ) ID '(' ( formalParameters )? ')' '{' ( vars )? someStatements '}'
			{
			DebugLocation(371, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:371:3: (tRet= primitiveType |tRet= referenceType |tRet= voidType )
			int alt12=3;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
			switch (input.LA(1))
			{
			case 41:
			case 43:
			case 47:
				{
				alt12 = 1;
				}
				break;
			case ID:
			case 34:
			case 35:
			case 36:
				{
				alt12 = 2;
				}
				break;
			case VOID:
				{
				alt12 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:371:4: tRet= primitiveType
				{
				DebugLocation(371, 9);
				PushFollow(Follow._primitiveType_in_methodDeclaration412);
				tRet=primitiveType();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:371:27: tRet= referenceType
				{
				DebugLocation(371, 32);
				PushFollow(Follow._referenceType_in_methodDeclaration420);
				tRet=referenceType();
				PopFollow();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:371:50: tRet= voidType
				{
				DebugLocation(371, 55);
				PushFollow(Follow._voidType_in_methodDeclaration428);
				tRet=voidType();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(371, 67);
			tipoRetorno = directory.findType(tRet);
			DebugLocation(372, 2);
			ID6=(IToken)Match(input,ID,Follow._ID_in_methodDeclaration435); 
			DebugLocation(373, 2);

				registrarMetodo(tipoRetorno, (ID6!=null?ID6.Text:null));
				method = (MethodSymbol)actualScope;
				
			DebugLocation(377, 2);
			Match(input,18,Follow._18_in_methodDeclaration443); 
			DebugLocation(377, 6);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:377:6: ( formalParameters )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, decisionCanBacktrack[13]);
			int LA13_0 = input.LA(1);

			if ((LA13_0==ID||(LA13_0>=34 && LA13_0<=36)||LA13_0==41||LA13_0==43||LA13_0==47))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:377:6: formalParameters
				{
				DebugLocation(377, 6);
				PushFollow(Follow._formalParameters_in_methodDeclaration445);
				formalParameters();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(377, 24);
			Match(input,19,Follow._19_in_methodDeclaration448); 
			DebugLocation(378, 2);
			Match(input,57,Follow._57_in_methodDeclaration451); 
			DebugLocation(378, 6);
			method.firstQuadruple = quadruplesList.nextNumberOfQuadruple();
			DebugLocation(378, 72);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:378:72: ( vars )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, decisionCanBacktrack[14]);
			int LA14_0 = input.LA(1);

			if ((LA14_0==55))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:378:72: vars
				{
				DebugLocation(378, 72);
				PushFollow(Follow._vars_in_methodDeclaration455);
				vars();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(378, 78);
			PushFollow(Follow._someStatements_in_methodDeclaration458);
			someStatements();
			PopFollow();

			DebugLocation(378, 93);
			Match(input,58,Follow._58_in_methodDeclaration460); 
			DebugLocation(380, 2);

				if(method.returnsVoid()) {
					quadruplesList.addRETURNVOID();
				}
				else {
					quadruplesList.addSHOULD_RETURN_SOMETHING_ERROR(method.fullyQualifiedName());
				}
				actualScope = ((MethodSymbol)actualScope).enclosingScope;
				

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("methodDeclaration", 13);
			LeaveRule("methodDeclaration", 13);
			LeaveRule_methodDeclaration();
	    }
	 	DebugLocation(389, 1);
		} finally { DebugExitRule(GrammarFileName, "methodDeclaration"); }
		return;

	}
	// $ANTLR end "methodDeclaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_formalParam() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_formalParam() {}

	// $ANTLR start "formalParam"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:391:1: formalParam : t= formalParamType ID ;
	[GrammarRule("formalParam")]
	private void formalParam()
	{
		EnterRule_formalParam();
		EnterRule("formalParam", 14);
		TraceIn("formalParam", 14);
	    IToken ID7 = default(IToken);
	    string t = default(string);

		try { DebugEnterRule(GrammarFileName, "formalParam");
		DebugLocation(391, 81);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:391:12: (t= formalParamType ID )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:391:14: t= formalParamType ID
			{
			DebugLocation(391, 16);
			PushFollow(Follow._formalParamType_in_formalParam480);
			t=formalParamType();
			PopFollow();

			DebugLocation(391, 34);
			ID7=(IToken)Match(input,ID,Follow._ID_in_formalParam482); 
			DebugLocation(391, 37);
			registerFormalParameter((ID7!=null?ID7.Text:null), t);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("formalParam", 14);
			LeaveRule("formalParam", 14);
			LeaveRule_formalParam();
	    }
	 	DebugLocation(391, 81);
		} finally { DebugExitRule(GrammarFileName, "formalParam"); }
		return;

	}
	// $ANTLR end "formalParam"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_formalParameters() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_formalParameters() {}

	// $ANTLR start "formalParameters"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:393:1: formalParameters : t= formalParam ( ',' formalParam )* ;
	[GrammarRule("formalParameters")]
	private void formalParameters()
	{
		EnterRule_formalParameters();
		EnterRule("formalParameters", 15);
		TraceIn("formalParameters", 15);
		try { DebugEnterRule(GrammarFileName, "formalParameters");
		DebugLocation(393, 38);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:394:4: (t= formalParam ( ',' formalParam )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:394:4: t= formalParam ( ',' formalParam )*
			{
			DebugLocation(394, 6);
			PushFollow(Follow._formalParam_in_formalParameters498);
			formalParam();
			PopFollow();

			DebugLocation(394, 20);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:394:20: ( ',' formalParam )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, decisionCanBacktrack[15]);
				int LA15_0 = input.LA(1);

				if ((LA15_0==22))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:394:21: ',' formalParam
					{
					DebugLocation(394, 21);
					Match(input,22,Follow._22_in_formalParameters501); 
					DebugLocation(394, 25);
					PushFollow(Follow._formalParam_in_formalParameters503);
					formalParam();
					PopFollow();


					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("formalParameters", 15);
			LeaveRule("formalParameters", 15);
			LeaveRule_formalParameters();
	    }
	 	DebugLocation(394, 38);
		} finally { DebugExitRule(GrammarFileName, "formalParameters"); }
		return;

	}
	// $ANTLR end "formalParameters"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_someStatements() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_someStatements() {}

	// $ANTLR start "someStatements"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:396:1: someStatements : ( statement )* ;
	[GrammarRule("someStatements")]
	private void someStatements()
	{
		EnterRule_someStatements();
		EnterRule("someStatements", 16);
		TraceIn("someStatements", 16);
		try { DebugEnterRule(GrammarFileName, "someStatements");
		DebugLocation(396, 13);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:397:2: ( ( statement )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:397:4: ( statement )*
			{
			DebugLocation(397, 4);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:397:4: ( statement )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, decisionCanBacktrack[16]);
				int LA16_0 = input.LA(1);

				if ((LA16_0==ID||LA16_0==27||LA16_0==46||(LA16_0>=51 && LA16_0<=54)||LA16_0==56))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:397:4: statement
					{
					DebugLocation(397, 4);
					PushFollow(Follow._statement_in_someStatements515);
					statement();
					PopFollow();


					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("someStatements", 16);
			LeaveRule("someStatements", 16);
			LeaveRule_someStatements();
	    }
	 	DebugLocation(397, 13);
		} finally { DebugExitRule(GrammarFileName, "someStatements"); }
		return;

	}
	// $ANTLR end "someStatements"

	protected sealed partial class statement_scope
	{
		public bool inExpression;
	}
	protected virtual void statement_scopeInit( statement_scope scope ) {}
	protected virtual void statement_scopeAfter( statement_scope scope ) {}
	protected readonly ListStack<statement_scope> statement_stack = new ListStack<statement_scope>();


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_statement() {}

	// $ANTLR start "statement"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:399:1: statement : ( assignment | invoke ';' | if_inst | while_inst | return_inst | read | print | ';' ) ;
	[GrammarRule("statement")]
	private void statement()
	{
		EnterRule_statement();
		EnterRule("statement", 17);
		TraceIn("statement", 17);
	    statement_stack.Push(new statement_scope());statement_scopeInit(statement_stack.Peek());
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(399, 3);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:403:4: ( ( assignment | invoke ';' | if_inst | while_inst | return_inst | read | print | ';' ) )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:403:4: ( assignment | invoke ';' | if_inst | while_inst | return_inst | read | print | ';' )
			{
			DebugLocation(403, 4);
			statement_stack.Peek().inExpression =  false;
			DebugLocation(404, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:404:3: ( assignment | invoke ';' | if_inst | while_inst | return_inst | read | print | ';' )
			int alt17=8;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, decisionCanBacktrack[17]);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA17_1 = input.LA(2);

				if ((LA17_1==24))
				{
					int LA17_9 = input.LA(3);

					if ((LA17_9==ID))
					{
						int LA17_12 = input.LA(4);

						if ((LA17_12==30))
						{
							alt17 = 1;
						}
						else if ((LA17_12==18))
						{
							alt17 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 17, 12, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 17, 9, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA17_1==30||LA17_1==38))
				{
					alt17 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 17, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 54:
				{
				int LA17_2 = input.LA(2);

				if ((LA17_2==24))
				{
					int LA17_11 = input.LA(3);

					if ((LA17_11==ID))
					{
						int LA17_13 = input.LA(4);

						if ((LA17_13==30))
						{
							alt17 = 1;
						}
						else if ((LA17_13==18))
						{
							alt17 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 17, 13, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 17, 11, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 17, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 46:
				{
				alt17 = 3;
				}
				break;
			case 56:
				{
				alt17 = 4;
				}
				break;
			case 53:
				{
				alt17 = 5;
				}
				break;
			case 52:
				{
				alt17 = 6;
				}
				break;
			case 51:
				{
				alt17 = 7;
				}
				break;
			case 27:
				{
				alt17 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:405:4: assignment
				{
				DebugLocation(405, 4);
				PushFollow(Follow._assignment_in_statement539);
				assignment();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:406:5: invoke ';'
				{
				DebugLocation(406, 5);
				PushFollow(Follow._invoke_in_statement545);
				invoke();
				PopFollow();

				DebugLocation(406, 12);
				Match(input,27,Follow._27_in_statement547); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:407:5: if_inst
				{
				DebugLocation(407, 5);
				PushFollow(Follow._if_inst_in_statement553);
				if_inst();
				PopFollow();


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:408:5: while_inst
				{
				DebugLocation(408, 5);
				PushFollow(Follow._while_inst_in_statement559);
				while_inst();
				PopFollow();


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:409:5: return_inst
				{
				DebugLocation(409, 5);
				PushFollow(Follow._return_inst_in_statement565);
				return_inst();
				PopFollow();


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:410:5: read
				{
				DebugLocation(410, 5);
				PushFollow(Follow._read_in_statement571);
				read();
				PopFollow();


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:411:5: print
				{
				DebugLocation(411, 5);
				PushFollow(Follow._print_in_statement577);
				print();
				PopFollow();


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:412:5: ';'
				{
				DebugLocation(412, 5);
				Match(input,27,Follow._27_in_statement583); 

				}
				break;

			}
			} finally { DebugExitSubRule(17); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("statement", 17);
			LeaveRule("statement", 17);
			LeaveRule_statement();
	        statement_scopeAfter(statement_stack.Peek());statement_stack.Pop();
	    }
	 	DebugLocation(413, 3);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return;

	}
	// $ANTLR end "statement"

	protected sealed partial class assignment_scope
	{
		public int caso;
		public VariableSymbol par1;
		public //obj
			VariableSymbol par2;
		public //field
			ClassSymbol leftType;
	}
	protected virtual void assignment_scopeInit( assignment_scope scope ) {}
	protected virtual void assignment_scopeAfter( assignment_scope scope ) {}
	protected readonly ListStack<assignment_scope> assignment_stack = new ListStack<assignment_scope>();


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_assignment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_assignment() {}

	// $ANTLR start "assignment"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:415:1: assignment : designator '=' ( expression | 'new' ID '(' ')' | 'new' vectorType '[' INT ']' ) ';' ;
	[GrammarRule("assignment")]
	private void assignment()
	{
		EnterRule_assignment();
		EnterRule("assignment", 18);
		TraceIn("assignment", 18);
	    assignment_stack.Push(new assignment_scope());assignment_scopeInit(assignment_stack.Peek());
	    IToken ID8 = default(IToken);
	    IToken INT10 = default(IToken);
	    string vectorType9 = default(string);

		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(415, 1);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:422:2: ( designator '=' ( expression | 'new' ID '(' ')' | 'new' vectorType '[' INT ']' ) ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:422:4: designator '=' ( expression | 'new' ID '(' ')' | 'new' vectorType '[' INT ']' ) ';'
			{
			DebugLocation(422, 4);
			PushFollow(Follow._designator_in_assignment603);
			designator();
			PopFollow();

			DebugLocation(422, 15);
			Match(input,30,Follow._30_in_assignment605); 
			DebugLocation(423, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:423:3: ( expression | 'new' ID '(' ')' | 'new' vectorType '[' INT ']' )
			int alt18=3;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, decisionCanBacktrack[18]);
			int LA18_0 = input.LA(1);

			if ((LA18_0==CHAR||LA18_0==DOUBLE||(LA18_0>=ID && LA18_0<=INT)||LA18_0==18||LA18_0==54))
			{
				alt18 = 1;
			}
			else if ((LA18_0==49))
			{
				int LA18_2 = input.LA(2);

				if ((LA18_2==ID))
				{
					alt18 = 2;
				}
				else if (((LA18_2>=34 && LA18_2<=36)))
				{
					alt18 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 18, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:424:3: expression
				{
				DebugLocation(424, 3);
				PushFollow(Follow._expression_in_assignment614);
				expression();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:425:5: 'new' ID '(' ')'
				{
				DebugLocation(425, 5);
				Match(input,49,Follow._49_in_assignment620); 
				DebugLocation(425, 11);
				ID8=(IToken)Match(input,ID,Follow._ID_in_assignment622); 
				DebugLocation(425, 14);
				Match(input,18,Follow._18_in_assignment624); 
				DebugLocation(425, 18);
				Match(input,19,Follow._19_in_assignment626); 
				DebugLocation(426, 4);

							ClassSymbol tipo = directory.findType((ID8!=null?ID8.Text:null));
							VariableSymbol temp = getNewTemporalVarOfType(tipo.name);
							pOperandos.Push(temp);
							quadruplesList.addOBJECT(temp.address.ToString(), tipo.name);
							
							

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:433:5: 'new' vectorType '[' INT ']'
				{
				DebugLocation(433, 5);
				Match(input,49,Follow._49_in_assignment638); 
				DebugLocation(433, 11);
				PushFollow(Follow._vectorType_in_assignment640);
				vectorType9=vectorType();
				PopFollow();

				DebugLocation(433, 22);
				Match(input,38,Follow._38_in_assignment642); 
				DebugLocation(433, 26);
				pOperadores.Push("[");
				DebugLocation(433, 51);
				INT10=(IToken)Match(input,INT,Follow._INT_in_assignment646); 
				DebugLocation(433, 55);
				Match(input,39,Follow._39_in_assignment648); 
				DebugLocation(433, 59);
				pOperadores.Pop();
				DebugLocation(434, 4);

							VariableSymbol temp = getNewTemporalVarOfType(vectorType9);
							pOperandos.Push(temp);
							if(vectorType9.Equals(SymbolTable.integerVectorName)) {
								quadruplesList.addINTVECTOR(temp.address.ToString(), (INT10!=null?INT10.Text:null));
							}
							else if(vectorType9.Equals(SymbolTable.charVectorName)) {
								quadruplesList.addCHARVECTOR(temp.address.ToString(), (INT10!=null?INT10.Text:null));
							}
							else if(vectorType9.Equals(SymbolTable.doubleVectorName)) {
								quadruplesList.addDOUBLEVECTOR(temp.address.ToString(), (INT10!=null?INT10.Text:null));
							}
							
							
							

				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(450, 3);

					VariableSymbol right = pOperandos.Pop();
					if(!directory.validAssignment(assignment_stack.Peek().leftType, right.type)) {
						manageException(new Exception("No se puede asignar " + right.name + " a " + assignment_stack.Peek().par2.name + " porque los tipos " + 
									assignment_stack.Peek().leftType.name + " y " + right.type.name + " no son compatibles."));
					}
					if(assignment_stack.Peek().caso == 0) {	//ID = right
							quadruplesList.addASSIGNMENT(right.address.ToString(), assignment_stack.Peek().par2.address.ToString());
					}
					else if(assignment_stack.Peek().caso == 1) {	//ID.ID = right
							quadruplesList.addPUTFIELD(right.address.ToString(), assignment_stack.Peek().par1.address.ToString(), assignment_stack.Peek().par2.address.ToString());
					}
					else if(assignment_stack.Peek().caso == 2) {	//this.ID = bla
						MethodSymbol method = (MethodSymbol)actualScope;
						quadruplesList.addPUTFIELD(right.address.ToString(), method.getThisParameterAddress(), assignment_stack.Peek().par2.address.ToString());	
					}
					else if(assignment_stack.Peek().caso == 3) {	//ID[expression] = bla
						quadruplesList.addPUTVECTORELEM(right.address.ToString(), assignment_stack.Peek().par2.address.ToString(), assignment_stack.Peek().par1.address.ToString());			
					}
					
			DebugLocation(471, 3);
			Match(input,27,Follow._27_in_assignment671); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("assignment", 18);
			LeaveRule("assignment", 18);
			LeaveRule_assignment();
	        assignment_scopeAfter(assignment_stack.Peek());assignment_stack.Pop();
	    }
	 	DebugLocation(472, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return;

	}
	// $ANTLR end "assignment"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_designator() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_designator() {}

	// $ANTLR start "designator"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:474:1: designator : (v= ID |obj= ID '.' var= ID | 'this' '.' var= ID | ( ID '[' expression ']' ) );
	[GrammarRule("designator")]
	private void designator()
	{
		EnterRule_designator();
		EnterRule("designator", 19);
		TraceIn("designator", 19);
	    IToken v = default(IToken);
	    IToken obj = default(IToken);
	    IToken var = default(IToken);
	    IToken ID11 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "designator");
		DebugLocation(474, 1);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:475:2: (v= ID |obj= ID '.' var= ID | 'this' '.' var= ID | ( ID '[' expression ']' ) )
			int alt19=4;
			try { DebugEnterDecision(19, decisionCanBacktrack[19]);
			int LA19_0 = input.LA(1);

			if ((LA19_0==ID))
			{
				switch (input.LA(2))
				{
				case 24:
					{
					alt19 = 2;
					}
					break;
				case 38:
					{
					alt19 = 4;
					}
					break;
				case 19:
				case 30:
					{
					alt19 = 1;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 19, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA19_0==54))
			{
				alt19 = 3;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:476:3: v= ID
				{
				DebugLocation(476, 5);
				v=(IToken)Match(input,ID,Follow._ID_in_designator690); 
				DebugLocation(477, 4);

							assignment_stack.Peek().caso =  0;
							verifyVariableCanBeAccessed((v!=null?v.Text:null)); 
							assignment_stack.Peek().par2 =  getVariable((v!=null?v.Text:null));
							
							assignment_stack.Peek().leftType =  assignment_stack.Peek().par2.type;
							

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:484:5: obj= ID '.' var= ID
				{
				DebugLocation(484, 9);
				obj=(IToken)Match(input,ID,Follow._ID_in_designator707); 
				DebugLocation(484, 15);
				Match(input,24,Follow._24_in_designator710); 
				DebugLocation(484, 23);
				var=(IToken)Match(input,ID,Follow._ID_in_designator716); 
				DebugLocation(485, 4);

							assignment_stack.Peek().caso =  1;
							verifyObjectAndInstVariableDefined((obj!=null?obj.Text:null), (var!=null?var.Text:null)); 
							assignment_stack.Peek().par1 =  getVariable((obj!=null?obj.Text:null));
							assignment_stack.Peek().par2 =  getField((obj!=null?obj.Text:null), (var!=null?var.Text:null));
							
							assignment_stack.Peek().leftType =  assignment_stack.Peek().par2.type;
							

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:493:5: 'this' '.' var= ID
				{
				DebugLocation(493, 5);
				Match(input,54,Follow._54_in_designator729); 
				DebugLocation(493, 12);
				Match(input,24,Follow._24_in_designator731); 
				DebugLocation(493, 20);
				var=(IToken)Match(input,ID,Follow._ID_in_designator737); 
				DebugLocation(494, 4);

							assignment_stack.Peek().caso =  2;
							verifyInstanceVariableDefinedInThis((var!=null?var.Text:null));
							assignment_stack.Peek().par2 =  getInstanceVariable((var!=null?var.Text:null));
							
							assignment_stack.Peek().leftType =  assignment_stack.Peek().par2.type;
							

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:501:5: ( ID '[' expression ']' )
				{
				DebugLocation(501, 5);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:501:5: ( ID '[' expression ']' )
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:501:6: ID '[' expression ']'
				{
				DebugLocation(501, 6);
				ID11=(IToken)Match(input,ID,Follow._ID_in_designator756); 
				DebugLocation(501, 9);
				Match(input,38,Follow._38_in_designator758); 
				DebugLocation(501, 13);
				pOperadores.Push("[");
				DebugLocation(501, 38);
				PushFollow(Follow._expression_in_designator762);
				expression();
				PopFollow();

				DebugLocation(501, 49);
				Match(input,39,Follow._39_in_designator764); 
				DebugLocation(501, 53);
				pOperadores.Pop();

				}

				DebugLocation(502, 4);

							assignment_stack.Peek().caso =  3;
							verifyIsVector((ID11!=null?ID11.Text:null));
							VariableSymbol index = pOperandos.Pop();
							if(!index.type.name.Equals("int")) {
								manageException(new Exception("El subindice del Vector " + (ID11!=null?ID11.Text:null) + " debe ser de tipo int."));
							}
							else {
								assignment_stack.Peek().par2 =  getVariable((ID11!=null?ID11.Text:null));
								assignment_stack.Peek().par1 =  index;
							}
							
							string tipo = typeOfVector(assignment_stack.Peek().par2.type.name);
							assignment_stack.Peek().leftType =  directory.findType(tipo);
							

				}
				break;

			}
		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("designator", 19);
			LeaveRule("designator", 19);
			LeaveRule_designator();
	    }
	 	DebugLocation(517, 1);
		} finally { DebugExitRule(GrammarFileName, "designator"); }
		return;

	}
	// $ANTLR end "designator"

	protected sealed partial class invoke_scope
	{
		public MethodSymbol invokedMethod;
		public VariableSymbol obj;
	}
	protected virtual void invoke_scopeInit( invoke_scope scope ) {}
	protected virtual void invoke_scopeAfter( invoke_scope scope ) {}
	protected readonly ListStack<invoke_scope> invoke_stack = new ListStack<invoke_scope>();


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_invoke() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_invoke() {}

	// $ANTLR start "invoke"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:519:1: invoke : (objId= ID | 'this' ) '.' method= ID actualParameters ;
	[GrammarRule("invoke")]
	private void invoke()
	{
		EnterRule_invoke();
		EnterRule("invoke", 20);
		TraceIn("invoke", 20);
	    invoke_stack.Push(new invoke_scope());invoke_scopeInit(invoke_stack.Peek());
	    IToken objId = default(IToken);
	    IToken method = default(IToken);

		try { DebugEnterRule(GrammarFileName, "invoke");
		DebugLocation(519, 2);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:524:3: ( (objId= ID | 'this' ) '.' method= ID actualParameters )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:525:3: (objId= ID | 'this' ) '.' method= ID actualParameters
			{
			DebugLocation(525, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:525:3: (objId= ID | 'this' )
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, decisionCanBacktrack[20]);
			int LA20_0 = input.LA(1);

			if ((LA20_0==ID))
			{
				alt20 = 1;
			}
			else if ((LA20_0==54))
			{
				alt20 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:525:4: objId= ID
				{
				DebugLocation(525, 10);
				objId=(IToken)Match(input,ID,Follow._ID_in_invoke795); 
				DebugLocation(525, 15);
				invoke_stack.Peek().obj =  getVariable((objId!=null?objId.Text:null));

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:525:59: 'this'
				{
				DebugLocation(525, 59);
				Match(input,54,Follow._54_in_invoke800); 
				DebugLocation(525, 66);
				invoke_stack.Peek().obj =  ((MethodSymbol)actualScope).getThisParameter();

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(526, 3);
			Match(input,24,Follow._24_in_invoke808); 
			DebugLocation(526, 14);
			method=(IToken)Match(input,ID,Follow._ID_in_invoke814); 
			DebugLocation(526, 19);
			invoke_stack.Peek().invokedMethod =  getMethod(invoke_stack.Peek().obj.name, (method!=null?method.Text:null));
			DebugLocation(527, 3);

					
					if(statement_stack.Peek().inExpression && invoke_stack.Peek().invokedMethod.returnsVoid()) {
						string msg = "Llamada a metodo void " + invoke_stack.Peek().invokedMethod.fullyQualifiedName() + ". No es valido llamar a un metodo void"
												+ " como parte de una expresion.";
						manageException(new Exception(msg));
					}
					
					
			DebugLocation(536, 3);
			PushFollow(Follow._actualParameters_in_invoke824);
			actualParameters();
			PopFollow();


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("invoke", 20);
			LeaveRule("invoke", 20);
			LeaveRule_invoke();
	        invoke_scopeAfter(invoke_stack.Peek());invoke_stack.Pop();
	    }
	 	DebugLocation(539, 2);
		} finally { DebugExitRule(GrammarFileName, "invoke"); }
		return;

	}
	// $ANTLR end "invoke"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_actualParameters() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_actualParameters() {}

	// $ANTLR start "actualParameters"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:541:1: actualParameters : '(' ( expression ( ',' expression )* )? ')' ;
	[GrammarRule("actualParameters")]
	private void actualParameters()
	{
		EnterRule_actualParameters();
		EnterRule("actualParameters", 21);
		TraceIn("actualParameters", 21);
		try { DebugEnterRule(GrammarFileName, "actualParameters");
		DebugLocation(541, 2);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:542:2: ( '(' ( expression ( ',' expression )* )? ')' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:543:3: '(' ( expression ( ',' expression )* )? ')'
			{
			DebugLocation(543, 3);
			pOperadores.Push("(");
			DebugLocation(544, 3);
			Match(input,18,Follow._18_in_actualParameters851); 
			DebugLocation(545, 3);

					VariableSymbol formalParam;
					VariableSymbol actualParam;
					IEnumerator<VariableSymbol> paramIterator = invoke_stack.Peek().invokedMethod.getParamIterator();
					paramIterator.MoveNext();
					LinkedList<VariableSymbol> argsList = new LinkedList<VariableSymbol>();
					argsList.AddLast(invoke_stack.Peek().obj);
					
			DebugLocation(554, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:554:3: ( expression ( ',' expression )* )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, decisionCanBacktrack[22]);
			int LA22_0 = input.LA(1);

			if ((LA22_0==CHAR||LA22_0==DOUBLE||(LA22_0>=ID && LA22_0<=INT)||LA22_0==18||LA22_0==54))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:554:4: expression ( ',' expression )*
				{
				DebugLocation(554, 4);
				PushFollow(Follow._expression_in_actualParameters861);
				expression();
				PopFollow();

				DebugLocation(555, 3);

						if(!paramIterator.MoveNext()) {
							string msg = "Parametros formales de mas en llamada a " + invoke_stack.Peek().invokedMethod.fullyQualifiedName();
							manageException(new Exception(msg));
						}
						formalParam = paramIterator.Current;
						actualParam = pOperandos.Pop();
						if(!directory.validAssignment(formalParam.type, actualParam.type)) {
							string msg = "El tipo del argumento " + actualParam.name + " no es asignable al tipo del parametro formal " 
									+ formalParam.name + " en la llamada a " + invoke_stack.Peek().invokedMethod.fullyQualifiedName();
							manageException(new Exception(msg));
						}
						argsList.AddLast(actualParam);
						
				DebugLocation(570, 3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:570:3: ( ',' expression )*
				try { DebugEnterSubRule(21);
				while (true)
				{
					int alt21=2;
					try { DebugEnterDecision(21, decisionCanBacktrack[21]);
					int LA21_0 = input.LA(1);

					if ((LA21_0==22))
					{
						alt21 = 1;
					}


					} finally { DebugExitDecision(21); }
					switch ( alt21 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:570:4: ',' expression
						{
						DebugLocation(570, 4);
						Match(input,22,Follow._22_in_actualParameters874); 
						DebugLocation(570, 8);
						PushFollow(Follow._expression_in_actualParameters876);
						expression();
						PopFollow();

						DebugLocation(571, 3);

								if(!paramIterator.MoveNext()) {
									string msg = "Parametros formales de mas en llamada a " + invoke_stack.Peek().invokedMethod.fullyQualifiedName();
									manageException(new Exception(msg));
								}
								formalParam = paramIterator.Current;
								actualParam = pOperandos.Pop();
								if(!directory.validAssignment(formalParam.type, actualParam.type)) {
									string msg = "El tipo del argumento " + actualParam.name + " no es asignable al tipo del parametro formal " 
											+ formalParam.name + " en la llamada a " + invoke_stack.Peek().invokedMethod.fullyQualifiedName();
									manageException(new Exception(msg));
								}
								argsList.AddLast(actualParam);
								

						}
						break;

					default:
						goto loop21;
					}
				}

				loop21:
					;

				} finally { DebugExitSubRule(21); }


				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(585, 8);
			Match(input,19,Follow._19_in_actualParameters890); 
			DebugLocation(587, 3);
			pOperadores.Pop();
			DebugLocation(588, 3);

					if(paramIterator.MoveNext()) { 
						string msg = "Faltan argumentos en la llamada a " + invoke_stack.Peek().invokedMethod.fullyQualifiedName();
						manageException(new Exception(msg));
					}
					
					quadruplesList.addERA(invoke_stack.Peek().invokedMethod.fullyQualifiedName());
					int paramCount = 0;
					foreach (VariableSymbol arg in argsList) {
						quadruplesList.addPARAM(arg.address.ToString(), paramCount.ToString());
						paramCount++;
					}
					
					if(invoke_stack.Peek().invokedMethod.returnsVoid()) {
						quadruplesList.addGOSUBVOID(invoke_stack.Peek().invokedMethod.fullyQualifiedName());
					}
					else {
						VariableSymbol varToStoreResult = ((MethodSymbol)actualScope).getNewTemporal(invoke_stack.Peek().invokedMethod.returnType);
						quadruplesList.addGOSUB(invoke_stack.Peek().invokedMethod.fullyQualifiedName(), varToStoreResult.address.ToString());
						pOperandos.Push(varToStoreResult);
					}
					

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("actualParameters", 21);
			LeaveRule("actualParameters", 21);
			LeaveRule_actualParameters();
	    }
	 	DebugLocation(610, 2);
		} finally { DebugExitRule(GrammarFileName, "actualParameters"); }
		return;

	}
	// $ANTLR end "actualParameters"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_if_inst() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_if_inst() {}

	// $ANTLR start "if_inst"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:612:1: if_inst : 'if' '(' expression ')' '{' someStatements '}' ( 'else' '{' someStatements '}' )? ;
	[GrammarRule("if_inst")]
	private void if_inst()
	{
		EnterRule_if_inst();
		EnterRule("if_inst", 22);
		TraceIn("if_inst", 22);
		try { DebugEnterRule(GrammarFileName, "if_inst");
		DebugLocation(612, 89);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:612:9: ( 'if' '(' expression ')' '{' someStatements '}' ( 'else' '{' someStatements '}' )? )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:612:11: 'if' '(' expression ')' '{' someStatements '}' ( 'else' '{' someStatements '}' )?
			{
			DebugLocation(612, 11);
			Match(input,46,Follow._46_in_if_inst912); 
			DebugLocation(612, 16);
			Match(input,18,Follow._18_in_if_inst914); 
			DebugLocation(612, 20);
			PushFollow(Follow._expression_in_if_inst916);
			expression();
			PopFollow();

			DebugLocation(612, 31);
			Match(input,19,Follow._19_in_if_inst918); 
			DebugLocation(612, 35);
			Match(input,57,Follow._57_in_if_inst920); 
			DebugLocation(612, 39);
			PushFollow(Follow._someStatements_in_if_inst922);
			someStatements();
			PopFollow();

			DebugLocation(612, 54);
			Match(input,58,Follow._58_in_if_inst924); 
			DebugLocation(612, 58);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:612:58: ( 'else' '{' someStatements '}' )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, decisionCanBacktrack[23]);
			int LA23_0 = input.LA(1);

			if ((LA23_0==44))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:612:59: 'else' '{' someStatements '}'
				{
				DebugLocation(612, 59);
				Match(input,44,Follow._44_in_if_inst927); 
				DebugLocation(612, 66);
				Match(input,57,Follow._57_in_if_inst929); 
				DebugLocation(612, 70);
				PushFollow(Follow._someStatements_in_if_inst931);
				someStatements();
				PopFollow();

				DebugLocation(612, 85);
				Match(input,58,Follow._58_in_if_inst933); 

				}
				break;

			}
			} finally { DebugExitSubRule(23); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("if_inst", 22);
			LeaveRule("if_inst", 22);
			LeaveRule_if_inst();
	    }
	 	DebugLocation(612, 89);
		} finally { DebugExitRule(GrammarFileName, "if_inst"); }
		return;

	}
	// $ANTLR end "if_inst"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_while_inst() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_while_inst() {}

	// $ANTLR start "while_inst"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:614:1: while_inst : 'while' '(' expression ')' '{' someStatements '}' ;
	[GrammarRule("while_inst")]
	private void while_inst()
	{
		EnterRule_while_inst();
		EnterRule("while_inst", 23);
		TraceIn("while_inst", 23);
		try { DebugEnterRule(GrammarFileName, "while_inst");
		DebugLocation(614, 62);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:614:12: ( 'while' '(' expression ')' '{' someStatements '}' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:614:14: 'while' '(' expression ')' '{' someStatements '}'
			{
			DebugLocation(614, 14);
			Match(input,56,Follow._56_in_while_inst943); 
			DebugLocation(614, 22);
			Match(input,18,Follow._18_in_while_inst945); 
			DebugLocation(614, 26);
			PushFollow(Follow._expression_in_while_inst947);
			expression();
			PopFollow();

			DebugLocation(614, 37);
			Match(input,19,Follow._19_in_while_inst949); 
			DebugLocation(614, 41);
			Match(input,57,Follow._57_in_while_inst951); 
			DebugLocation(614, 45);
			PushFollow(Follow._someStatements_in_while_inst953);
			someStatements();
			PopFollow();

			DebugLocation(614, 60);
			Match(input,58,Follow._58_in_while_inst955); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("while_inst", 23);
			LeaveRule("while_inst", 23);
			LeaveRule_while_inst();
	    }
	 	DebugLocation(614, 62);
		} finally { DebugExitRule(GrammarFileName, "while_inst"); }
		return;

	}
	// $ANTLR end "while_inst"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_return_inst() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_return_inst() {}

	// $ANTLR start "return_inst"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:616:1: return_inst : 'return' ( expression )? ';' ;
	[GrammarRule("return_inst")]
	private void return_inst()
	{
		EnterRule_return_inst();
		EnterRule("return_inst", 24);
		TraceIn("return_inst", 24);

	    	bool returnsSomething = false;
	    	VariableSymbol varToReturn;
	    	MethodSymbol method;

		try { DebugEnterRule(GrammarFileName, "return_inst");
		DebugLocation(616, 2);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:622:3: ( 'return' ( expression )? ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:623:3: 'return' ( expression )? ';'
			{
			DebugLocation(623, 3);
			method = (MethodSymbol)actualScope;
			DebugLocation(624, 3);
			Match(input,53,Follow._53_in_return_inst974); 
			DebugLocation(626, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:626:3: ( expression )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, decisionCanBacktrack[24]);
			int LA24_0 = input.LA(1);

			if ((LA24_0==CHAR||LA24_0==DOUBLE||(LA24_0>=ID && LA24_0<=INT)||LA24_0==18||LA24_0==54))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:628:3: expression
				{
				DebugLocation(628, 3);

						returnsSomething = true;
						if(method.returnsVoid()) {
							string msg = "Error en return: No se permite regresar un valor en el metodo void " + method.fullyQualifiedName();
							manageException(new Exception(msg));
						}
						
				DebugLocation(635, 3);
				PushFollow(Follow._expression_in_return_inst993);
				expression();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(639, 3);

					if(!method.returnsVoid() && !returnsSomething) {
						string msg = "Error en return: " + method.fullyQualifiedName() + " debe regresar un valor tipo " + method.returnType.name;
						manageException(new Exception(msg));
					}
					if(method.returnsVoid()) {
						quadruplesList.addRETURNVOID();
					}
					else {
						varToReturn = pOperandos.Pop();
						if(!directory.validAssignment(method.returnType, varToReturn.type)) {
							string msg = "Error en return: Tipo " + varToReturn.type.name + " no se puede regresar como tipo " + method.returnType.name
									+ " en " + method.fullyQualifiedName();
							manageException(new Exception(msg));
						}
						quadruplesList.addRETURN(varToReturn.address.ToString());
					}
					
					
			DebugLocation(659, 3);
			Match(input,27,Follow._27_in_return_inst1015); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("return_inst", 24);
			LeaveRule("return_inst", 24);
			LeaveRule_return_inst();
	    }
	 	DebugLocation(660, 2);
		} finally { DebugExitRule(GrammarFileName, "return_inst"); }
		return;

	}
	// $ANTLR end "return_inst"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_read() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_read() {}

	// $ANTLR start "read"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:662:1: read : 'read' '(' designator ')' ';' ;
	[GrammarRule("read")]
	private void read()
	{
		EnterRule_read();
		EnterRule("read", 25);
		TraceIn("read", 25);
		try { DebugEnterRule(GrammarFileName, "read");
		DebugLocation(662, 36);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:662:6: ( 'read' '(' designator ')' ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:662:8: 'read' '(' designator ')' ';'
			{
			DebugLocation(662, 8);
			Match(input,52,Follow._52_in_read1026); 
			DebugLocation(662, 15);
			Match(input,18,Follow._18_in_read1028); 
			DebugLocation(662, 19);
			PushFollow(Follow._designator_in_read1030);
			designator();
			PopFollow();

			DebugLocation(662, 30);
			Match(input,19,Follow._19_in_read1032); 
			DebugLocation(662, 34);
			Match(input,27,Follow._27_in_read1034); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("read", 25);
			LeaveRule("read", 25);
			LeaveRule_read();
	    }
	 	DebugLocation(662, 36);
		} finally { DebugExitRule(GrammarFileName, "read"); }
		return;

	}
	// $ANTLR end "read"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_print() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_print() {}

	// $ANTLR start "print"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:664:1: print : 'print' '(' expression ')' ';' ;
	[GrammarRule("print")]
	private void print()
	{
		EnterRule_print();
		EnterRule("print", 26);
		TraceIn("print", 26);
		try { DebugEnterRule(GrammarFileName, "print");
		DebugLocation(664, 38);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:664:7: ( 'print' '(' expression ')' ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:664:9: 'print' '(' expression ')' ';'
			{
			DebugLocation(664, 9);
			Match(input,51,Follow._51_in_print1042); 
			DebugLocation(664, 17);
			Match(input,18,Follow._18_in_print1044); 
			DebugLocation(664, 21);
			PushFollow(Follow._expression_in_print1046);
			expression();
			PopFollow();

			DebugLocation(664, 32);
			Match(input,19,Follow._19_in_print1048); 
			DebugLocation(664, 36);
			Match(input,27,Follow._27_in_print1050); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("print", 26);
			LeaveRule("print", 26);
			LeaveRule_print();
	    }
	 	DebugLocation(664, 38);
		} finally { DebugExitRule(GrammarFileName, "print"); }
		return;

	}
	// $ANTLR end "print"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}

	// $ANTLR start "expression"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:666:1: expression : es ( relOp es )? ;
	[GrammarRule("expression")]
	private void expression()
	{
		EnterRule_expression();
		EnterRule("expression", 27);
		TraceIn("expression", 27);
	    string relOp12 = default(string);

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(666, 110);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:667:2: ( es ( relOp es )? )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:667:4: es ( relOp es )?
			{
			DebugLocation(667, 4);
			statement_stack.Peek().inExpression =  true;
			DebugLocation(668, 3);
			PushFollow(Follow._es_in_expression1063);
			es();
			PopFollow();

			DebugLocation(668, 6);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:668:6: ( relOp es )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, decisionCanBacktrack[25]);
			int LA25_0 = input.LA(1);

			if ((LA25_0==17||(LA25_0>=28 && LA25_0<=29)||(LA25_0>=31 && LA25_0<=33)))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:668:7: relOp es
				{
				DebugLocation(668, 7);
				PushFollow(Follow._relOp_in_expression1066);
				relOp12=relOp();
				PopFollow();

				DebugLocation(668, 13);
				pOperadores.Push(relOp12);
				DebugLocation(668, 50);
				PushFollow(Follow._es_in_expression1070);
				es();
				PopFollow();

				DebugLocation(668, 53);
				aplicaOperadorPendienteQueSea(operadoresRelacionales);

				}
				break;

			}
			} finally { DebugExitSubRule(25); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("expression", 27);
			LeaveRule("expression", 27);
			LeaveRule_expression();
	    }
	 	DebugLocation(668, 110);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_es() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_es() {}

	// $ANTLR start "es"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:670:1: es : term (op= ( '+' | '-' | 'or' ) term )* ;
	[GrammarRule("es")]
	private void es()
	{
		EnterRule_es();
		EnterRule("es", 28);
		TraceIn("es", 28);
	    IToken op = default(IToken);

		try { DebugEnterRule(GrammarFileName, "es");
		DebugLocation(670, 4);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:671:2: ( term (op= ( '+' | '-' | 'or' ) term )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:671:4: term (op= ( '+' | '-' | 'or' ) term )*
			{
			DebugLocation(671, 4);
			PushFollow(Follow._term_in_es1083);
			term();
			PopFollow();

			DebugLocation(671, 9);
			aplicaOperadorPendienteQueSea(masMenosOr);
			DebugLocation(672, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:672:3: (op= ( '+' | '-' | 'or' ) term )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, decisionCanBacktrack[26]);
				int LA26_0 = input.LA(1);

				if ((LA26_0==21||LA26_0==23||LA26_0==50))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:673:4: op= ( '+' | '-' | 'or' ) term
					{
					DebugLocation(673, 7);

					op=(IToken)input.LT(1);
					if (input.LA(1)==21||input.LA(1)==23||input.LA(1)==50)
					{
						input.Consume();
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(673, 28);
					pOperadores.Push((op!=null?op.Text:null));
					DebugLocation(674, 4);
					PushFollow(Follow._term_in_es1116);
					term();
					PopFollow();

					DebugLocation(674, 9);
					aplicaOperadorPendienteQueSea(masMenosOr);

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("es", 28);
			LeaveRule("es", 28);
			LeaveRule_es();
	    }
	 	DebugLocation(675, 4);
		} finally { DebugExitRule(GrammarFileName, "es"); }
		return;

	}
	// $ANTLR end "es"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_term() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_term() {}

	// $ANTLR start "term"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:677:1: term : factor (op= ( '*' | '/' | 'and' ) factor )* ;
	[GrammarRule("term")]
	private void term()
	{
		EnterRule_term();
		EnterRule("term", 29);
		TraceIn("term", 29);
	    IToken op = default(IToken);

		try { DebugEnterRule(GrammarFileName, "term");
		DebugLocation(677, 4);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:677:6: ( factor (op= ( '*' | '/' | 'and' ) factor )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:677:8: factor (op= ( '*' | '/' | 'and' ) factor )*
			{
			DebugLocation(677, 8);
			PushFollow(Follow._factor_in_term1132);
			factor();
			PopFollow();

			DebugLocation(677, 15);
			aplicaOperadorPendienteQueSea(porEntreAnd);
			DebugLocation(678, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:678:3: (op= ( '*' | '/' | 'and' ) factor )*
			try { DebugEnterSubRule(27);
			while (true)
			{
				int alt27=2;
				try { DebugEnterDecision(27, decisionCanBacktrack[27]);
				int LA27_0 = input.LA(1);

				if ((LA27_0==20||LA27_0==25||LA27_0==40))
				{
					alt27 = 1;
				}


				} finally { DebugExitDecision(27); }
				switch ( alt27 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:679:4: op= ( '*' | '/' | 'and' ) factor
					{
					DebugLocation(679, 7);

					op=(IToken)input.LT(1);
					if (input.LA(1)==20||input.LA(1)==25||input.LA(1)==40)
					{
						input.Consume();
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(679, 29);
					pOperadores.Push((op!=null?op.Text:null));
					DebugLocation(680, 4);
					PushFollow(Follow._factor_in_term1165);
					factor();
					PopFollow();

					DebugLocation(680, 11);
					aplicaOperadorPendienteQueSea(porEntreAnd);

					}
					break;

				default:
					goto loop27;
				}
			}

			loop27:
				;

			} finally { DebugExitSubRule(27); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("term", 29);
			LeaveRule("term", 29);
			LeaveRule_term();
	    }
	 	DebugLocation(681, 4);
		} finally { DebugExitRule(GrammarFileName, "term"); }
		return;

	}
	// $ANTLR end "term"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_factor() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_factor() {}

	// $ANTLR start "factor"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:683:1: factor : ( invoke |v= ID |obj= ID '.' var= ID | 'this' '.' var= ID | ID '[' expression ']' | INT | CHAR | DOUBLE | '(' expression ')' );
	[GrammarRule("factor")]
	private void factor()
	{
		EnterRule_factor();
		EnterRule("factor", 30);
		TraceIn("factor", 30);
	    IToken v = default(IToken);
	    IToken obj = default(IToken);
	    IToken var = default(IToken);
	    IToken ID13 = default(IToken);
	    IToken INT14 = default(IToken);
	    IToken CHAR15 = default(IToken);
	    IToken DOUBLE16 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "factor");
		DebugLocation(683, 2);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:684:2: ( invoke |v= ID |obj= ID '.' var= ID | 'this' '.' var= ID | ID '[' expression ']' | INT | CHAR | DOUBLE | '(' expression ')' )
			int alt28=9;
			try { DebugEnterDecision(28, decisionCanBacktrack[28]);
			switch (input.LA(1))
			{
			case ID:
				{
				switch (input.LA(2))
				{
				case 24:
					{
					int LA28_7 = input.LA(3);

					if ((LA28_7==ID))
					{
						int LA28_11 = input.LA(4);

						if ((LA28_11==17||(LA28_11>=19 && LA28_11<=23)||LA28_11==25||(LA28_11>=27 && LA28_11<=29)||(LA28_11>=31 && LA28_11<=33)||(LA28_11>=39 && LA28_11<=40)||LA28_11==50))
						{
							alt28 = 3;
						}
						else if ((LA28_11==18))
						{
							alt28 = 1;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 28, 11, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 28, 7, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 38:
					{
					alt28 = 5;
					}
					break;
				case 17:
				case 19:
				case 20:
				case 21:
				case 22:
				case 23:
				case 25:
				case 27:
				case 28:
				case 29:
				case 31:
				case 32:
				case 33:
				case 39:
				case 40:
				case 50:
					{
					alt28 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 28, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case 54:
				{
				int LA28_2 = input.LA(2);

				if ((LA28_2==24))
				{
					int LA28_10 = input.LA(3);

					if ((LA28_10==ID))
					{
						int LA28_12 = input.LA(4);

						if ((LA28_12==17||(LA28_12>=19 && LA28_12<=23)||LA28_12==25||(LA28_12>=27 && LA28_12<=29)||(LA28_12>=31 && LA28_12<=33)||(LA28_12>=39 && LA28_12<=40)||LA28_12==50))
						{
							alt28 = 4;
						}
						else if ((LA28_12==18))
						{
							alt28 = 1;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 28, 12, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 28, 10, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 28, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INT:
				{
				alt28 = 6;
				}
				break;
			case CHAR:
				{
				alt28 = 7;
				}
				break;
			case DOUBLE:
				{
				alt28 = 8;
				}
				break;
			case 18:
				{
				alt28 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 28, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:684:4: invoke
				{
				DebugLocation(684, 4);
				PushFollow(Follow._invoke_in_factor1181);
				invoke();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:685:5: v= ID
				{
				DebugLocation(685, 7);
				v=(IToken)Match(input,ID,Follow._ID_in_factor1191); 
				DebugLocation(686, 4);

							VariableSymbol varSymbol = getVariable((v!=null?v.Text:null));
							pOperandos.Push(varSymbol);
							

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:690:5: obj= ID '.' var= ID
				{
				DebugLocation(690, 9);
				obj=(IToken)Match(input,ID,Follow._ID_in_factor1207); 
				DebugLocation(690, 14);
				Match(input,24,Follow._24_in_factor1209); 
				DebugLocation(690, 22);
				var=(IToken)Match(input,ID,Follow._ID_in_factor1215); 
				DebugLocation(691, 4);

							VariableSymbol objeto = getVariable((obj!=null?obj.Text:null));
							VariableSymbol field = getField((obj!=null?obj.Text:null), (var!=null?var.Text:null));
							VariableSymbol temp = getNewTemporalVarOfType(field.type.name);
							pOperandos.Push(temp);
							quadruplesList.addGETFIELD(temp.address.ToString(), objeto.address.ToString(), field.address.ToString());
							

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:698:5: 'this' '.' var= ID
				{
				DebugLocation(698, 5);
				Match(input,54,Follow._54_in_factor1227); 
				DebugLocation(698, 12);
				Match(input,24,Follow._24_in_factor1229); 
				DebugLocation(698, 20);
				var=(IToken)Match(input,ID,Follow._ID_in_factor1235); 
				DebugLocation(699, 4);

							VariableSymbol field = getInstanceVariable((var!=null?var.Text:null));
							VariableSymbol temp = getNewTemporalVarOfType(field.type.name);
							pOperandos.Push(temp);
							MethodSymbol method = (MethodSymbol)actualScope;
							quadruplesList.addGETFIELD(temp.address.ToString(), method.getThisParameterAddress(), field.address.ToString());
							

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:706:5: ID '[' expression ']'
				{
				DebugLocation(706, 5);
				ID13=(IToken)Match(input,ID,Follow._ID_in_factor1247); 
				DebugLocation(706, 8);
				Match(input,38,Follow._38_in_factor1249); 
				DebugLocation(706, 12);
				pOperadores.Push("[");
				DebugLocation(706, 37);
				PushFollow(Follow._expression_in_factor1253);
				expression();
				PopFollow();

				DebugLocation(706, 48);
				Match(input,39,Follow._39_in_factor1255); 
				DebugLocation(706, 52);
				pOperadores.Pop();
				DebugLocation(707, 4);

							verifyIsVector((ID13!=null?ID13.Text:null));
							VariableSymbol index = pOperandos.Pop();
							if(!index.type.name.Equals("int")) {
								manageException(new Exception("El subindice del Vector " + (ID13!=null?ID13.Text:null) + " debe ser de tipo int."));
							}
							else {
								VariableSymbol arr = getVariable((ID13!=null?ID13.Text:null));
								string tipo = typeOfVector(arr.type.name);
								VariableSymbol temp = getNewTemporalVarOfType(tipo);
								pOperandos.Push(temp);
								quadruplesList.addGETVECTORELEM(temp.address.ToString(), arr.address.ToString(), index.address.ToString());
							}
							

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:721:5: INT
				{
				DebugLocation(721, 5);
				INT14=(IToken)Match(input,INT,Follow._INT_in_factor1269); 
				DebugLocation(721, 9);
				pushICONST((INT14!=null?INT14.Text:null));

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:722:5: CHAR
				{
				DebugLocation(722, 5);
				CHAR15=(IToken)Match(input,CHAR,Follow._CHAR_in_factor1278); 
				DebugLocation(722, 10);
				pushCCONST((CHAR15!=null?CHAR15.Text:null));

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:723:5: DOUBLE
				{
				DebugLocation(723, 5);
				DOUBLE16=(IToken)Match(input,DOUBLE,Follow._DOUBLE_in_factor1287); 
				DebugLocation(723, 12);
				pushDCONST((DOUBLE16!=null?DOUBLE16.Text:null));

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:724:5: '(' expression ')'
				{
				DebugLocation(724, 5);
				Match(input,18,Follow._18_in_factor1296); 
				DebugLocation(724, 8);
				pOperadores.Push("(");
				DebugLocation(724, 33);
				PushFollow(Follow._expression_in_factor1299);
				expression();
				PopFollow();

				DebugLocation(724, 44);
				Match(input,19,Follow._19_in_factor1301); 
				DebugLocation(724, 48);
				pOperadores.Pop();

				}
				break;

			}
		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("factor", 30);
			LeaveRule("factor", 30);
			LeaveRule_factor();
	    }
	 	DebugLocation(725, 2);
		} finally { DebugExitRule(GrammarFileName, "factor"); }
		return;

	}
	// $ANTLR end "factor"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_relOp() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_relOp() {}

	// $ANTLR start "relOp"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:727:1: relOp returns [string operador] : op= ( '==' | '!=' | '>' | '>=' | '<' | '<=' ) ;
	[GrammarRule("relOp")]
	private string relOp()
	{
		EnterRule_relOp();
		EnterRule("relOp", 31);
		TraceIn("relOp", 31);
	    string operador = default(string);


	    IToken op = default(IToken);

		try { DebugEnterRule(GrammarFileName, "relOp");
		DebugLocation(727, 101);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:727:31: (op= ( '==' | '!=' | '>' | '>=' | '<' | '<=' ) )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:727:34: op= ( '==' | '!=' | '>' | '>=' | '<' | '<=' )
			{
			DebugLocation(727, 37);

			op=(IToken)input.LT(1);
			if (input.LA(1)==17||(input.LA(1)>=28 && input.LA(1)<=29)||(input.LA(1)>=31 && input.LA(1)<=33))
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(727, 79);
			operador = (op!=null?op.Text:null);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("relOp", 31);
			LeaveRule("relOp", 31);
			LeaveRule_relOp();
	    }
	 	DebugLocation(727, 101);
		} finally { DebugExitRule(GrammarFileName, "relOp"); }
		return operador;

	}
	// $ANTLR end "relOp"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _classDecl_in_program61 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _classMain_in_program66 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _42_in_classMain75 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _37_in_classMain77 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_classMain79 = new BitSet(new ulong[]{0x81000000000000UL});
		public static readonly BitSet _vars_in_classMain81 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _methods_in_classMain84 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_classMain88 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _42_in_classDecl107 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _ID_in_classDecl113 = new BitSet(new ulong[]{0x200200000000000UL});
		public static readonly BitSet _superClass_in_classDecl116 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_classDecl122 = new BitSet(new ulong[]{0x481000000000000UL});
		public static readonly BitSet _vars_in_classDecl124 = new BitSet(new ulong[]{0x401000000000000UL});
		public static readonly BitSet _methods_in_classDecl127 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_classDecl130 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _45_in_superClass140 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _ID_in_superClass142 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _55_in_vars153 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _26_in_vars155 = new BitSet(new ulong[]{0x8A1C00000802UL});
		public static readonly BitSet _varDecl_in_vars157 = new BitSet(new ulong[]{0x8A1C00000802UL});
		public static readonly BitSet _primitiveType_in_varDecl182 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _referenceType_in_varDecl190 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _ID_in_varDecl195 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _27_in_varDecl211 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_primitiveType230 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _vectorType_in_referenceType256 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_referenceType266 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _34_in_vectorType298 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _36_in_vectorType308 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _35_in_vectorType318 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_voidType339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_formalParamType356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _referenceType_in_formalParamType370 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _48_in_methods389 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _26_in_methods391 = new BitSet(new ulong[]{0x8A1C00008802UL});
		public static readonly BitSet _methodDeclaration_in_methods393 = new BitSet(new ulong[]{0x8A1C00008802UL});
		public static readonly BitSet _primitiveType_in_methodDeclaration412 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _referenceType_in_methodDeclaration420 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _voidType_in_methodDeclaration428 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _ID_in_methodDeclaration435 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _18_in_methodDeclaration443 = new BitSet(new ulong[]{0x8A1C00080800UL});
		public static readonly BitSet _formalParameters_in_methodDeclaration445 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _19_in_methodDeclaration448 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_methodDeclaration451 = new BitSet(new ulong[]{0x5F8400008000800UL});
		public static readonly BitSet _vars_in_methodDeclaration455 = new BitSet(new ulong[]{0x578400008000800UL});
		public static readonly BitSet _someStatements_in_methodDeclaration458 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_methodDeclaration460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _formalParamType_in_formalParam480 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _ID_in_formalParam482 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _formalParam_in_formalParameters498 = new BitSet(new ulong[]{0x400002UL});
		public static readonly BitSet _22_in_formalParameters501 = new BitSet(new ulong[]{0x8A1C00000800UL});
		public static readonly BitSet _formalParam_in_formalParameters503 = new BitSet(new ulong[]{0x400002UL});
		public static readonly BitSet _statement_in_someStatements515 = new BitSet(new ulong[]{0x178400008000802UL});
		public static readonly BitSet _assignment_in_statement539 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _invoke_in_statement545 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _27_in_statement547 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _if_inst_in_statement553 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _while_inst_in_statement559 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _return_inst_in_statement565 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _read_in_statement571 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _print_in_statement577 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _27_in_statement583 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _designator_in_assignment603 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_assignment605 = new BitSet(new ulong[]{0x420000000418A0UL});
		public static readonly BitSet _expression_in_assignment614 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _49_in_assignment620 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _ID_in_assignment622 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _18_in_assignment624 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _19_in_assignment626 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _49_in_assignment638 = new BitSet(new ulong[]{0x1C00000000UL});
		public static readonly BitSet _vectorType_in_assignment640 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _38_in_assignment642 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _INT_in_assignment646 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_assignment648 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _27_in_assignment671 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_designator690 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_designator707 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_designator710 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _ID_in_designator716 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _54_in_designator729 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_designator731 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _ID_in_designator737 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_designator756 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _38_in_designator758 = new BitSet(new ulong[]{0x400000000418A0UL});
		public static readonly BitSet _expression_in_designator762 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_designator764 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_invoke795 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _54_in_invoke800 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_invoke808 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _ID_in_invoke814 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _actualParameters_in_invoke824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _18_in_actualParameters851 = new BitSet(new ulong[]{0x400000000C18A0UL});
		public static readonly BitSet _expression_in_actualParameters861 = new BitSet(new ulong[]{0x480000UL});
		public static readonly BitSet _22_in_actualParameters874 = new BitSet(new ulong[]{0x400000000418A0UL});
		public static readonly BitSet _expression_in_actualParameters876 = new BitSet(new ulong[]{0x480000UL});
		public static readonly BitSet _19_in_actualParameters890 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _46_in_if_inst912 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _18_in_if_inst914 = new BitSet(new ulong[]{0x400000000418A0UL});
		public static readonly BitSet _expression_in_if_inst916 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _19_in_if_inst918 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_if_inst920 = new BitSet(new ulong[]{0x578400008000800UL});
		public static readonly BitSet _someStatements_in_if_inst922 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_if_inst924 = new BitSet(new ulong[]{0x100000000002UL});
		public static readonly BitSet _44_in_if_inst927 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_if_inst929 = new BitSet(new ulong[]{0x578400008000800UL});
		public static readonly BitSet _someStatements_in_if_inst931 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_if_inst933 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _56_in_while_inst943 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _18_in_while_inst945 = new BitSet(new ulong[]{0x400000000418A0UL});
		public static readonly BitSet _expression_in_while_inst947 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _19_in_while_inst949 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_while_inst951 = new BitSet(new ulong[]{0x578400008000800UL});
		public static readonly BitSet _someStatements_in_while_inst953 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_while_inst955 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _53_in_return_inst974 = new BitSet(new ulong[]{0x400000080418A0UL});
		public static readonly BitSet _expression_in_return_inst993 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _27_in_return_inst1015 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _52_in_read1026 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _18_in_read1028 = new BitSet(new ulong[]{0x40000000000800UL});
		public static readonly BitSet _designator_in_read1030 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _19_in_read1032 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _27_in_read1034 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _51_in_print1042 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _18_in_print1044 = new BitSet(new ulong[]{0x400000000418A0UL});
		public static readonly BitSet _expression_in_print1046 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _19_in_print1048 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _27_in_print1050 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _es_in_expression1063 = new BitSet(new ulong[]{0x3B0020002UL});
		public static readonly BitSet _relOp_in_expression1066 = new BitSet(new ulong[]{0x400000000418A0UL});
		public static readonly BitSet _es_in_expression1070 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _term_in_es1083 = new BitSet(new ulong[]{0x4000000A00002UL});
		public static readonly BitSet _set_in_es1098 = new BitSet(new ulong[]{0x400000000418A0UL});
		public static readonly BitSet _term_in_es1116 = new BitSet(new ulong[]{0x4000000A00002UL});
		public static readonly BitSet _factor_in_term1132 = new BitSet(new ulong[]{0x10002100002UL});
		public static readonly BitSet _set_in_term1147 = new BitSet(new ulong[]{0x400000000418A0UL});
		public static readonly BitSet _factor_in_term1165 = new BitSet(new ulong[]{0x10002100002UL});
		public static readonly BitSet _invoke_in_factor1181 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_factor1191 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_factor1207 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_factor1209 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _ID_in_factor1215 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _54_in_factor1227 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_factor1229 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _ID_in_factor1235 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_factor1247 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _38_in_factor1249 = new BitSet(new ulong[]{0x400000000418A0UL});
		public static readonly BitSet _expression_in_factor1253 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_factor1255 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_factor1269 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHAR_in_factor1278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOUBLE_in_factor1287 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _18_in_factor1296 = new BitSet(new ulong[]{0x400000000418A0UL});
		public static readonly BitSet _expression_in_factor1299 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _19_in_factor1301 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_relOp1322 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
