//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g 2011-10-26 20:00:20

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


	using System;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class ReptileParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "CHAR", "COMMENT", "DOUBLE", "ESC_SEQ", "EXPONENT", "HEX_DIGIT", "ID", "INT", "OCTAL_ESC", "UNICODE_ESC", "WS", "'!='", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "':'", "';'", "'<'", "'<='", "'='", "'=='", "'>'", "'>='", "'['", "']'", "'and'", "'char'", "'class'", "'classes'", "'double'", "'else'", "'extends'", "'if'", "'int'", "'main'", "'methods'", "'new'", "'or'", "'print'", "'read'", "'return'", "'this'", "'vars'", "'void'", "'while'", "'{'", "'}'"
	};
	public const int EOF=-1;
	public const int T__15=15;
	public const int T__16=16;
	public const int T__17=17;
	public const int T__18=18;
	public const int T__19=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int CHAR=4;
	public const int COMMENT=5;
	public const int DOUBLE=6;
	public const int ESC_SEQ=7;
	public const int EXPONENT=8;
	public const int HEX_DIGIT=9;
	public const int ID=10;
	public const int INT=11;
	public const int OCTAL_ESC=12;
	public const int UNICODE_ESC=13;
	public const int WS=14;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public ReptileParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public ReptileParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return ReptileParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g"; } }


	SymbolTable directory;
	Stack<string> pOperadores = new Stack<string>();
	Stack<VariableSymbol> pOperandos = new Stack<VariableSymbol>();
	LinkedList<Quadruple> quadruples = new LinkedList<Quadruple>();

	Scope actualScope;
	Scope globalScope = new GlobalScope();

	LinkedList<string> operadoresRelacionales = new LinkedList<string>(new string[] {"==", "!=", ">", "<", ">=", "<="});
	LinkedList<string> masMenosOr = new LinkedList<string>(new string[] {"+", "-", "or"});
	LinkedList<string> porEntreAnd = new LinkedList<string>(new string[] {"*", "/", "and"});

	protected override object RecoverFromMismatchedToken(IIntStream input, int ttype, BitSet follow)
	{
	      throw new MismatchedTokenException(ttype, input);
	}

	public override object RecoverFromMismatchedSet(IIntStream input, RecognitionException e, BitSet follow)
	{
	        throw e;
	}

	void createDirectories() {
		directory = new SymbolTable();
	}

	void defineScopeGlobal() {
		globalScope = new GlobalScope();
		directory.Add("GlobalScope", (ScopeWithMethods)globalScope);
	}

	void registerClass(string className, string superClase) {
		try {
			ClassSymbol clasePadre = null;
			if(superClase != null) {
				try {
					clasePadre = directory.findType(superClase);
				}
				catch(Exception exception) {
					manageException(exception);
				}
			}
			
			ClassSymbol newClass = new ClassSymbol(className, clasePadre);
			directory.Add(newClass.name, newClass);
			actualScope = newClass;
		}
		catch(Exception exception) {
			manageException(exception);	//manejarException
		}
	}

	/*
	void registerSuperClass(ClassSymbol clase, string superClase) {
		try {
			ClassSymbol clasePadre;
			clasePadre = directory.findType(superClase);
			clase.superClass = clasePadre;
		}
		catch(Exception exception) {
			manageException(exception);
		}
	}
	*/

	//usado con metodos y variables
	void registerVariableInScope(string variableName, ClassSymbol tipo) {
		VariableSymbol variable = new VariableSymbol(variableName, tipo);
		actualScope.defineVariable(variable.name, variable);
	}

	void registrarMetodo(ClassSymbol tipoRetorno, string methodName) {
		ScopeWithMethods scope = (ScopeWithMethods)actualScope;
		MethodSymbol methodSymbol = new MethodSymbol(methodName, tipoRetorno, scope);
		scope.defineMethod(methodName, methodSymbol);
		actualScope = methodSymbol;
	}

	void registerVariableInMethod(string variableName, string tipo) {
		ClassSymbol tipoParam = directory.findType(tipo);
		VariableSymbol variableSymbol = new VariableSymbol(variableName, tipoParam);
		registerVariableInScope(variableName, tipoParam);
		MethodSymbol methodSymbol = (MethodSymbol) actualScope;	//casting para poder llamar a defineParameter(..)
		methodSymbol.defineParameter(variableName, variableSymbol);
	}

	bool verifyVariableIsDefinedInMethod(string variable) {
		VariableSymbol varSymbol = actualScope.getVariableSymbol(variable);
		if(varSymbol == null) {
			generateVariableNotFoundError(variable);
			return false;
		}
		return true;
	}

	void generateVariableNotFoundError(string variable) {
			Exception e = new Exception("No se encontro la variable " + variable);
			manageException(e);
	}

	VariableSymbol verifyObjectAndInstVariableDefined(string objeto, string instVar) {
		if(verifyVariableIsDefinedInMethod(objeto)) {
			VariableSymbol obj = actualScope.getVariableSymbol(objeto);
			ClassSymbol tipo = obj.type;
			VariableSymbol varDeInstancia = tipo.getVariableSymbol(instVar);
			if(varDeInstancia == null) {
				generateInstanceVariableNotFoundError(tipo.name, instVar);
			}
			else {
				return varDeInstancia;
			}
		}
		return null;
	}

	void generateInstanceVariableNotFoundError(string clase, string variable) {
		Exception e = new Exception("No se encontro la variable de instancia " + variable + " en el tipo " + clase);
		manageException(e);
	}

	VariableSymbol verifyInstanceVariableDefinedInThis(string var) {
		ScopeWithMethods enclosingScope = ((MethodSymbol)actualScope).enclosingScope;
		if(enclosingScope is GlobalScope) {
			Exception e = new Exception("No se puede usar 'this' si no es dentro de una clase.");
			manageException(e);
		}
		else {
			ClassSymbol clase = (ClassSymbol)enclosingScope;
			VariableSymbol instVariable = clase.getVariableSymbol(var);
			if(instVariable == null) {
				generateInstanceVariableNotFoundError(clase.name, var);
			}
			else {
				return instVariable;
			}
		}
		return null;
	}

	void verifyIsArray(string var) {
		if(verifyVariableIsDefinedInMethod(var)) {
			VariableSymbol arr = actualScope.getVariableSymbol(var);
			if(!arr.type.isArrayType()) {
				generateIsNotArrayError(arr.name);
			}
		}
	}

	void generateIsNotArrayError(string variable) {
		Exception e = new Exception("La variable " + variable + " no es un arreglo y por tanto no tiene definido el operador [] .");
		manageException(e);
	}

	public bool tiposSonCompatiblesEnOperacion() {
		VariableSymbol right = pOperandos.Pop();
		VariableSymbol left = pOperandos.Pop();
		pOperandos.Push(left);
		pOperandos.Push(right);
		string operador = pOperadores.Peek();
		ClassSymbol tipoResultado = directory.resultType(left.type, right.type, operador);
		if(tipoResultado.isVoidType()) {
			return false;
		}
		return true;
	}

	public bool isRelationalOperator(string operador) {
		return operador.Equals(">") || operador.Equals("<") || operador.Equals(">=")
			|| operador.Equals("<=");
	}

	public bool isPorEntreAnd(string operador) {
		return operador.Equals("*") || operador.Equals("/") || operador.Equals("and");
	}

	public void aplicaOperadorPendienteQueSea(LinkedList<string> operadoresBuscados) {
		if(pOperadores.Count > 0) {
			string operador = pOperadores.Peek();
			if(operadoresBuscados.Contains(operador)) {
				if(tiposSonCompatiblesEnOperacion()) {
					pOperadores.Pop();
					VariableSymbol right = pOperandos.Pop();
					VariableSymbol left = pOperandos.Pop();
					ClassSymbol tipoResultado = directory.resultType(left.type, right.type, operador);
					//TODO el temporal debe obtenerse del avail
					VariableSymbol temporal = new VariableSymbol("temporal", tipoResultado);
					 
					//TODO generar cuadruplo usando operador, left, right y temporal
					
					pOperandos.Push(temporal);
				}
				else {
					//TODO accion correctiva: sacar los dos operandos y el operador de sus pilas
					pOperadores.Pop();
					VariableSymbol right = pOperandos.Pop();
					VariableSymbol left = pOperandos.Pop();
					manageException(new Exception("Operador \"" + operador + "\" no es valido para " + 
						left.type.name + " " + left.name + ", " + right.type.name + " " + right.name));
				}
			}
		}
	}

	public static void manageException(Exception e) {
		Console.WriteLine(e.ToString());
		throw new RecognitionException("Se encontro Error semantico\n");
	}


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_program() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_program() {}

	// $ANTLR start "program"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:242:8: public program : ( classes )? ( vars )? ( methods )? mainMethod ;
	[GrammarRule("program")]
	public void program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(242, 124);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:242:16: ( ( classes )? ( vars )? ( methods )? mainMethod )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:242:18: ( classes )? ( vars )? ( methods )? mainMethod
			{
			DebugLocation(242, 18);
			createDirectories(); defineScopeGlobal();
			DebugLocation(242, 62);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:242:62: ( classes )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_0 = input.LA(1);

			if ((LA1_0==37))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:242:62: classes
				{
				DebugLocation(242, 62);
				PushFollow(Follow._classes_in_program61);
				classes();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(242, 71);
			actualScope = globalScope;
			DebugLocation(242, 100);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:242:100: ( vars )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
			int LA2_0 = input.LA(1);

			if ((LA2_0==51))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:242:100: vars
				{
				DebugLocation(242, 100);
				PushFollow(Follow._vars_in_program66);
				vars();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(242, 106);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:242:106: ( methods )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_0 = input.LA(1);

			if ((LA3_0==44))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:242:106: methods
				{
				DebugLocation(242, 106);
				PushFollow(Follow._methods_in_program69);
				methods();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(242, 115);
			PushFollow(Follow._mainMethod_in_program72);
			mainMethod();
			PopFollow();


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
	    }
	 	DebugLocation(242, 124);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return;

	}
	// $ANTLR end "program"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_mainMethod() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_mainMethod() {}

	// $ANTLR start "mainMethod"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:244:1: mainMethod : 'void' 'main' '(' ')' '{' ( vars )? someStatements '}' ;
	[GrammarRule("mainMethod")]
	private void mainMethod()
	{
		EnterRule_mainMethod();
		EnterRule("mainMethod", 2);
		TraceIn("mainMethod", 2);
		try { DebugEnterRule(GrammarFileName, "mainMethod");
		DebugLocation(244, 116);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:245:2: ( 'void' 'main' '(' ')' '{' ( vars )? someStatements '}' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:245:4: 'void' 'main' '(' ')' '{' ( vars )? someStatements '}'
			{
			DebugLocation(245, 4);
			Match(input,52,Follow._52_in_mainMethod81); 
			DebugLocation(245, 11);
			Match(input,43,Follow._43_in_mainMethod83); 
			DebugLocation(245, 18);
			Match(input,16,Follow._16_in_mainMethod85); 
			DebugLocation(245, 22);
			Match(input,17,Follow._17_in_mainMethod87); 
			DebugLocation(245, 26);
			Match(input,54,Follow._54_in_mainMethod89); 
			DebugLocation(245, 29);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:245:29: ( vars )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, decisionCanBacktrack[4]);
			int LA4_0 = input.LA(1);

			if ((LA4_0==51))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:245:29: vars
				{
				DebugLocation(245, 29);
				PushFollow(Follow._vars_in_mainMethod90);
				vars();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(245, 35);
			PushFollow(Follow._someStatements_in_mainMethod93);
			someStatements();
			PopFollow();

			DebugLocation(245, 50);
			Match(input,55,Follow._55_in_mainMethod95); 
			DebugLocation(245, 54);
			directory.printDirectory(); directory.printTypesDirectory();

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("mainMethod", 2);
			LeaveRule("mainMethod", 2);
			LeaveRule_mainMethod();
	    }
	 	DebugLocation(245, 116);
		} finally { DebugExitRule(GrammarFileName, "mainMethod"); }
		return;

	}
	// $ANTLR end "mainMethod"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_classes() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_classes() {}

	// $ANTLR start "classes"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:247:1: classes : 'classes' ':' ( classDecl )* ;
	[GrammarRule("classes")]
	private void classes()
	{
		EnterRule_classes();
		EnterRule("classes", 3);
		TraceIn("classes", 3);
		try { DebugEnterRule(GrammarFileName, "classes");
		DebugLocation(247, 34);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:247:9: ( 'classes' ':' ( classDecl )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:247:11: 'classes' ':' ( classDecl )*
			{
			DebugLocation(247, 11);
			Match(input,37,Follow._37_in_classes106); 
			DebugLocation(247, 21);
			Match(input,24,Follow._24_in_classes108); 
			DebugLocation(247, 25);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:247:25: ( classDecl )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, decisionCanBacktrack[5]);
				int LA5_0 = input.LA(1);

				if ((LA5_0==36))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:247:25: classDecl
					{
					DebugLocation(247, 25);
					PushFollow(Follow._classDecl_in_classes110);
					classDecl();
					PopFollow();


					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("classes", 3);
			LeaveRule("classes", 3);
			LeaveRule_classes();
	    }
	 	DebugLocation(247, 34);
		} finally { DebugExitRule(GrammarFileName, "classes"); }
		return;

	}
	// $ANTLR end "classes"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_classDecl() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_classDecl() {}

	// $ANTLR start "classDecl"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:249:1: classDecl : 'class' clase= ID ( superClass )? '{' ( vars )? ( methods )? '}' ;
	[GrammarRule("classDecl")]
	private void classDecl()
	{
		EnterRule_classDecl();
		EnterRule("classDecl", 4);
		TraceIn("classDecl", 4);
	    IToken clase = default(IToken);
	    string superClass1 = default(string);

		try { DebugEnterRule(GrammarFileName, "classDecl");
		DebugLocation(249, 117);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:250:5: ( 'class' clase= ID ( superClass )? '{' ( vars )? ( methods )? '}' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:250:9: 'class' clase= ID ( superClass )? '{' ( vars )? ( methods )? '}'
			{
			DebugLocation(250, 9);
			Match(input,36,Follow._36_in_classDecl125); 
			DebugLocation(250, 23);
			clase=(IToken)Match(input,ID,Follow._ID_in_classDecl131); 
			DebugLocation(250, 28);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:250:28: ( superClass )?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, decisionCanBacktrack[6]);
			int LA6_0 = input.LA(1);

			if ((LA6_0==40))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:250:29: superClass
				{
				DebugLocation(250, 29);
				PushFollow(Follow._superClass_in_classDecl134);
				superClass1=superClass();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(6); }

			DebugLocation(250, 42);
			registerClass((clase!=null?clase.Text:null), superClass1);
			DebugLocation(250, 96);
			Match(input,54,Follow._54_in_classDecl140); 
			DebugLocation(250, 100);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:250:100: ( vars )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
			int LA7_0 = input.LA(1);

			if ((LA7_0==51))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:250:100: vars
				{
				DebugLocation(250, 100);
				PushFollow(Follow._vars_in_classDecl142);
				vars();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(7); }

			DebugLocation(250, 106);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:250:106: ( methods )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, decisionCanBacktrack[8]);
			int LA8_0 = input.LA(1);

			if ((LA8_0==44))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:250:106: methods
				{
				DebugLocation(250, 106);
				PushFollow(Follow._methods_in_classDecl145);
				methods();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(250, 115);
			Match(input,55,Follow._55_in_classDecl148); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("classDecl", 4);
			LeaveRule("classDecl", 4);
			LeaveRule_classDecl();
	    }
	 	DebugLocation(250, 117);
		} finally { DebugExitRule(GrammarFileName, "classDecl"); }
		return;

	}
	// $ANTLR end "classDecl"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_superClass() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_superClass() {}

	// $ANTLR start "superClass"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:252:1: superClass returns [string superClase] : 'extends' ID ;
	[GrammarRule("superClass")]
	private string superClass()
	{
		EnterRule_superClass();
		EnterRule("superClass", 5);
		TraceIn("superClass", 5);
	    string superClase = default(string);


	    IToken ID2 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "superClass");
		DebugLocation(252, 77);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:252:38: ( 'extends' ID )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:252:40: 'extends' ID
			{
			DebugLocation(252, 40);
			Match(input,40,Follow._40_in_superClass158); 
			DebugLocation(252, 50);
			ID2=(IToken)Match(input,ID,Follow._ID_in_superClass160); 
			DebugLocation(252, 53);
			superClase = (ID2!=null?ID2.Text:null);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("superClass", 5);
			LeaveRule("superClass", 5);
			LeaveRule_superClass();
	    }
	 	DebugLocation(252, 77);
		} finally { DebugExitRule(GrammarFileName, "superClass"); }
		return superClase;

	}
	// $ANTLR end "superClass"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_vars() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_vars() {}

	// $ANTLR start "vars"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:254:1: vars : 'vars' ':' ( varDecl )* ;
	[GrammarRule("vars")]
	private void vars()
	{
		EnterRule_vars();
		EnterRule("vars", 6);
		TraceIn("vars", 6);
		try { DebugEnterRule(GrammarFileName, "vars");
		DebugLocation(254, 22);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:255:2: ( 'vars' ':' ( varDecl )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:255:4: 'vars' ':' ( varDecl )*
			{
			DebugLocation(255, 4);
			Match(input,51,Follow._51_in_vars171); 
			DebugLocation(255, 11);
			Match(input,24,Follow._24_in_vars173); 
			DebugLocation(255, 15);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:255:15: ( varDecl )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, decisionCanBacktrack[9]);
				int LA9_0 = input.LA(1);

				if ((LA9_0==ID))
				{
					int LA9_2 = input.LA(2);

					if ((LA9_2==ID))
					{
						alt9 = 1;
					}


				}
				else if ((LA9_0==35||LA9_0==38||LA9_0==42))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:255:15: varDecl
					{
					DebugLocation(255, 15);
					PushFollow(Follow._varDecl_in_vars175);
					varDecl();
					PopFollow();


					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("vars", 6);
			LeaveRule("vars", 6);
			LeaveRule_vars();
	    }
	 	DebugLocation(255, 22);
		} finally { DebugExitRule(GrammarFileName, "vars"); }
		return;

	}
	// $ANTLR end "vars"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_varDecl() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_varDecl() {}

	// $ANTLR start "varDecl"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:257:1: varDecl : (t= primitiveType |t= referenceType ) ID ';' ;
	[GrammarRule("varDecl")]
	private void varDecl()
	{
		EnterRule_varDecl();
		EnterRule("varDecl", 7);
		TraceIn("varDecl", 7);
	    IToken ID3 = default(IToken);
	    string t = default(string);


	    	ClassSymbol clase;

		try { DebugEnterRule(GrammarFileName, "varDecl");
		DebugLocation(257, 138);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:261:5: ( (t= primitiveType |t= referenceType ) ID ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:261:9: (t= primitiveType |t= referenceType ) ID ';'
			{
			DebugLocation(261, 9);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:261:9: (t= primitiveType |t= referenceType )
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			switch (input.LA(1))
			{
			case 35:
				{
				int LA10_1 = input.LA(2);

				if ((LA10_1==32))
				{
					alt10 = 2;
				}
				else if ((LA10_1==ID))
				{
					alt10 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 42:
				{
				int LA10_2 = input.LA(2);

				if ((LA10_2==32))
				{
					alt10 = 2;
				}
				else if ((LA10_2==ID))
				{
					alt10 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 38:
				{
				int LA10_3 = input.LA(2);

				if ((LA10_3==32))
				{
					alt10 = 2;
				}
				else if ((LA10_3==ID))
				{
					alt10 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ID:
				{
				alt10 = 2;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:261:10: t= primitiveType
				{
				DebugLocation(261, 12);
				PushFollow(Follow._primitiveType_in_varDecl200);
				t=primitiveType();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:261:30: t= referenceType
				{
				DebugLocation(261, 32);
				PushFollow(Follow._referenceType_in_varDecl208);
				t=referenceType();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(261, 49);
			clase = directory.findType(t);
			DebugLocation(261, 88);
			ID3=(IToken)Match(input,ID,Follow._ID_in_varDecl213); 
			DebugLocation(261, 91);
			registerVariableInScope((ID3!=null?ID3.Text:null), clase);
			DebugLocation(261, 135);
			Match(input,25,Follow._25_in_varDecl217); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("varDecl", 7);
			LeaveRule("varDecl", 7);
			LeaveRule_varDecl();
	    }
	 	DebugLocation(261, 138);
		} finally { DebugExitRule(GrammarFileName, "varDecl"); }
		return;

	}
	// $ANTLR end "varDecl"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_primitiveType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_primitiveType() {}

	// $ANTLR start "primitiveType"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:264:1: primitiveType returns [string tipo] : t= ( 'int' | 'char' | 'double' ) ;
	[GrammarRule("primitiveType")]
	private string primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 8);
		TraceIn("primitiveType", 8);
	    string tipo = default(string);


	    IToken t = default(IToken);

		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(264, 84);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:264:35: (t= ( 'int' | 'char' | 'double' ) )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:264:37: t= ( 'int' | 'char' | 'double' )
			{
			DebugLocation(264, 39);

			t=(IToken)input.LT(1);
			if (input.LA(1)==35||input.LA(1)==38||input.LA(1)==42)
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(264, 67);
			tipo = (t!=null?t.Text:null);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("primitiveType", 8);
			LeaveRule("primitiveType", 8);
			LeaveRule_primitiveType();
	    }
	 	DebugLocation(264, 84);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return tipo;

	}
	// $ANTLR end "primitiveType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_referenceType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_referenceType() {}

	// $ANTLR start "referenceType"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:266:1: referenceType returns [string tipo] : ( 'char' '[' ']' | 'int' '[' ']' | 'double' '[' ']' | ID ) ;
	[GrammarRule("referenceType")]
	private string referenceType()
	{
		EnterRule_referenceType();
		EnterRule("referenceType", 9);
		TraceIn("referenceType", 9);
	    string tipo = default(string);


	    IToken ID4 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "referenceType");
		DebugLocation(266, 4);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:266:35: ( ( 'char' '[' ']' | 'int' '[' ']' | 'double' '[' ']' | ID ) )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:267:5: ( 'char' '[' ']' | 'int' '[' ']' | 'double' '[' ']' | ID )
			{
			DebugLocation(267, 5);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:267:5: ( 'char' '[' ']' | 'int' '[' ']' | 'double' '[' ']' | ID )
			int alt11=4;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
			switch (input.LA(1))
			{
			case 35:
				{
				alt11 = 1;
				}
				break;
			case 42:
				{
				alt11 = 2;
				}
				break;
			case 38:
				{
				alt11 = 3;
				}
				break;
			case ID:
				{
				alt11 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 11, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:267:6: 'char' '[' ']'
				{
				DebugLocation(267, 6);
				Match(input,35,Follow._35_in_referenceType267); 
				DebugLocation(267, 13);
				Match(input,32,Follow._32_in_referenceType269); 
				DebugLocation(267, 17);
				Match(input,33,Follow._33_in_referenceType271); 
				DebugLocation(267, 21);
				tipo = "char[]";

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:268:6: 'int' '[' ']'
				{
				DebugLocation(268, 6);
				Match(input,42,Follow._42_in_referenceType281); 
				DebugLocation(268, 12);
				Match(input,32,Follow._32_in_referenceType283); 
				DebugLocation(268, 16);
				Match(input,33,Follow._33_in_referenceType285); 
				DebugLocation(268, 20);
				tipo = "int[]";

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:269:7: 'double' '[' ']'
				{
				DebugLocation(269, 7);
				Match(input,38,Follow._38_in_referenceType295); 
				DebugLocation(269, 16);
				Match(input,32,Follow._32_in_referenceType297); 
				DebugLocation(269, 20);
				Match(input,33,Follow._33_in_referenceType299); 
				DebugLocation(269, 24);
				tipo = "double[]";

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:270:7: ID
				{
				DebugLocation(270, 7);
				ID4=(IToken)Match(input,ID,Follow._ID_in_referenceType309); 
				DebugLocation(270, 10);
				tipo = (ID4!=null?ID4.Text:null);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("referenceType", 9);
			LeaveRule("referenceType", 9);
			LeaveRule_referenceType();
	    }
	 	DebugLocation(271, 4);
		} finally { DebugExitRule(GrammarFileName, "referenceType"); }
		return tipo;

	}
	// $ANTLR end "referenceType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_voidType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_voidType() {}

	// $ANTLR start "voidType"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:273:1: voidType returns [string tipo] : t= 'void' ;
	[GrammarRule("voidType")]
	private string voidType()
	{
		EnterRule_voidType();
		EnterRule("voidType", 10);
		TraceIn("voidType", 10);
	    string tipo = default(string);


	    IToken t = default(IToken);

		try { DebugEnterRule(GrammarFileName, "voidType");
		DebugLocation(273, 60);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:273:30: (t= 'void' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:273:32: t= 'void'
			{
			DebugLocation(273, 34);
			t=(IToken)Match(input,52,Follow._52_in_voidType332); 
			DebugLocation(273, 43);
			tipo = (t!=null?t.Text:null);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("voidType", 10);
			LeaveRule("voidType", 10);
			LeaveRule_voidType();
	    }
	 	DebugLocation(273, 60);
		} finally { DebugExitRule(GrammarFileName, "voidType"); }
		return tipo;

	}
	// $ANTLR end "voidType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_formalParamType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_formalParamType() {}

	// $ANTLR start "formalParamType"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:275:1: formalParamType returns [string tipo] : (t= primitiveType |t= referenceType ) ;
	[GrammarRule("formalParamType")]
	private string formalParamType()
	{
		EnterRule_formalParamType();
		EnterRule("formalParamType", 11);
		TraceIn("formalParamType", 11);
	    string tipo = default(string);


	    string t = default(string);

		try { DebugEnterRule(GrammarFileName, "formalParamType");
		DebugLocation(275, 23);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:275:37: ( (t= primitiveType |t= referenceType ) )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:275:39: (t= primitiveType |t= referenceType )
			{
			DebugLocation(275, 39);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:275:39: (t= primitiveType |t= referenceType )
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
			switch (input.LA(1))
			{
			case 35:
				{
				int LA12_1 = input.LA(2);

				if ((LA12_1==32))
				{
					alt12 = 2;
				}
				else if ((LA12_1==ID))
				{
					alt12 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 42:
				{
				int LA12_2 = input.LA(2);

				if ((LA12_2==32))
				{
					alt12 = 2;
				}
				else if ((LA12_2==ID))
				{
					alt12 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 38:
				{
				int LA12_3 = input.LA(2);

				if ((LA12_3==32))
				{
					alt12 = 2;
				}
				else if ((LA12_3==ID))
				{
					alt12 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ID:
				{
				alt12 = 2;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:275:40: t= primitiveType
				{
				DebugLocation(275, 42);
				PushFollow(Follow._primitiveType_in_formalParamType349);
				t=primitiveType();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:276:8: t= referenceType
				{
				DebugLocation(276, 10);
				PushFollow(Follow._referenceType_in_formalParamType363);
				t=referenceType();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(277, 6);
			tipo = t;

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("formalParamType", 11);
			LeaveRule("formalParamType", 11);
			LeaveRule_formalParamType();
	    }
	 	DebugLocation(277, 23);
		} finally { DebugExitRule(GrammarFileName, "formalParamType"); }
		return tipo;

	}
	// $ANTLR end "formalParamType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_methods() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_methods() {}

	// $ANTLR start "methods"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:279:1: methods : 'methods' ':' ( methodDeclaration )* ;
	[GrammarRule("methods")]
	private void methods()
	{
		EnterRule_methods();
		EnterRule("methods", 12);
		TraceIn("methods", 12);
		try { DebugEnterRule(GrammarFileName, "methods");
		DebugLocation(279, 35);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:280:2: ( 'methods' ':' ( methodDeclaration )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:280:4: 'methods' ':' ( methodDeclaration )*
			{
			DebugLocation(280, 4);
			Match(input,44,Follow._44_in_methods382); 
			DebugLocation(280, 14);
			Match(input,24,Follow._24_in_methods384); 
			DebugLocation(280, 18);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:280:18: ( methodDeclaration )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, decisionCanBacktrack[13]);
				int LA13_0 = input.LA(1);

				if ((LA13_0==52))
				{
					int LA13_1 = input.LA(2);

					if ((LA13_1==ID))
					{
						alt13 = 1;
					}


				}
				else if ((LA13_0==ID||LA13_0==35||LA13_0==38||LA13_0==42))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:280:18: methodDeclaration
					{
					DebugLocation(280, 18);
					PushFollow(Follow._methodDeclaration_in_methods386);
					methodDeclaration();
					PopFollow();


					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("methods", 12);
			LeaveRule("methods", 12);
			LeaveRule_methods();
	    }
	 	DebugLocation(280, 35);
		} finally { DebugExitRule(GrammarFileName, "methods"); }
		return;

	}
	// $ANTLR end "methods"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_methodDeclaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_methodDeclaration() {}

	// $ANTLR start "methodDeclaration"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:282:1: methodDeclaration : (tRet= primitiveType |tRet= referenceType |tRet= voidType ) ID '(' ( formalParameters )? ')' '{' ( vars )? someStatements '}' ;
	[GrammarRule("methodDeclaration")]
	private void methodDeclaration()
	{
		EnterRule_methodDeclaration();
		EnterRule("methodDeclaration", 13);
		TraceIn("methodDeclaration", 13);
	    IToken ID5 = default(IToken);
	    string tRet = default(string);


	    	ClassSymbol tipoRetorno;

		try { DebugEnterRule(GrammarFileName, "methodDeclaration");
		DebugLocation(282, 1);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:286:3: ( (tRet= primitiveType |tRet= referenceType |tRet= voidType ) ID '(' ( formalParameters )? ')' '{' ( vars )? someStatements '}' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:286:3: (tRet= primitiveType |tRet= referenceType |tRet= voidType ) ID '(' ( formalParameters )? ')' '{' ( vars )? someStatements '}'
			{
			DebugLocation(286, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:286:3: (tRet= primitiveType |tRet= referenceType |tRet= voidType )
			int alt14=3;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, decisionCanBacktrack[14]);
			switch (input.LA(1))
			{
			case 35:
				{
				int LA14_1 = input.LA(2);

				if ((LA14_1==32))
				{
					alt14 = 2;
				}
				else if ((LA14_1==ID))
				{
					alt14 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 42:
				{
				int LA14_2 = input.LA(2);

				if ((LA14_2==32))
				{
					alt14 = 2;
				}
				else if ((LA14_2==ID))
				{
					alt14 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 38:
				{
				int LA14_3 = input.LA(2);

				if ((LA14_3==32))
				{
					alt14 = 2;
				}
				else if ((LA14_3==ID))
				{
					alt14 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ID:
				{
				alt14 = 2;
				}
				break;
			case 52:
				{
				alt14 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:286:4: tRet= primitiveType
				{
				DebugLocation(286, 9);
				PushFollow(Follow._primitiveType_in_methodDeclaration405);
				tRet=primitiveType();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:286:27: tRet= referenceType
				{
				DebugLocation(286, 32);
				PushFollow(Follow._referenceType_in_methodDeclaration413);
				tRet=referenceType();
				PopFollow();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:286:50: tRet= voidType
				{
				DebugLocation(286, 55);
				PushFollow(Follow._voidType_in_methodDeclaration421);
				tRet=voidType();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(286, 67);
			tipoRetorno = directory.findType(tRet);
			DebugLocation(287, 2);
			ID5=(IToken)Match(input,ID,Follow._ID_in_methodDeclaration428); 
			DebugLocation(287, 5);
			registrarMetodo(tipoRetorno, (ID5!=null?ID5.Text:null));
			DebugLocation(288, 2);
			Match(input,16,Follow._16_in_methodDeclaration434); 
			DebugLocation(288, 6);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:288:6: ( formalParameters )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, decisionCanBacktrack[15]);
			int LA15_0 = input.LA(1);

			if ((LA15_0==ID||LA15_0==35||LA15_0==38||LA15_0==42))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:288:6: formalParameters
				{
				DebugLocation(288, 6);
				PushFollow(Follow._formalParameters_in_methodDeclaration436);
				formalParameters();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(288, 24);
			Match(input,17,Follow._17_in_methodDeclaration439); 
			DebugLocation(289, 2);
			Match(input,54,Follow._54_in_methodDeclaration443); 
			DebugLocation(289, 6);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:289:6: ( vars )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, decisionCanBacktrack[16]);
			int LA16_0 = input.LA(1);

			if ((LA16_0==51))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:289:6: vars
				{
				DebugLocation(289, 6);
				PushFollow(Follow._vars_in_methodDeclaration445);
				vars();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(289, 12);
			PushFollow(Follow._someStatements_in_methodDeclaration448);
			someStatements();
			PopFollow();

			DebugLocation(289, 27);
			Match(input,55,Follow._55_in_methodDeclaration450); 
			DebugLocation(290, 2);
			actualScope = ((MethodSymbol)actualScope).enclosingScope;

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("methodDeclaration", 13);
			LeaveRule("methodDeclaration", 13);
			LeaveRule_methodDeclaration();
	    }
	 	DebugLocation(291, 1);
		} finally { DebugExitRule(GrammarFileName, "methodDeclaration"); }
		return;

	}
	// $ANTLR end "methodDeclaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_formalParam() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_formalParam() {}

	// $ANTLR start "formalParam"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:293:1: formalParam : t= formalParamType ID ;
	[GrammarRule("formalParam")]
	private void formalParam()
	{
		EnterRule_formalParam();
		EnterRule("formalParam", 14);
		TraceIn("formalParam", 14);
	    IToken ID6 = default(IToken);
	    string t = default(string);

		try { DebugEnterRule(GrammarFileName, "formalParam");
		DebugLocation(293, 82);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:293:12: (t= formalParamType ID )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:293:14: t= formalParamType ID
			{
			DebugLocation(293, 16);
			PushFollow(Follow._formalParamType_in_formalParam468);
			t=formalParamType();
			PopFollow();

			DebugLocation(293, 34);
			ID6=(IToken)Match(input,ID,Follow._ID_in_formalParam470); 
			DebugLocation(293, 37);
			registerVariableInMethod((ID6!=null?ID6.Text:null), t);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("formalParam", 14);
			LeaveRule("formalParam", 14);
			LeaveRule_formalParam();
	    }
	 	DebugLocation(293, 82);
		} finally { DebugExitRule(GrammarFileName, "formalParam"); }
		return;

	}
	// $ANTLR end "formalParam"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_formalParameters() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_formalParameters() {}

	// $ANTLR start "formalParameters"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:295:1: formalParameters : t= formalParam ( ',' formalParam )* ;
	[GrammarRule("formalParameters")]
	private void formalParameters()
	{
		EnterRule_formalParameters();
		EnterRule("formalParameters", 15);
		TraceIn("formalParameters", 15);
		try { DebugEnterRule(GrammarFileName, "formalParameters");
		DebugLocation(295, 38);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:296:4: (t= formalParam ( ',' formalParam )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:296:4: t= formalParam ( ',' formalParam )*
			{
			DebugLocation(296, 6);
			PushFollow(Follow._formalParam_in_formalParameters486);
			formalParam();
			PopFollow();

			DebugLocation(296, 20);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:296:20: ( ',' formalParam )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, decisionCanBacktrack[17]);
				int LA17_0 = input.LA(1);

				if ((LA17_0==20))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:296:21: ',' formalParam
					{
					DebugLocation(296, 21);
					Match(input,20,Follow._20_in_formalParameters489); 
					DebugLocation(296, 25);
					PushFollow(Follow._formalParam_in_formalParameters491);
					formalParam();
					PopFollow();


					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("formalParameters", 15);
			LeaveRule("formalParameters", 15);
			LeaveRule_formalParameters();
	    }
	 	DebugLocation(296, 38);
		} finally { DebugExitRule(GrammarFileName, "formalParameters"); }
		return;

	}
	// $ANTLR end "formalParameters"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_someStatements() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_someStatements() {}

	// $ANTLR start "someStatements"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:298:1: someStatements : ( statement )* ;
	[GrammarRule("someStatements")]
	private void someStatements()
	{
		EnterRule_someStatements();
		EnterRule("someStatements", 16);
		TraceIn("someStatements", 16);
		try { DebugEnterRule(GrammarFileName, "someStatements");
		DebugLocation(298, 13);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:299:2: ( ( statement )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:299:4: ( statement )*
			{
			DebugLocation(299, 4);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:299:4: ( statement )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, decisionCanBacktrack[18]);
				int LA18_0 = input.LA(1);

				if ((LA18_0==ID||LA18_0==25||LA18_0==41||(LA18_0>=47 && LA18_0<=50)||LA18_0==53))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:299:4: statement
					{
					DebugLocation(299, 4);
					PushFollow(Follow._statement_in_someStatements503);
					statement();
					PopFollow();


					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("someStatements", 16);
			LeaveRule("someStatements", 16);
			LeaveRule_someStatements();
	    }
	 	DebugLocation(299, 13);
		} finally { DebugExitRule(GrammarFileName, "someStatements"); }
		return;

	}
	// $ANTLR end "someStatements"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_statement() {}

	// $ANTLR start "statement"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:301:1: statement : ( assignment | invoke ';' | if_inst | while_inst | return_inst | read | print | ';' );
	[GrammarRule("statement")]
	private void statement()
	{
		EnterRule_statement();
		EnterRule("statement", 17);
		TraceIn("statement", 17);
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(301, 7);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:301:11: ( assignment | invoke ';' | if_inst | while_inst | return_inst | read | print | ';' )
			int alt19=8;
			try { DebugEnterDecision(19, decisionCanBacktrack[19]);
			switch (input.LA(1))
			{
			case ID:
				{
				switch (input.LA(2))
				{
				case 22:
					{
					int LA19_9 = input.LA(3);

					if ((LA19_9==ID))
					{
						int LA19_11 = input.LA(4);

						if ((LA19_11==28))
						{
							alt19 = 1;
						}
						else if ((LA19_11==16))
						{
							alt19 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 19, 11, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 19, 9, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 28:
				case 32:
					{
					alt19 = 1;
					}
					break;
				case 16:
					{
					alt19 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 19, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case 50:
				{
				alt19 = 1;
				}
				break;
			case 41:
				{
				alt19 = 3;
				}
				break;
			case 53:
				{
				alt19 = 4;
				}
				break;
			case 49:
				{
				alt19 = 5;
				}
				break;
			case 48:
				{
				alt19 = 6;
				}
				break;
			case 47:
				{
				alt19 = 7;
				}
				break;
			case 25:
				{
				alt19 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:301:13: assignment
				{
				DebugLocation(301, 13);
				PushFollow(Follow._assignment_in_statement512);
				assignment();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:302:5: invoke ';'
				{
				DebugLocation(302, 5);
				PushFollow(Follow._invoke_in_statement518);
				invoke();
				PopFollow();

				DebugLocation(302, 12);
				Match(input,25,Follow._25_in_statement520); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:303:5: if_inst
				{
				DebugLocation(303, 5);
				PushFollow(Follow._if_inst_in_statement526);
				if_inst();
				PopFollow();


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:304:5: while_inst
				{
				DebugLocation(304, 5);
				PushFollow(Follow._while_inst_in_statement532);
				while_inst();
				PopFollow();


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:305:5: return_inst
				{
				DebugLocation(305, 5);
				PushFollow(Follow._return_inst_in_statement538);
				return_inst();
				PopFollow();


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:306:5: read
				{
				DebugLocation(306, 5);
				PushFollow(Follow._read_in_statement544);
				read();
				PopFollow();


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:307:5: print
				{
				DebugLocation(307, 5);
				PushFollow(Follow._print_in_statement550);
				print();
				PopFollow();


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:308:5: ';'
				{
				DebugLocation(308, 5);
				Match(input,25,Follow._25_in_statement556); 

				}
				break;

			}
		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("statement", 17);
			LeaveRule("statement", 17);
			LeaveRule_statement();
	    }
	 	DebugLocation(308, 7);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return;

	}
	// $ANTLR end "statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_assignment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_assignment() {}

	// $ANTLR start "assignment"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:310:1: assignment : designator '=' ( expression | 'new' ID '(' ')' | 'new' primitiveType '[' INT ']' ) ';' ;
	[GrammarRule("assignment")]
	private void assignment()
	{
		EnterRule_assignment();
		EnterRule("assignment", 18);
		TraceIn("assignment", 18);
	    IToken ID7 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(310, 1);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:311:2: ( designator '=' ( expression | 'new' ID '(' ')' | 'new' primitiveType '[' INT ']' ) ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:311:4: designator '=' ( expression | 'new' ID '(' ')' | 'new' primitiveType '[' INT ']' ) ';'
			{
			DebugLocation(311, 4);
			PushFollow(Follow._designator_in_assignment568);
			designator();
			PopFollow();

			DebugLocation(311, 15);
			Match(input,28,Follow._28_in_assignment570); 
			DebugLocation(312, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:312:3: ( expression | 'new' ID '(' ')' | 'new' primitiveType '[' INT ']' )
			int alt20=3;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, decisionCanBacktrack[20]);
			int LA20_0 = input.LA(1);

			if ((LA20_0==CHAR||LA20_0==DOUBLE||(LA20_0>=ID && LA20_0<=INT)||LA20_0==16||LA20_0==50))
			{
				alt20 = 1;
			}
			else if ((LA20_0==45))
			{
				int LA20_2 = input.LA(2);

				if ((LA20_2==ID))
				{
					alt20 = 2;
				}
				else if ((LA20_2==35||LA20_2==38||LA20_2==42))
				{
					alt20 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 20, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:313:3: expression
				{
				DebugLocation(313, 3);
				PushFollow(Follow._expression_in_assignment579);
				expression();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:314:5: 'new' ID '(' ')'
				{
				DebugLocation(314, 5);
				Match(input,45,Follow._45_in_assignment585); 
				DebugLocation(314, 11);
				ID7=(IToken)Match(input,ID,Follow._ID_in_assignment587); 
				DebugLocation(314, 14);
				Match(input,16,Follow._16_in_assignment589); 
				DebugLocation(314, 18);
				Match(input,17,Follow._17_in_assignment591); 
				DebugLocation(314, 22);
				directory.findType((ID7!=null?ID7.Text:null));

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:315:5: 'new' primitiveType '[' INT ']'
				{
				DebugLocation(315, 5);
				Match(input,45,Follow._45_in_assignment599); 
				DebugLocation(315, 11);
				PushFollow(Follow._primitiveType_in_assignment601);
				primitiveType();
				PopFollow();

				DebugLocation(315, 25);
				Match(input,32,Follow._32_in_assignment603); 
				DebugLocation(315, 29);
				Match(input,INT,Follow._INT_in_assignment605); 
				DebugLocation(315, 33);
				Match(input,33,Follow._33_in_assignment607); 

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(318, 3);
			Match(input,25,Follow._25_in_assignment620); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("assignment", 18);
			LeaveRule("assignment", 18);
			LeaveRule_assignment();
	    }
	 	DebugLocation(319, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return;

	}
	// $ANTLR end "assignment"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_invoke() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_invoke() {}

	// $ANTLR start "invoke"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:322:1: invoke : ( ID actualParameters | ID '.' ID actualParameters );
	[GrammarRule("invoke")]
	private void invoke()
	{
		EnterRule_invoke();
		EnterRule("invoke", 19);
		TraceIn("invoke", 19);
		try { DebugEnterRule(GrammarFileName, "invoke");
		DebugLocation(322, 2);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:322:8: ( ID actualParameters | ID '.' ID actualParameters )
			int alt21=2;
			try { DebugEnterDecision(21, decisionCanBacktrack[21]);
			int LA21_0 = input.LA(1);

			if ((LA21_0==ID))
			{
				int LA21_1 = input.LA(2);

				if ((LA21_1==22))
				{
					alt21 = 2;
				}
				else if ((LA21_1==16))
				{
					alt21 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 21, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:322:10: ID actualParameters
				{
				DebugLocation(322, 10);
				Match(input,ID,Follow._ID_in_invoke635); 
				DebugLocation(322, 13);
				PushFollow(Follow._actualParameters_in_invoke637);
				actualParameters();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:323:5: ID '.' ID actualParameters
				{
				DebugLocation(323, 5);
				Match(input,ID,Follow._ID_in_invoke645); 
				DebugLocation(323, 8);
				Match(input,22,Follow._22_in_invoke647); 
				DebugLocation(323, 12);
				Match(input,ID,Follow._ID_in_invoke649); 
				DebugLocation(323, 15);
				PushFollow(Follow._actualParameters_in_invoke651);
				actualParameters();
				PopFollow();


				}
				break;

			}
		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("invoke", 19);
			LeaveRule("invoke", 19);
			LeaveRule_invoke();
	    }
	 	DebugLocation(324, 2);
		} finally { DebugExitRule(GrammarFileName, "invoke"); }
		return;

	}
	// $ANTLR end "invoke"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_if_inst() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_if_inst() {}

	// $ANTLR start "if_inst"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:326:1: if_inst : 'if' '(' expression ')' '{' someStatements '}' ( 'else' '{' someStatements '}' )? ;
	[GrammarRule("if_inst")]
	private void if_inst()
	{
		EnterRule_if_inst();
		EnterRule("if_inst", 20);
		TraceIn("if_inst", 20);
		try { DebugEnterRule(GrammarFileName, "if_inst");
		DebugLocation(326, 89);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:326:9: ( 'if' '(' expression ')' '{' someStatements '}' ( 'else' '{' someStatements '}' )? )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:326:11: 'if' '(' expression ')' '{' someStatements '}' ( 'else' '{' someStatements '}' )?
			{
			DebugLocation(326, 11);
			Match(input,41,Follow._41_in_if_inst664); 
			DebugLocation(326, 16);
			Match(input,16,Follow._16_in_if_inst666); 
			DebugLocation(326, 20);
			PushFollow(Follow._expression_in_if_inst668);
			expression();
			PopFollow();

			DebugLocation(326, 31);
			Match(input,17,Follow._17_in_if_inst670); 
			DebugLocation(326, 35);
			Match(input,54,Follow._54_in_if_inst672); 
			DebugLocation(326, 39);
			PushFollow(Follow._someStatements_in_if_inst674);
			someStatements();
			PopFollow();

			DebugLocation(326, 54);
			Match(input,55,Follow._55_in_if_inst676); 
			DebugLocation(326, 58);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:326:58: ( 'else' '{' someStatements '}' )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, decisionCanBacktrack[22]);
			int LA22_0 = input.LA(1);

			if ((LA22_0==39))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:326:59: 'else' '{' someStatements '}'
				{
				DebugLocation(326, 59);
				Match(input,39,Follow._39_in_if_inst679); 
				DebugLocation(326, 66);
				Match(input,54,Follow._54_in_if_inst681); 
				DebugLocation(326, 70);
				PushFollow(Follow._someStatements_in_if_inst683);
				someStatements();
				PopFollow();

				DebugLocation(326, 85);
				Match(input,55,Follow._55_in_if_inst685); 

				}
				break;

			}
			} finally { DebugExitSubRule(22); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("if_inst", 20);
			LeaveRule("if_inst", 20);
			LeaveRule_if_inst();
	    }
	 	DebugLocation(326, 89);
		} finally { DebugExitRule(GrammarFileName, "if_inst"); }
		return;

	}
	// $ANTLR end "if_inst"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_while_inst() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_while_inst() {}

	// $ANTLR start "while_inst"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:328:1: while_inst : 'while' '(' expression ')' '{' someStatements '}' ;
	[GrammarRule("while_inst")]
	private void while_inst()
	{
		EnterRule_while_inst();
		EnterRule("while_inst", 21);
		TraceIn("while_inst", 21);
		try { DebugEnterRule(GrammarFileName, "while_inst");
		DebugLocation(328, 62);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:328:12: ( 'while' '(' expression ')' '{' someStatements '}' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:328:14: 'while' '(' expression ')' '{' someStatements '}'
			{
			DebugLocation(328, 14);
			Match(input,53,Follow._53_in_while_inst695); 
			DebugLocation(328, 22);
			Match(input,16,Follow._16_in_while_inst697); 
			DebugLocation(328, 26);
			PushFollow(Follow._expression_in_while_inst699);
			expression();
			PopFollow();

			DebugLocation(328, 37);
			Match(input,17,Follow._17_in_while_inst701); 
			DebugLocation(328, 41);
			Match(input,54,Follow._54_in_while_inst703); 
			DebugLocation(328, 45);
			PushFollow(Follow._someStatements_in_while_inst705);
			someStatements();
			PopFollow();

			DebugLocation(328, 60);
			Match(input,55,Follow._55_in_while_inst707); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("while_inst", 21);
			LeaveRule("while_inst", 21);
			LeaveRule_while_inst();
	    }
	 	DebugLocation(328, 62);
		} finally { DebugExitRule(GrammarFileName, "while_inst"); }
		return;

	}
	// $ANTLR end "while_inst"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_return_inst() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_return_inst() {}

	// $ANTLR start "return_inst"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:330:1: return_inst : 'return' ( expression )? ';' ;
	[GrammarRule("return_inst")]
	private void return_inst()
	{
		EnterRule_return_inst();
		EnterRule("return_inst", 22);
		TraceIn("return_inst", 22);
		try { DebugEnterRule(GrammarFileName, "return_inst");
		DebugLocation(330, 38);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:330:13: ( 'return' ( expression )? ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:330:15: 'return' ( expression )? ';'
			{
			DebugLocation(330, 15);
			Match(input,49,Follow._49_in_return_inst715); 
			DebugLocation(330, 24);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:330:24: ( expression )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, decisionCanBacktrack[23]);
			int LA23_0 = input.LA(1);

			if ((LA23_0==CHAR||LA23_0==DOUBLE||(LA23_0>=ID && LA23_0<=INT)||LA23_0==16||LA23_0==50))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:330:24: expression
				{
				DebugLocation(330, 24);
				PushFollow(Follow._expression_in_return_inst717);
				expression();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(330, 36);
			Match(input,25,Follow._25_in_return_inst720); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("return_inst", 22);
			LeaveRule("return_inst", 22);
			LeaveRule_return_inst();
	    }
	 	DebugLocation(330, 38);
		} finally { DebugExitRule(GrammarFileName, "return_inst"); }
		return;

	}
	// $ANTLR end "return_inst"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_read() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_read() {}

	// $ANTLR start "read"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:332:1: read : 'read' '(' designator ')' ';' ;
	[GrammarRule("read")]
	private void read()
	{
		EnterRule_read();
		EnterRule("read", 23);
		TraceIn("read", 23);
		try { DebugEnterRule(GrammarFileName, "read");
		DebugLocation(332, 36);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:332:6: ( 'read' '(' designator ')' ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:332:8: 'read' '(' designator ')' ';'
			{
			DebugLocation(332, 8);
			Match(input,48,Follow._48_in_read728); 
			DebugLocation(332, 15);
			Match(input,16,Follow._16_in_read730); 
			DebugLocation(332, 19);
			PushFollow(Follow._designator_in_read732);
			designator();
			PopFollow();

			DebugLocation(332, 30);
			Match(input,17,Follow._17_in_read734); 
			DebugLocation(332, 34);
			Match(input,25,Follow._25_in_read736); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("read", 23);
			LeaveRule("read", 23);
			LeaveRule_read();
	    }
	 	DebugLocation(332, 36);
		} finally { DebugExitRule(GrammarFileName, "read"); }
		return;

	}
	// $ANTLR end "read"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_print() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_print() {}

	// $ANTLR start "print"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:334:1: print : 'print' '(' expression ')' ';' ;
	[GrammarRule("print")]
	private void print()
	{
		EnterRule_print();
		EnterRule("print", 24);
		TraceIn("print", 24);
		try { DebugEnterRule(GrammarFileName, "print");
		DebugLocation(334, 38);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:334:7: ( 'print' '(' expression ')' ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:334:9: 'print' '(' expression ')' ';'
			{
			DebugLocation(334, 9);
			Match(input,47,Follow._47_in_print744); 
			DebugLocation(334, 17);
			Match(input,16,Follow._16_in_print746); 
			DebugLocation(334, 21);
			PushFollow(Follow._expression_in_print748);
			expression();
			PopFollow();

			DebugLocation(334, 32);
			Match(input,17,Follow._17_in_print750); 
			DebugLocation(334, 36);
			Match(input,25,Follow._25_in_print752); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("print", 24);
			LeaveRule("print", 24);
			LeaveRule_print();
	    }
	 	DebugLocation(334, 38);
		} finally { DebugExitRule(GrammarFileName, "print"); }
		return;

	}
	// $ANTLR end "print"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_designator() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_designator() {}

	// $ANTLR start "designator"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:336:1: designator : (v= ID |obj= ID '.' var= ID | 'this' '.' var= ID | ( ID '[' expression ']' ) );
	[GrammarRule("designator")]
	private void designator()
	{
		EnterRule_designator();
		EnterRule("designator", 25);
		TraceIn("designator", 25);
	    IToken v = default(IToken);
	    IToken obj = default(IToken);
	    IToken var = default(IToken);
	    IToken ID8 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "designator");
		DebugLocation(336, 1);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:337:2: (v= ID |obj= ID '.' var= ID | 'this' '.' var= ID | ( ID '[' expression ']' ) )
			int alt24=4;
			try { DebugEnterDecision(24, decisionCanBacktrack[24]);
			int LA24_0 = input.LA(1);

			if ((LA24_0==ID))
			{
				switch (input.LA(2))
				{
				case 22:
					{
					alt24 = 2;
					}
					break;
				case 32:
					{
					alt24 = 4;
					}
					break;
				case 17:
				case 28:
					{
					alt24 = 1;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 24, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA24_0==50))
			{
				alt24 = 3;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:338:3: v= ID
				{
				DebugLocation(338, 5);
				v=(IToken)Match(input,ID,Follow._ID_in_designator768); 
				DebugLocation(338, 10);
				verifyVariableIsDefinedInMethod((v!=null?v.Text:null)); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:339:5: obj= ID '.' var= ID
				{
				DebugLocation(339, 9);
				obj=(IToken)Match(input,ID,Follow._ID_in_designator781); 
				DebugLocation(339, 15);
				Match(input,22,Follow._22_in_designator784); 
				DebugLocation(339, 23);
				var=(IToken)Match(input,ID,Follow._ID_in_designator790); 
				DebugLocation(339, 28);
				verifyObjectAndInstVariableDefined((obj!=null?obj.Text:null), (var!=null?var.Text:null)); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:340:5: 'this' '.' var= ID
				{
				DebugLocation(340, 5);
				Match(input,50,Follow._50_in_designator799); 
				DebugLocation(340, 12);
				Match(input,22,Follow._22_in_designator801); 
				DebugLocation(340, 20);
				var=(IToken)Match(input,ID,Follow._ID_in_designator807); 
				DebugLocation(340, 27);
				verifyInstanceVariableDefinedInThis((var!=null?var.Text:null));

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:341:5: ( ID '[' expression ']' )
				{
				DebugLocation(341, 5);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:341:5: ( ID '[' expression ']' )
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:341:6: ID '[' expression ']'
				{
				DebugLocation(341, 6);
				ID8=(IToken)Match(input,ID,Follow._ID_in_designator822); 
				DebugLocation(341, 9);
				Match(input,32,Follow._32_in_designator824); 
				DebugLocation(341, 13);
				PushFollow(Follow._expression_in_designator826);
				expression();
				PopFollow();

				DebugLocation(341, 24);
				Match(input,33,Follow._33_in_designator828); 

				}

				DebugLocation(342, 3);

						verifyIsArray((ID8!=null?ID8.Text:null));

						//TODO verificar que el resultado de la expresion es un entero
						

				}
				break;

			}
		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("designator", 25);
			LeaveRule("designator", 25);
			LeaveRule_designator();
	    }
	 	DebugLocation(347, 1);
		} finally { DebugExitRule(GrammarFileName, "designator"); }
		return;

	}
	// $ANTLR end "designator"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_actualParameters() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_actualParameters() {}

	// $ANTLR start "actualParameters"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:349:1: actualParameters : '(' ( expression ( ',' expression )* )? ')' ;
	[GrammarRule("actualParameters")]
	private void actualParameters()
	{
		EnterRule_actualParameters();
		EnterRule("actualParameters", 26);
		TraceIn("actualParameters", 26);
		try { DebugEnterRule(GrammarFileName, "actualParameters");
		DebugLocation(349, 42);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:350:2: ( '(' ( expression ( ',' expression )* )? ')' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:350:4: '(' ( expression ( ',' expression )* )? ')'
			{
			DebugLocation(350, 4);
			Match(input,16,Follow._16_in_actualParameters846); 
			DebugLocation(350, 8);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:350:8: ( expression ( ',' expression )* )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, decisionCanBacktrack[26]);
			int LA26_0 = input.LA(1);

			if ((LA26_0==CHAR||LA26_0==DOUBLE||(LA26_0>=ID && LA26_0<=INT)||LA26_0==16||LA26_0==50))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:350:9: expression ( ',' expression )*
				{
				DebugLocation(350, 9);
				PushFollow(Follow._expression_in_actualParameters849);
				expression();
				PopFollow();

				DebugLocation(350, 20);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:350:20: ( ',' expression )*
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, decisionCanBacktrack[25]);
					int LA25_0 = input.LA(1);

					if ((LA25_0==20))
					{
						alt25 = 1;
					}


					} finally { DebugExitDecision(25); }
					switch ( alt25 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:350:21: ',' expression
						{
						DebugLocation(350, 21);
						Match(input,20,Follow._20_in_actualParameters852); 
						DebugLocation(350, 25);
						PushFollow(Follow._expression_in_actualParameters854);
						expression();
						PopFollow();


						}
						break;

					default:
						goto loop25;
					}
				}

				loop25:
					;

				} finally { DebugExitSubRule(25); }


				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(350, 40);
			Match(input,17,Follow._17_in_actualParameters860); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("actualParameters", 26);
			LeaveRule("actualParameters", 26);
			LeaveRule_actualParameters();
	    }
	 	DebugLocation(350, 42);
		} finally { DebugExitRule(GrammarFileName, "actualParameters"); }
		return;

	}
	// $ANTLR end "actualParameters"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}

	// $ANTLR start "expression"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:352:1: expression : es ( relOp es )? ;
	[GrammarRule("expression")]
	private void expression()
	{
		EnterRule_expression();
		EnterRule("expression", 27);
		TraceIn("expression", 27);
	    string relOp9 = default(string);

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(352, 111);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:353:2: ( es ( relOp es )? )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:353:4: es ( relOp es )?
			{
			DebugLocation(353, 4);
			PushFollow(Follow._es_in_expression870);
			es();
			PopFollow();

			DebugLocation(353, 7);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:353:7: ( relOp es )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, decisionCanBacktrack[27]);
			int LA27_0 = input.LA(1);

			if ((LA27_0==15||(LA27_0>=26 && LA27_0<=27)||(LA27_0>=29 && LA27_0<=31)))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:353:8: relOp es
				{
				DebugLocation(353, 8);
				PushFollow(Follow._relOp_in_expression873);
				relOp9=relOp();
				PopFollow();

				DebugLocation(353, 14);
				pOperadores.Push(relOp9);
				DebugLocation(353, 51);
				PushFollow(Follow._es_in_expression877);
				es();
				PopFollow();

				DebugLocation(353, 54);
				aplicaOperadorPendienteQueSea(operadoresRelacionales);

				}
				break;

			}
			} finally { DebugExitSubRule(27); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("expression", 27);
			LeaveRule("expression", 27);
			LeaveRule_expression();
	    }
	 	DebugLocation(353, 111);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_es() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_es() {}

	// $ANTLR start "es"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:355:1: es : term (op= ( '+' | '-' | 'or' ) term )* ;
	[GrammarRule("es")]
	private void es()
	{
		EnterRule_es();
		EnterRule("es", 28);
		TraceIn("es", 28);
	    IToken op = default(IToken);

		try { DebugEnterRule(GrammarFileName, "es");
		DebugLocation(355, 4);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:356:2: ( term (op= ( '+' | '-' | 'or' ) term )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:356:4: term (op= ( '+' | '-' | 'or' ) term )*
			{
			DebugLocation(356, 4);
			PushFollow(Follow._term_in_es890);
			term();
			PopFollow();

			DebugLocation(356, 9);
			aplicaOperadorPendienteQueSea(masMenosOr);
			DebugLocation(357, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:357:3: (op= ( '+' | '-' | 'or' ) term )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, decisionCanBacktrack[28]);
				int LA28_0 = input.LA(1);

				if ((LA28_0==19||LA28_0==21||LA28_0==46))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:358:4: op= ( '+' | '-' | 'or' ) term
					{
					DebugLocation(358, 7);

					op=(IToken)input.LT(1);
					if (input.LA(1)==19||input.LA(1)==21||input.LA(1)==46)
					{
						input.Consume();
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(358, 28);
					pOperadores.Push((op!=null?op.Text:null));
					DebugLocation(359, 4);
					PushFollow(Follow._term_in_es923);
					term();
					PopFollow();

					DebugLocation(359, 9);
					aplicaOperadorPendienteQueSea(masMenosOr);

					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("es", 28);
			LeaveRule("es", 28);
			LeaveRule_es();
	    }
	 	DebugLocation(360, 4);
		} finally { DebugExitRule(GrammarFileName, "es"); }
		return;

	}
	// $ANTLR end "es"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_term() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_term() {}

	// $ANTLR start "term"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:362:1: term : factor (op= ( '*' | '/' | 'and' ) factor )* ;
	[GrammarRule("term")]
	private void term()
	{
		EnterRule_term();
		EnterRule("term", 29);
		TraceIn("term", 29);
	    IToken op = default(IToken);

		try { DebugEnterRule(GrammarFileName, "term");
		DebugLocation(362, 4);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:362:6: ( factor (op= ( '*' | '/' | 'and' ) factor )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:362:8: factor (op= ( '*' | '/' | 'and' ) factor )*
			{
			DebugLocation(362, 8);
			PushFollow(Follow._factor_in_term939);
			factor();
			PopFollow();

			DebugLocation(362, 15);
			aplicaOperadorPendienteQueSea(porEntreAnd);
			DebugLocation(363, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:363:3: (op= ( '*' | '/' | 'and' ) factor )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, decisionCanBacktrack[29]);
				int LA29_0 = input.LA(1);

				if ((LA29_0==18||LA29_0==23||LA29_0==34))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:364:4: op= ( '*' | '/' | 'and' ) factor
					{
					DebugLocation(364, 7);

					op=(IToken)input.LT(1);
					if (input.LA(1)==18||input.LA(1)==23||input.LA(1)==34)
					{
						input.Consume();
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(364, 29);
					pOperadores.Push((op!=null?op.Text:null));
					DebugLocation(365, 4);
					PushFollow(Follow._factor_in_term972);
					factor();
					PopFollow();

					DebugLocation(365, 11);
					aplicaOperadorPendienteQueSea(porEntreAnd);

					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("term", 29);
			LeaveRule("term", 29);
			LeaveRule_term();
	    }
	 	DebugLocation(366, 4);
		} finally { DebugExitRule(GrammarFileName, "term"); }
		return;

	}
	// $ANTLR end "term"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_factor() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_factor() {}

	// $ANTLR start "factor"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:368:1: factor : ( invoke |v= ID |obj= ID '.' var= ID | 'this' '.' var= ID | ID '[' expression ']' | INT | CHAR | DOUBLE | '(' expression ')' );
	[GrammarRule("factor")]
	private void factor()
	{
		EnterRule_factor();
		EnterRule("factor", 30);
		TraceIn("factor", 30);
	    IToken v = default(IToken);
	    IToken obj = default(IToken);
	    IToken var = default(IToken);
	    IToken ID10 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "factor");
		DebugLocation(368, 2);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:368:8: ( invoke |v= ID |obj= ID '.' var= ID | 'this' '.' var= ID | ID '[' expression ']' | INT | CHAR | DOUBLE | '(' expression ')' )
			int alt30=9;
			try { DebugEnterDecision(30, decisionCanBacktrack[30]);
			switch (input.LA(1))
			{
			case ID:
				{
				switch (input.LA(2))
				{
				case 22:
					{
					int LA30_7 = input.LA(3);

					if ((LA30_7==ID))
					{
						int LA30_11 = input.LA(4);

						if ((LA30_11==16))
						{
							alt30 = 1;
						}
						else if ((LA30_11==15||(LA30_11>=17 && LA30_11<=21)||LA30_11==23||(LA30_11>=25 && LA30_11<=27)||(LA30_11>=29 && LA30_11<=31)||(LA30_11>=33 && LA30_11<=34)||LA30_11==46))
						{
							alt30 = 3;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 30, 11, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 30, 7, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 32:
					{
					alt30 = 5;
					}
					break;
				case 16:
					{
					alt30 = 1;
					}
					break;
				case 15:
				case 17:
				case 18:
				case 19:
				case 20:
				case 21:
				case 23:
				case 25:
				case 26:
				case 27:
				case 29:
				case 30:
				case 31:
				case 33:
				case 34:
				case 46:
					{
					alt30 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 30, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case 50:
				{
				alt30 = 4;
				}
				break;
			case INT:
				{
				alt30 = 6;
				}
				break;
			case CHAR:
				{
				alt30 = 7;
				}
				break;
			case DOUBLE:
				{
				alt30 = 8;
				}
				break;
			case 16:
				{
				alt30 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 30, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:368:10: invoke
				{
				DebugLocation(368, 10);
				PushFollow(Follow._invoke_in_factor987);
				invoke();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:369:5: v= ID
				{
				DebugLocation(369, 7);
				v=(IToken)Match(input,ID,Follow._ID_in_factor998); 
				DebugLocation(370, 3);

						if(verifyVariableIsDefinedInMethod((v!=null?v.Text:null))) {
							VariableSymbol varSymbol = actualScope.getVariableSymbol((v!=null?v.Text:null));
							pOperandos.Push(varSymbol);
						}
						

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:376:5: obj= ID '.' var= ID
				{
				DebugLocation(376, 9);
				obj=(IToken)Match(input,ID,Follow._ID_in_factor1013); 
				DebugLocation(376, 14);
				Match(input,22,Follow._22_in_factor1015); 
				DebugLocation(376, 22);
				var=(IToken)Match(input,ID,Follow._ID_in_factor1021); 
				DebugLocation(377, 3);

						//TODO checar como va a quedar eso de que cada miembro de cada variable tenga su direccion
						//al hacer push a la pila de operadores. Creo que aqui primero ponemos el field en una var temporal
						//y ese temporal es el que pushamos a la pila de operandos
						VariableSymbol varSymbol = verifyObjectAndInstVariableDefined((obj!=null?obj.Text:null), (var!=null?var.Text:null));
						if(varSymbol != null) {
							pOperandos.Push(varSymbol);
						}
						

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:387:5: 'this' '.' var= ID
				{
				DebugLocation(387, 5);
				Match(input,50,Follow._50_in_factor1035); 
				DebugLocation(387, 12);
				Match(input,22,Follow._22_in_factor1037); 
				DebugLocation(387, 20);
				var=(IToken)Match(input,ID,Follow._ID_in_factor1043); 
				DebugLocation(388, 3);

						//TODO checar como va a quedar eso de que cada miembro de cada variable tenga su direccion
						//al hacer push a la pila de operadores. Creo que aqui primero ponemos el field en una var temporal
						//y ese temporal es el que pushamos a la pila de operandos
						VariableSymbol varSymbol = verifyInstanceVariableDefinedInThis((var!=null?var.Text:null));
						if(varSymbol != null) {
							pOperandos.Push(varSymbol);
						}
						

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:397:5: ID '[' expression ']'
				{
				DebugLocation(397, 5);
				ID10=(IToken)Match(input,ID,Follow._ID_in_factor1055); 
				DebugLocation(397, 8);
				Match(input,32,Follow._32_in_factor1057); 
				DebugLocation(397, 12);
				PushFollow(Follow._expression_in_factor1059);
				expression();
				PopFollow();

				DebugLocation(397, 23);
				Match(input,33,Follow._33_in_factor1061); 
				DebugLocation(398, 3);

						//TODO estamos metiendo objetos basura solo para verificar su tipo
						verifyIsArray((ID10!=null?ID10.Text:null));
						VariableSymbol indice = pOperandos.Pop();
						if(!indice.type.name.Equals("int")) {
							manageException(new Exception("El subindice del arreglo " + (ID10!=null?ID10.Text:null) + " debe ser de tipo int."));
						}
						else {
							VariableSymbol basura = actualScope.getVariableSymbol((ID10!=null?ID10.Text:null));
							string tipo = basura.type.name.Substring(0, basura.type.name.Length - 2);
							ClassSymbol t = directory.findType(tipo);
							VariableSymbol basura2 = new VariableSymbol("basura2", t);
							pOperandos.Push(basura2);
						}
						//TODO verificar que el resultado de la expresion es un entero
						

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:414:5: INT
				{
				DebugLocation(414, 5);
				Match(input,INT,Follow._INT_in_factor1072); 
				DebugLocation(414, 9);

						int addressTemp = ((MethodSymbol)actualScope).nextAddress();
						VariableSymbol temp = new VariableSymbol("@_" + addressTemp, directory.findType("int"));
						temp.address = addressTemp;
						pOperandos.Push(temp);
						//TODO GENERAR CUADRUPLO ILOAD constanteInt address
						

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:421:5: CHAR
				{
				DebugLocation(421, 5);
				Match(input,CHAR,Follow._CHAR_in_factor1080); 
				DebugLocation(422, 3);

						int addressTemp = ((MethodSymbol)actualScope).nextAddress();
						VariableSymbol temp = new VariableSymbol("@_" + addressTemp, directory.findType("char"));
						temp.address = addressTemp;
						pOperandos.Push(temp);
						//TODO GENERAR CUADRUPLO CLOAD constanteChar address
						

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:429:5: DOUBLE
				{
				DebugLocation(429, 5);
				Match(input,DOUBLE,Follow._DOUBLE_in_factor1090); 
				DebugLocation(430, 3);

						int addressTemp = ((MethodSymbol)actualScope).nextAddress();
						VariableSymbol temp = new VariableSymbol("@_" + addressTemp, directory.findType("double"));
						temp.address = addressTemp;
						pOperandos.Push(temp);
						//TODO GENERAR CUADRUPLO DLOAD constanteDouble address
						

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:437:5: '(' expression ')'
				{
				DebugLocation(437, 5);
				Match(input,16,Follow._16_in_factor1100); 
				DebugLocation(437, 8);
				pOperadores.Push("(");
				DebugLocation(437, 33);
				PushFollow(Follow._expression_in_factor1103);
				expression();
				PopFollow();

				DebugLocation(437, 44);
				Match(input,17,Follow._17_in_factor1105); 
				DebugLocation(437, 48);
				pOperadores.Pop();

				}
				break;

			}
		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("factor", 30);
			LeaveRule("factor", 30);
			LeaveRule_factor();
	    }
	 	DebugLocation(438, 2);
		} finally { DebugExitRule(GrammarFileName, "factor"); }
		return;

	}
	// $ANTLR end "factor"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_relOp() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_relOp() {}

	// $ANTLR start "relOp"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:440:1: relOp returns [string operador] : op= ( '==' | '!=' | '>' | '>=' | '<' | '<=' ) ;
	[GrammarRule("relOp")]
	private string relOp()
	{
		EnterRule_relOp();
		EnterRule("relOp", 31);
		TraceIn("relOp", 31);
	    string operador = default(string);


	    IToken op = default(IToken);

		try { DebugEnterRule(GrammarFileName, "relOp");
		DebugLocation(440, 101);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:440:31: (op= ( '==' | '!=' | '>' | '>=' | '<' | '<=' ) )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:440:34: op= ( '==' | '!=' | '>' | '>=' | '<' | '<=' )
			{
			DebugLocation(440, 37);

			op=(IToken)input.LT(1);
			if (input.LA(1)==15||(input.LA(1)>=26 && input.LA(1)<=27)||(input.LA(1)>=29 && input.LA(1)<=31))
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(440, 79);
			operador = (op!=null?op.Text:null);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("relOp", 31);
			LeaveRule("relOp", 31);
			LeaveRule_relOp();
	    }
	 	DebugLocation(440, 101);
		} finally { DebugExitRule(GrammarFileName, "relOp"); }
		return operador;

	}
	// $ANTLR end "relOp"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _classes_in_program61 = new BitSet(new ulong[]{0x18100000000000UL});
		public static readonly BitSet _vars_in_program66 = new BitSet(new ulong[]{0x10100000000000UL});
		public static readonly BitSet _methods_in_program69 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _mainMethod_in_program72 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _52_in_mainMethod81 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _43_in_mainMethod83 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_mainMethod85 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_mainMethod87 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _54_in_mainMethod89 = new BitSet(new ulong[]{0xAF820002000400UL});
		public static readonly BitSet _vars_in_mainMethod90 = new BitSet(new ulong[]{0xA7820002000400UL});
		public static readonly BitSet _someStatements_in_mainMethod93 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _55_in_mainMethod95 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _37_in_classes106 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_classes108 = new BitSet(new ulong[]{0x1000000002UL});
		public static readonly BitSet _classDecl_in_classes110 = new BitSet(new ulong[]{0x1000000002UL});
		public static readonly BitSet _36_in_classDecl125 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_classDecl131 = new BitSet(new ulong[]{0x40010000000000UL});
		public static readonly BitSet _superClass_in_classDecl134 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _54_in_classDecl140 = new BitSet(new ulong[]{0x88100000000000UL});
		public static readonly BitSet _vars_in_classDecl142 = new BitSet(new ulong[]{0x80100000000000UL});
		public static readonly BitSet _methods_in_classDecl145 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _55_in_classDecl148 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _40_in_superClass158 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_superClass160 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _51_in_vars171 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_vars173 = new BitSet(new ulong[]{0x44800000402UL});
		public static readonly BitSet _varDecl_in_vars175 = new BitSet(new ulong[]{0x44800000402UL});
		public static readonly BitSet _primitiveType_in_varDecl200 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _referenceType_in_varDecl208 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_varDecl213 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_varDecl217 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_primitiveType241 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _35_in_referenceType267 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _32_in_referenceType269 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_referenceType271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _42_in_referenceType281 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _32_in_referenceType283 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_referenceType285 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _38_in_referenceType295 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _32_in_referenceType297 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_referenceType299 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_referenceType309 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _52_in_voidType332 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_formalParamType349 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _referenceType_in_formalParamType363 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _44_in_methods382 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_methods384 = new BitSet(new ulong[]{0x10044800000402UL});
		public static readonly BitSet _methodDeclaration_in_methods386 = new BitSet(new ulong[]{0x10044800000402UL});
		public static readonly BitSet _primitiveType_in_methodDeclaration405 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _referenceType_in_methodDeclaration413 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _voidType_in_methodDeclaration421 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_methodDeclaration428 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_methodDeclaration434 = new BitSet(new ulong[]{0x44800020400UL});
		public static readonly BitSet _formalParameters_in_methodDeclaration436 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_methodDeclaration439 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _54_in_methodDeclaration443 = new BitSet(new ulong[]{0xAF820002000400UL});
		public static readonly BitSet _vars_in_methodDeclaration445 = new BitSet(new ulong[]{0xA7820002000400UL});
		public static readonly BitSet _someStatements_in_methodDeclaration448 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _55_in_methodDeclaration450 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _formalParamType_in_formalParam468 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_formalParam470 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _formalParam_in_formalParameters486 = new BitSet(new ulong[]{0x100002UL});
		public static readonly BitSet _20_in_formalParameters489 = new BitSet(new ulong[]{0x44800000400UL});
		public static readonly BitSet _formalParam_in_formalParameters491 = new BitSet(new ulong[]{0x100002UL});
		public static readonly BitSet _statement_in_someStatements503 = new BitSet(new ulong[]{0x27820002000402UL});
		public static readonly BitSet _assignment_in_statement512 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _invoke_in_statement518 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_statement520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _if_inst_in_statement526 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _while_inst_in_statement532 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _return_inst_in_statement538 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _read_in_statement544 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _print_in_statement550 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _25_in_statement556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _designator_in_assignment568 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _28_in_assignment570 = new BitSet(new ulong[]{0x4200000010C50UL});
		public static readonly BitSet _expression_in_assignment579 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _45_in_assignment585 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_assignment587 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_assignment589 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_assignment591 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _45_in_assignment599 = new BitSet(new ulong[]{0x44800000000UL});
		public static readonly BitSet _primitiveType_in_assignment601 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _32_in_assignment603 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _INT_in_assignment605 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_assignment607 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_assignment620 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_invoke635 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _actualParameters_in_invoke637 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_invoke645 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _22_in_invoke647 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_invoke649 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _actualParameters_in_invoke651 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _41_in_if_inst664 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_if_inst666 = new BitSet(new ulong[]{0x4000000010C50UL});
		public static readonly BitSet _expression_in_if_inst668 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_if_inst670 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _54_in_if_inst672 = new BitSet(new ulong[]{0xA7820002000400UL});
		public static readonly BitSet _someStatements_in_if_inst674 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _55_in_if_inst676 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _39_in_if_inst679 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _54_in_if_inst681 = new BitSet(new ulong[]{0xA7820002000400UL});
		public static readonly BitSet _someStatements_in_if_inst683 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _55_in_if_inst685 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _53_in_while_inst695 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_while_inst697 = new BitSet(new ulong[]{0x4000000010C50UL});
		public static readonly BitSet _expression_in_while_inst699 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_while_inst701 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _54_in_while_inst703 = new BitSet(new ulong[]{0xA7820002000400UL});
		public static readonly BitSet _someStatements_in_while_inst705 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _55_in_while_inst707 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _49_in_return_inst715 = new BitSet(new ulong[]{0x4000002010C50UL});
		public static readonly BitSet _expression_in_return_inst717 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_return_inst720 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _48_in_read728 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_read730 = new BitSet(new ulong[]{0x4000000000400UL});
		public static readonly BitSet _designator_in_read732 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_read734 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_read736 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _47_in_print744 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_print746 = new BitSet(new ulong[]{0x4000000010C50UL});
		public static readonly BitSet _expression_in_print748 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_print750 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_print752 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_designator768 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_designator781 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _22_in_designator784 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_designator790 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _50_in_designator799 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _22_in_designator801 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_designator807 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_designator822 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _32_in_designator824 = new BitSet(new ulong[]{0x4000000010C50UL});
		public static readonly BitSet _expression_in_designator826 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_designator828 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _16_in_actualParameters846 = new BitSet(new ulong[]{0x4000000030C50UL});
		public static readonly BitSet _expression_in_actualParameters849 = new BitSet(new ulong[]{0x120000UL});
		public static readonly BitSet _20_in_actualParameters852 = new BitSet(new ulong[]{0x4000000010C50UL});
		public static readonly BitSet _expression_in_actualParameters854 = new BitSet(new ulong[]{0x120000UL});
		public static readonly BitSet _17_in_actualParameters860 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _es_in_expression870 = new BitSet(new ulong[]{0xEC008002UL});
		public static readonly BitSet _relOp_in_expression873 = new BitSet(new ulong[]{0x4000000010C50UL});
		public static readonly BitSet _es_in_expression877 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _term_in_es890 = new BitSet(new ulong[]{0x400000280002UL});
		public static readonly BitSet _set_in_es905 = new BitSet(new ulong[]{0x4000000010C50UL});
		public static readonly BitSet _term_in_es923 = new BitSet(new ulong[]{0x400000280002UL});
		public static readonly BitSet _factor_in_term939 = new BitSet(new ulong[]{0x400840002UL});
		public static readonly BitSet _set_in_term954 = new BitSet(new ulong[]{0x4000000010C50UL});
		public static readonly BitSet _factor_in_term972 = new BitSet(new ulong[]{0x400840002UL});
		public static readonly BitSet _invoke_in_factor987 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_factor998 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_factor1013 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _22_in_factor1015 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_factor1021 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _50_in_factor1035 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _22_in_factor1037 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_factor1043 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_factor1055 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _32_in_factor1057 = new BitSet(new ulong[]{0x4000000010C50UL});
		public static readonly BitSet _expression_in_factor1059 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_factor1061 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_factor1072 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHAR_in_factor1080 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOUBLE_in_factor1090 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _16_in_factor1100 = new BitSet(new ulong[]{0x4000000010C50UL});
		public static readonly BitSet _expression_in_factor1103 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_factor1105 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_relOp1126 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
