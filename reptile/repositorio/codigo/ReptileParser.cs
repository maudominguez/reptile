//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g 2011-10-15 17:33:09

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


	using System;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class ReptileParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "CHAR", "COMMENT", "ESC_SEQ", "EXPONENT", "FLOAT", "HEX_DIGIT", "ID", "INT", "OCTAL_ESC", "UNICODE_ESC", "WS", "'!='", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "':'", "';'", "'<'", "'<='", "'='", "'=='", "'>'", "'>='", "'['", "']'", "'char'", "'class'", "'classes'", "'else'", "'extends'", "'if'", "'int'", "'main'", "'methods'", "'new'", "'print'", "'read'", "'return'", "'vars'", "'void'", "'while'", "'{'", "'}'"
	};
	public const int EOF=-1;
	public const int T__15=15;
	public const int T__16=16;
	public const int T__17=17;
	public const int T__18=18;
	public const int T__19=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int CHAR=4;
	public const int COMMENT=5;
	public const int ESC_SEQ=6;
	public const int EXPONENT=7;
	public const int FLOAT=8;
	public const int HEX_DIGIT=9;
	public const int ID=10;
	public const int INT=11;
	public const int OCTAL_ESC=12;
	public const int UNICODE_ESC=13;
	public const int WS=14;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public ReptileParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public ReptileParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return ReptileParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g"; } }


	Dictionary<string, ScopeWithMethods> directory;
	Dictionary<string, ClassSymbol> typesDirectory;
	Scope actualScope;
	Scope globalScope = new GlobalScope();

	protected override object RecoverFromMismatchedToken(IIntStream input, int ttype, BitSet follow)
	{
	      throw new MismatchedTokenException(ttype, input);
	}

	public override object RecoverFromMismatchedSet(IIntStream input, RecognitionException e, BitSet follow)
	{
	        throw e;
	}

	void printDirectory() {
		Console.WriteLine("Directory:");
		foreach(KeyValuePair<String,ScopeWithMethods> entry in directory) {
			Console.WriteLine(entry.Key + " -> " + entry.Value.name);
		}
	}

	void printTypesDirectory() {
		Console.WriteLine("Types Directory:");	
		foreach(KeyValuePair<String, ClassSymbol> entry in typesDirectory) {
			Console.Write(entry.Key + " -> " + entry.Value.name);
			if(entry.Value.superClass != null) {
				Console.Write( " superClass-> " + entry.Value.superClass.name);
			}
			Console.WriteLine();
		}
	}

	void createDirectories() {
		directory = new Dictionary<string, ScopeWithMethods>();
		typesDirectory = new Dictionary<string, ClassSymbol>();
	}

	void defineScopeGlobal() {
		globalScope = new GlobalScope();
		directory.Add("GlobalScope", (ScopeWithMethods)globalScope);
	}

	void registerPrimitiveTypes() {
		ClassSymbol integers = new ClassSymbol("int");
		typesDirectory.Add(integers.name, integers);
		ClassSymbol chars = new ClassSymbol("char");
		typesDirectory.Add(chars.name, chars);
		ClassSymbol integerArray = new ClassSymbol("int[]");
		typesDirectory.Add(integerArray.name, integerArray);
		ClassSymbol charArray = new ClassSymbol("char[]");
		typesDirectory.Add(charArray.name, charArray); 
		ClassSymbol tipoVoid = new ClassSymbol("void");
		typesDirectory.Add(tipoVoid.name, tipoVoid);
	}

	void registerClass(string className, string superClase) {
		try {
			ClassSymbol newClass = new ClassSymbol(className);
			directory.Add(newClass.name, newClass);
			typesDirectory.Add(newClass.name, newClass);
			actualScope = newClass;
			if(superClase != null) {
				registerSuperClass(newClass, superClase);
			}
		}
		catch(Exception exception) {
			manageException(exception);	//manejarException
		}
	}

	void registerSuperClass(ClassSymbol clase, string superClase) {
		try {
			ClassSymbol clasePadre;
			clasePadre = findType(superClase);
			clase.superClass = clasePadre;
		}
		catch(Exception exception) {
			manageException(exception);
		}
	}

	ClassSymbol findType(string type) {
		ClassSymbol classSymbol;
		if(!typesDirectory.TryGetValue(type, out classSymbol)) {
			manageException(new Exception("El tipo " + type + " no existe."));
		}
		return classSymbol;
	}

	//usado con metodos y variables
	void registerVariableInScope(string variableName, ClassSymbol tipo) {
		VariableSymbol variable = new VariableSymbol(variableName, tipo);
		actualScope.defineVariable(variable.name, variable);
	}

	void registrarMetodo(ClassSymbol tipoRetorno, string methodName) {
		ScopeWithMethods scope = (ScopeWithMethods)actualScope;
		MethodSymbol methodSymbol = new MethodSymbol(methodName, tipoRetorno, scope);
		scope.defineMethod(methodName, methodSymbol);
		actualScope = methodSymbol;
	}

	void registerVariableInMethod(string variableName, string tipo) {
		ClassSymbol tipoParam = findType(tipo);
		VariableSymbol variableSymbol = new VariableSymbol(variableName, tipoParam);
		registerVariableInScope(variableName, tipoParam);
		MethodSymbol methodSymbol = (MethodSymbol) actualScope;	//casting para poder llamar a defineParameter(..)
		methodSymbol.defineParameter(variableName, variableSymbol);
	}

	public static void manageException(Exception e) {
		Console.WriteLine(e.ToString());
	}



	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_program() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_program() {}

	// $ANTLR start "program"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:151:8: public program : ( classes )? ( vars )? ( methods )? mainMethod ;
	[GrammarRule("program")]
	public void program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(151, 150);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:151:16: ( ( classes )? ( vars )? ( methods )? mainMethod )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:151:18: ( classes )? ( vars )? ( methods )? mainMethod
			{
			DebugLocation(151, 18);
			createDirectories(); defineScopeGlobal(); registerPrimitiveTypes();
			DebugLocation(151, 88);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:151:88: ( classes )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_0 = input.LA(1);

			if ((LA1_0==36))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:151:88: classes
				{
				DebugLocation(151, 88);
				PushFollow(Follow._classes_in_program62);
				classes();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(151, 97);
			actualScope = globalScope;
			DebugLocation(151, 126);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:151:126: ( vars )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
			int LA2_0 = input.LA(1);

			if ((LA2_0==47))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:151:126: vars
				{
				DebugLocation(151, 126);
				PushFollow(Follow._vars_in_program67);
				vars();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(151, 132);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:151:132: ( methods )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_0 = input.LA(1);

			if ((LA3_0==42))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:151:132: methods
				{
				DebugLocation(151, 132);
				PushFollow(Follow._methods_in_program70);
				methods();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(151, 141);
			PushFollow(Follow._mainMethod_in_program73);
			mainMethod();
			PopFollow();


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
	    }
	 	DebugLocation(151, 150);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return;

	}
	// $ANTLR end "program"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_mainMethod() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_mainMethod() {}

	// $ANTLR start "mainMethod"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:153:1: mainMethod : 'void' 'main' '(' ')' '{' ( vars )? someStatements '}' ;
	[GrammarRule("mainMethod")]
	private void mainMethod()
	{
		EnterRule_mainMethod();
		EnterRule("mainMethod", 2);
		TraceIn("mainMethod", 2);
		try { DebugEnterRule(GrammarFileName, "mainMethod");
		DebugLocation(153, 96);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:154:2: ( 'void' 'main' '(' ')' '{' ( vars )? someStatements '}' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:154:4: 'void' 'main' '(' ')' '{' ( vars )? someStatements '}'
			{
			DebugLocation(154, 4);
			Match(input,48,Follow._48_in_mainMethod82); 
			DebugLocation(154, 11);
			Match(input,41,Follow._41_in_mainMethod84); 
			DebugLocation(154, 18);
			Match(input,16,Follow._16_in_mainMethod86); 
			DebugLocation(154, 22);
			Match(input,17,Follow._17_in_mainMethod88); 
			DebugLocation(154, 26);
			Match(input,50,Follow._50_in_mainMethod90); 
			DebugLocation(154, 29);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:154:29: ( vars )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, decisionCanBacktrack[4]);
			int LA4_0 = input.LA(1);

			if ((LA4_0==47))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:154:29: vars
				{
				DebugLocation(154, 29);
				PushFollow(Follow._vars_in_mainMethod91);
				vars();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(154, 35);
			PushFollow(Follow._someStatements_in_mainMethod94);
			someStatements();
			PopFollow();

			DebugLocation(154, 50);
			Match(input,51,Follow._51_in_mainMethod96); 
			DebugLocation(154, 54);
			printDirectory(); printTypesDirectory();

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("mainMethod", 2);
			LeaveRule("mainMethod", 2);
			LeaveRule_mainMethod();
	    }
	 	DebugLocation(154, 96);
		} finally { DebugExitRule(GrammarFileName, "mainMethod"); }
		return;

	}
	// $ANTLR end "mainMethod"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_classes() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_classes() {}

	// $ANTLR start "classes"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:156:1: classes : 'classes' ':' ( classDecl )* ;
	[GrammarRule("classes")]
	private void classes()
	{
		EnterRule_classes();
		EnterRule("classes", 3);
		TraceIn("classes", 3);
		try { DebugEnterRule(GrammarFileName, "classes");
		DebugLocation(156, 34);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:156:9: ( 'classes' ':' ( classDecl )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:156:11: 'classes' ':' ( classDecl )*
			{
			DebugLocation(156, 11);
			Match(input,36,Follow._36_in_classes107); 
			DebugLocation(156, 21);
			Match(input,24,Follow._24_in_classes109); 
			DebugLocation(156, 25);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:156:25: ( classDecl )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, decisionCanBacktrack[5]);
				int LA5_0 = input.LA(1);

				if ((LA5_0==35))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:156:25: classDecl
					{
					DebugLocation(156, 25);
					PushFollow(Follow._classDecl_in_classes111);
					classDecl();
					PopFollow();


					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("classes", 3);
			LeaveRule("classes", 3);
			LeaveRule_classes();
	    }
	 	DebugLocation(156, 34);
		} finally { DebugExitRule(GrammarFileName, "classes"); }
		return;

	}
	// $ANTLR end "classes"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_classDecl() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_classDecl() {}

	// $ANTLR start "classDecl"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:158:1: classDecl : 'class' clase= ID ( superClass )? '{' ( vars )? ( methods )? '}' ;
	[GrammarRule("classDecl")]
	private void classDecl()
	{
		EnterRule_classDecl();
		EnterRule("classDecl", 4);
		TraceIn("classDecl", 4);
	    IToken clase = default(IToken);
	    string superClass1 = default(string);

		try { DebugEnterRule(GrammarFileName, "classDecl");
		DebugLocation(158, 117);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:159:5: ( 'class' clase= ID ( superClass )? '{' ( vars )? ( methods )? '}' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:159:9: 'class' clase= ID ( superClass )? '{' ( vars )? ( methods )? '}'
			{
			DebugLocation(159, 9);
			Match(input,35,Follow._35_in_classDecl126); 
			DebugLocation(159, 23);
			clase=(IToken)Match(input,ID,Follow._ID_in_classDecl132); 
			DebugLocation(159, 28);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:159:28: ( superClass )?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, decisionCanBacktrack[6]);
			int LA6_0 = input.LA(1);

			if ((LA6_0==38))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:159:29: superClass
				{
				DebugLocation(159, 29);
				PushFollow(Follow._superClass_in_classDecl135);
				superClass1=superClass();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(6); }

			DebugLocation(159, 42);
			registerClass((clase!=null?clase.Text:null), superClass1);
			DebugLocation(159, 96);
			Match(input,50,Follow._50_in_classDecl141); 
			DebugLocation(159, 100);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:159:100: ( vars )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
			int LA7_0 = input.LA(1);

			if ((LA7_0==47))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:159:100: vars
				{
				DebugLocation(159, 100);
				PushFollow(Follow._vars_in_classDecl143);
				vars();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(7); }

			DebugLocation(159, 106);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:159:106: ( methods )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, decisionCanBacktrack[8]);
			int LA8_0 = input.LA(1);

			if ((LA8_0==42))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:159:106: methods
				{
				DebugLocation(159, 106);
				PushFollow(Follow._methods_in_classDecl146);
				methods();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(159, 115);
			Match(input,51,Follow._51_in_classDecl149); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("classDecl", 4);
			LeaveRule("classDecl", 4);
			LeaveRule_classDecl();
	    }
	 	DebugLocation(159, 117);
		} finally { DebugExitRule(GrammarFileName, "classDecl"); }
		return;

	}
	// $ANTLR end "classDecl"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_superClass() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_superClass() {}

	// $ANTLR start "superClass"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:161:1: superClass returns [string superClase] : 'extends' ID ;
	[GrammarRule("superClass")]
	private string superClass()
	{
		EnterRule_superClass();
		EnterRule("superClass", 5);
		TraceIn("superClass", 5);
	    string superClase = default(string);


	    IToken ID2 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "superClass");
		DebugLocation(161, 77);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:161:38: ( 'extends' ID )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:161:40: 'extends' ID
			{
			DebugLocation(161, 40);
			Match(input,38,Follow._38_in_superClass159); 
			DebugLocation(161, 50);
			ID2=(IToken)Match(input,ID,Follow._ID_in_superClass161); 
			DebugLocation(161, 53);
			superClase = (ID2!=null?ID2.Text:null);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("superClass", 5);
			LeaveRule("superClass", 5);
			LeaveRule_superClass();
	    }
	 	DebugLocation(161, 77);
		} finally { DebugExitRule(GrammarFileName, "superClass"); }
		return superClase;

	}
	// $ANTLR end "superClass"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_vars() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_vars() {}

	// $ANTLR start "vars"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:163:1: vars : 'vars' ':' ( varDecl )* ;
	[GrammarRule("vars")]
	private void vars()
	{
		EnterRule_vars();
		EnterRule("vars", 6);
		TraceIn("vars", 6);
		try { DebugEnterRule(GrammarFileName, "vars");
		DebugLocation(163, 22);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:164:2: ( 'vars' ':' ( varDecl )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:164:4: 'vars' ':' ( varDecl )*
			{
			DebugLocation(164, 4);
			Match(input,47,Follow._47_in_vars172); 
			DebugLocation(164, 11);
			Match(input,24,Follow._24_in_vars174); 
			DebugLocation(164, 15);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:164:15: ( varDecl )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, decisionCanBacktrack[9]);
				int LA9_0 = input.LA(1);

				if ((LA9_0==ID))
				{
					int LA9_2 = input.LA(2);

					if ((LA9_2==ID))
					{
						alt9 = 1;
					}


				}
				else if ((LA9_0==34||LA9_0==40))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:164:15: varDecl
					{
					DebugLocation(164, 15);
					PushFollow(Follow._varDecl_in_vars176);
					varDecl();
					PopFollow();


					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("vars", 6);
			LeaveRule("vars", 6);
			LeaveRule_vars();
	    }
	 	DebugLocation(164, 22);
		} finally { DebugExitRule(GrammarFileName, "vars"); }
		return;

	}
	// $ANTLR end "vars"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_varDecl() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_varDecl() {}

	// $ANTLR start "varDecl"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:166:1: varDecl : (t= primitiveType |t= referenceType ) ID ';' ;
	[GrammarRule("varDecl")]
	private void varDecl()
	{
		EnterRule_varDecl();
		EnterRule("varDecl", 7);
		TraceIn("varDecl", 7);
	    IToken ID3 = default(IToken);
	    string t = default(string);


	    	ClassSymbol clase;

		try { DebugEnterRule(GrammarFileName, "varDecl");
		DebugLocation(166, 128);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:170:5: ( (t= primitiveType |t= referenceType ) ID ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:170:9: (t= primitiveType |t= referenceType ) ID ';'
			{
			DebugLocation(170, 9);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:170:9: (t= primitiveType |t= referenceType )
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			switch (input.LA(1))
			{
			case 34:
				{
				int LA10_1 = input.LA(2);

				if ((LA10_1==32))
				{
					alt10 = 2;
				}
				else if ((LA10_1==ID))
				{
					alt10 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 40:
				{
				int LA10_2 = input.LA(2);

				if ((LA10_2==32))
				{
					alt10 = 2;
				}
				else if ((LA10_2==ID))
				{
					alt10 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ID:
				{
				alt10 = 2;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:170:10: t= primitiveType
				{
				DebugLocation(170, 12);
				PushFollow(Follow._primitiveType_in_varDecl201);
				t=primitiveType();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:170:30: t= referenceType
				{
				DebugLocation(170, 32);
				PushFollow(Follow._referenceType_in_varDecl209);
				t=referenceType();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(170, 49);
			clase = findType(t);
			DebugLocation(170, 78);
			ID3=(IToken)Match(input,ID,Follow._ID_in_varDecl214); 
			DebugLocation(170, 81);
			registerVariableInScope((ID3!=null?ID3.Text:null), clase);
			DebugLocation(170, 125);
			Match(input,25,Follow._25_in_varDecl218); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("varDecl", 7);
			LeaveRule("varDecl", 7);
			LeaveRule_varDecl();
	    }
	 	DebugLocation(170, 128);
		} finally { DebugExitRule(GrammarFileName, "varDecl"); }
		return;

	}
	// $ANTLR end "varDecl"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_primitiveType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_primitiveType() {}

	// $ANTLR start "primitiveType"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:173:1: primitiveType returns [string tipo] : t= ( 'int' | 'char' ) ;
	[GrammarRule("primitiveType")]
	private string primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 8);
		TraceIn("primitiveType", 8);
	    string tipo = default(string);


	    IToken t = default(IToken);

		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(173, 73);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:173:35: (t= ( 'int' | 'char' ) )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:173:37: t= ( 'int' | 'char' )
			{
			DebugLocation(173, 39);

			t=(IToken)input.LT(1);
			if (input.LA(1)==34||input.LA(1)==40)
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(173, 56);
			tipo = (t!=null?t.Text:null);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("primitiveType", 8);
			LeaveRule("primitiveType", 8);
			LeaveRule_primitiveType();
	    }
	 	DebugLocation(173, 73);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return tipo;

	}
	// $ANTLR end "primitiveType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_referenceType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_referenceType() {}

	// $ANTLR start "referenceType"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:175:1: referenceType returns [string tipo] : ( 'char' '[' ']' | 'int' '[' ']' | ID ) ;
	[GrammarRule("referenceType")]
	private string referenceType()
	{
		EnterRule_referenceType();
		EnterRule("referenceType", 9);
		TraceIn("referenceType", 9);
	    string tipo = default(string);


	    IToken ID4 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "referenceType");
		DebugLocation(175, 4);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:175:35: ( ( 'char' '[' ']' | 'int' '[' ']' | ID ) )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:176:5: ( 'char' '[' ']' | 'int' '[' ']' | ID )
			{
			DebugLocation(176, 5);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:176:5: ( 'char' '[' ']' | 'int' '[' ']' | ID )
			int alt11=3;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
			switch (input.LA(1))
			{
			case 34:
				{
				alt11 = 1;
				}
				break;
			case 40:
				{
				alt11 = 2;
				}
				break;
			case ID:
				{
				alt11 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 11, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:176:6: 'char' '[' ']'
				{
				DebugLocation(176, 6);
				Match(input,34,Follow._34_in_referenceType264); 
				DebugLocation(176, 13);
				Match(input,32,Follow._32_in_referenceType266); 
				DebugLocation(176, 17);
				Match(input,33,Follow._33_in_referenceType268); 
				DebugLocation(176, 21);
				tipo = "char[]";

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:177:6: 'int' '[' ']'
				{
				DebugLocation(177, 6);
				Match(input,40,Follow._40_in_referenceType278); 
				DebugLocation(177, 12);
				Match(input,32,Follow._32_in_referenceType280); 
				DebugLocation(177, 16);
				Match(input,33,Follow._33_in_referenceType282); 
				DebugLocation(177, 20);
				tipo = "int[]";

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:178:7: ID
				{
				DebugLocation(178, 7);
				ID4=(IToken)Match(input,ID,Follow._ID_in_referenceType292); 
				DebugLocation(178, 10);
				tipo = (ID4!=null?ID4.Text:null);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("referenceType", 9);
			LeaveRule("referenceType", 9);
			LeaveRule_referenceType();
	    }
	 	DebugLocation(179, 4);
		} finally { DebugExitRule(GrammarFileName, "referenceType"); }
		return tipo;

	}
	// $ANTLR end "referenceType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_voidType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_voidType() {}

	// $ANTLR start "voidType"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:181:1: voidType returns [string tipo] : t= 'void' ;
	[GrammarRule("voidType")]
	private string voidType()
	{
		EnterRule_voidType();
		EnterRule("voidType", 10);
		TraceIn("voidType", 10);
	    string tipo = default(string);


	    IToken t = default(IToken);

		try { DebugEnterRule(GrammarFileName, "voidType");
		DebugLocation(181, 60);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:181:30: (t= 'void' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:181:32: t= 'void'
			{
			DebugLocation(181, 34);
			t=(IToken)Match(input,48,Follow._48_in_voidType315); 
			DebugLocation(181, 43);
			tipo = (t!=null?t.Text:null);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("voidType", 10);
			LeaveRule("voidType", 10);
			LeaveRule_voidType();
	    }
	 	DebugLocation(181, 60);
		} finally { DebugExitRule(GrammarFileName, "voidType"); }
		return tipo;

	}
	// $ANTLR end "voidType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_formalParamType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_formalParamType() {}

	// $ANTLR start "formalParamType"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:183:1: formalParamType returns [string tipo] : (t= primitiveType |t= referenceType ) ;
	[GrammarRule("formalParamType")]
	private string formalParamType()
	{
		EnterRule_formalParamType();
		EnterRule("formalParamType", 11);
		TraceIn("formalParamType", 11);
	    string tipo = default(string);


	    string t = default(string);

		try { DebugEnterRule(GrammarFileName, "formalParamType");
		DebugLocation(183, 23);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:183:37: ( (t= primitiveType |t= referenceType ) )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:183:39: (t= primitiveType |t= referenceType )
			{
			DebugLocation(183, 39);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:183:39: (t= primitiveType |t= referenceType )
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
			switch (input.LA(1))
			{
			case 34:
				{
				int LA12_1 = input.LA(2);

				if ((LA12_1==32))
				{
					alt12 = 2;
				}
				else if ((LA12_1==ID))
				{
					alt12 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 40:
				{
				int LA12_2 = input.LA(2);

				if ((LA12_2==32))
				{
					alt12 = 2;
				}
				else if ((LA12_2==ID))
				{
					alt12 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ID:
				{
				alt12 = 2;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:183:40: t= primitiveType
				{
				DebugLocation(183, 42);
				PushFollow(Follow._primitiveType_in_formalParamType332);
				t=primitiveType();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:184:8: t= referenceType
				{
				DebugLocation(184, 10);
				PushFollow(Follow._referenceType_in_formalParamType346);
				t=referenceType();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(185, 6);
			tipo = t;

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("formalParamType", 11);
			LeaveRule("formalParamType", 11);
			LeaveRule_formalParamType();
	    }
	 	DebugLocation(185, 23);
		} finally { DebugExitRule(GrammarFileName, "formalParamType"); }
		return tipo;

	}
	// $ANTLR end "formalParamType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_methods() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_methods() {}

	// $ANTLR start "methods"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:202:1: methods : 'methods' ':' ( methodDeclaration )* ;
	[GrammarRule("methods")]
	private void methods()
	{
		EnterRule_methods();
		EnterRule("methods", 12);
		TraceIn("methods", 12);
		try { DebugEnterRule(GrammarFileName, "methods");
		DebugLocation(202, 35);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:203:2: ( 'methods' ':' ( methodDeclaration )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:203:4: 'methods' ':' ( methodDeclaration )*
			{
			DebugLocation(203, 4);
			Match(input,42,Follow._42_in_methods373); 
			DebugLocation(203, 14);
			Match(input,24,Follow._24_in_methods375); 
			DebugLocation(203, 18);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:203:18: ( methodDeclaration )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, decisionCanBacktrack[13]);
				int LA13_0 = input.LA(1);

				if ((LA13_0==48))
				{
					int LA13_1 = input.LA(2);

					if ((LA13_1==ID))
					{
						alt13 = 1;
					}


				}
				else if ((LA13_0==ID||LA13_0==34||LA13_0==40))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:203:18: methodDeclaration
					{
					DebugLocation(203, 18);
					PushFollow(Follow._methodDeclaration_in_methods377);
					methodDeclaration();
					PopFollow();


					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("methods", 12);
			LeaveRule("methods", 12);
			LeaveRule_methods();
	    }
	 	DebugLocation(203, 35);
		} finally { DebugExitRule(GrammarFileName, "methods"); }
		return;

	}
	// $ANTLR end "methods"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_methodDeclaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_methodDeclaration() {}

	// $ANTLR start "methodDeclaration"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:205:1: methodDeclaration : (tRet= primitiveType |tRet= referenceType |tRet= voidType ) ID '(' ( formalParameters )? ')' '{' ( vars )? someStatements '}' ;
	[GrammarRule("methodDeclaration")]
	private void methodDeclaration()
	{
		EnterRule_methodDeclaration();
		EnterRule("methodDeclaration", 13);
		TraceIn("methodDeclaration", 13);
	    IToken ID5 = default(IToken);
	    string tRet = default(string);


	    	ClassSymbol tipoRetorno;

		try { DebugEnterRule(GrammarFileName, "methodDeclaration");
		DebugLocation(205, 1);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:209:3: ( (tRet= primitiveType |tRet= referenceType |tRet= voidType ) ID '(' ( formalParameters )? ')' '{' ( vars )? someStatements '}' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:209:3: (tRet= primitiveType |tRet= referenceType |tRet= voidType ) ID '(' ( formalParameters )? ')' '{' ( vars )? someStatements '}'
			{
			DebugLocation(209, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:209:3: (tRet= primitiveType |tRet= referenceType |tRet= voidType )
			int alt14=3;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, decisionCanBacktrack[14]);
			switch (input.LA(1))
			{
			case 34:
				{
				int LA14_1 = input.LA(2);

				if ((LA14_1==32))
				{
					alt14 = 2;
				}
				else if ((LA14_1==ID))
				{
					alt14 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 40:
				{
				int LA14_2 = input.LA(2);

				if ((LA14_2==32))
				{
					alt14 = 2;
				}
				else if ((LA14_2==ID))
				{
					alt14 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ID:
				{
				alt14 = 2;
				}
				break;
			case 48:
				{
				alt14 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:209:4: tRet= primitiveType
				{
				DebugLocation(209, 9);
				PushFollow(Follow._primitiveType_in_methodDeclaration396);
				tRet=primitiveType();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:209:27: tRet= referenceType
				{
				DebugLocation(209, 32);
				PushFollow(Follow._referenceType_in_methodDeclaration404);
				tRet=referenceType();
				PopFollow();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:209:50: tRet= voidType
				{
				DebugLocation(209, 55);
				PushFollow(Follow._voidType_in_methodDeclaration412);
				tRet=voidType();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(209, 67);
			tipoRetorno = findType(tRet);
			DebugLocation(210, 2);
			ID5=(IToken)Match(input,ID,Follow._ID_in_methodDeclaration419); 
			DebugLocation(210, 5);
			registrarMetodo(tipoRetorno, (ID5!=null?ID5.Text:null));
			DebugLocation(211, 2);
			Match(input,16,Follow._16_in_methodDeclaration425); 
			DebugLocation(211, 6);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:211:6: ( formalParameters )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, decisionCanBacktrack[15]);
			int LA15_0 = input.LA(1);

			if ((LA15_0==ID||LA15_0==34||LA15_0==40))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:211:6: formalParameters
				{
				DebugLocation(211, 6);
				PushFollow(Follow._formalParameters_in_methodDeclaration427);
				formalParameters();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(211, 24);
			Match(input,17,Follow._17_in_methodDeclaration430); 
			DebugLocation(212, 2);
			Match(input,50,Follow._50_in_methodDeclaration434); 
			DebugLocation(212, 6);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:212:6: ( vars )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, decisionCanBacktrack[16]);
			int LA16_0 = input.LA(1);

			if ((LA16_0==47))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:212:6: vars
				{
				DebugLocation(212, 6);
				PushFollow(Follow._vars_in_methodDeclaration436);
				vars();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(212, 12);
			PushFollow(Follow._someStatements_in_methodDeclaration439);
			someStatements();
			PopFollow();

			DebugLocation(212, 27);
			Match(input,51,Follow._51_in_methodDeclaration441); 
			DebugLocation(213, 2);
			actualScope = ((MethodSymbol)actualScope).enclosingScope;

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("methodDeclaration", 13);
			LeaveRule("methodDeclaration", 13);
			LeaveRule_methodDeclaration();
	    }
	 	DebugLocation(214, 1);
		} finally { DebugExitRule(GrammarFileName, "methodDeclaration"); }
		return;

	}
	// $ANTLR end "methodDeclaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_formalParam() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_formalParam() {}

	// $ANTLR start "formalParam"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:216:1: formalParam : t= formalParamType ID ;
	[GrammarRule("formalParam")]
	private void formalParam()
	{
		EnterRule_formalParam();
		EnterRule("formalParam", 14);
		TraceIn("formalParam", 14);
	    IToken ID6 = default(IToken);
	    string t = default(string);

		try { DebugEnterRule(GrammarFileName, "formalParam");
		DebugLocation(216, 82);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:216:12: (t= formalParamType ID )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:216:14: t= formalParamType ID
			{
			DebugLocation(216, 16);
			PushFollow(Follow._formalParamType_in_formalParam459);
			t=formalParamType();
			PopFollow();

			DebugLocation(216, 34);
			ID6=(IToken)Match(input,ID,Follow._ID_in_formalParam461); 
			DebugLocation(216, 37);
			registerVariableInMethod((ID6!=null?ID6.Text:null), t);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("formalParam", 14);
			LeaveRule("formalParam", 14);
			LeaveRule_formalParam();
	    }
	 	DebugLocation(216, 82);
		} finally { DebugExitRule(GrammarFileName, "formalParam"); }
		return;

	}
	// $ANTLR end "formalParam"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_formalParameters() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_formalParameters() {}

	// $ANTLR start "formalParameters"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:218:1: formalParameters : t= formalParam ( ',' formalParam )* ;
	[GrammarRule("formalParameters")]
	private void formalParameters()
	{
		EnterRule_formalParameters();
		EnterRule("formalParameters", 15);
		TraceIn("formalParameters", 15);
		try { DebugEnterRule(GrammarFileName, "formalParameters");
		DebugLocation(218, 38);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:219:4: (t= formalParam ( ',' formalParam )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:219:4: t= formalParam ( ',' formalParam )*
			{
			DebugLocation(219, 6);
			PushFollow(Follow._formalParam_in_formalParameters477);
			formalParam();
			PopFollow();

			DebugLocation(219, 20);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:219:20: ( ',' formalParam )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, decisionCanBacktrack[17]);
				int LA17_0 = input.LA(1);

				if ((LA17_0==20))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:219:21: ',' formalParam
					{
					DebugLocation(219, 21);
					Match(input,20,Follow._20_in_formalParameters480); 
					DebugLocation(219, 25);
					PushFollow(Follow._formalParam_in_formalParameters482);
					formalParam();
					PopFollow();


					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("formalParameters", 15);
			LeaveRule("formalParameters", 15);
			LeaveRule_formalParameters();
	    }
	 	DebugLocation(219, 38);
		} finally { DebugExitRule(GrammarFileName, "formalParameters"); }
		return;

	}
	// $ANTLR end "formalParameters"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_someStatements() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_someStatements() {}

	// $ANTLR start "someStatements"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:221:1: someStatements : ( statement )* ;
	[GrammarRule("someStatements")]
	private void someStatements()
	{
		EnterRule_someStatements();
		EnterRule("someStatements", 16);
		TraceIn("someStatements", 16);
		try { DebugEnterRule(GrammarFileName, "someStatements");
		DebugLocation(221, 13);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:222:2: ( ( statement )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:222:4: ( statement )*
			{
			DebugLocation(222, 4);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:222:4: ( statement )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, decisionCanBacktrack[18]);
				int LA18_0 = input.LA(1);

				if ((LA18_0==ID||LA18_0==25||LA18_0==39||(LA18_0>=44 && LA18_0<=46)||LA18_0==49))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:222:4: statement
					{
					DebugLocation(222, 4);
					PushFollow(Follow._statement_in_someStatements494);
					statement();
					PopFollow();


					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("someStatements", 16);
			LeaveRule("someStatements", 16);
			LeaveRule_someStatements();
	    }
	 	DebugLocation(222, 13);
		} finally { DebugExitRule(GrammarFileName, "someStatements"); }
		return;

	}
	// $ANTLR end "someStatements"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_statement() {}

	// $ANTLR start "statement"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:224:1: statement : ( assignment | invoke | if_inst | while_inst | return_inst | read | print | ';' );
	[GrammarRule("statement")]
	private void statement()
	{
		EnterRule_statement();
		EnterRule("statement", 17);
		TraceIn("statement", 17);
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(224, 7);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:224:11: ( assignment | invoke | if_inst | while_inst | return_inst | read | print | ';' )
			int alt19=8;
			try { DebugEnterDecision(19, decisionCanBacktrack[19]);
			switch (input.LA(1))
			{
			case ID:
				{
				switch (input.LA(2))
				{
				case 22:
					{
					int LA19_8 = input.LA(3);

					if ((LA19_8==ID))
					{
						int LA19_11 = input.LA(4);

						if ((LA19_11==16))
						{
							alt19 = 2;
						}
						else if ((LA19_11==28))
						{
							alt19 = 1;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 19, 11, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 19, 8, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 28:
				case 32:
					{
					alt19 = 1;
					}
					break;
				case 16:
					{
					alt19 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 19, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case 39:
				{
				alt19 = 3;
				}
				break;
			case 49:
				{
				alt19 = 4;
				}
				break;
			case 46:
				{
				alt19 = 5;
				}
				break;
			case 45:
				{
				alt19 = 6;
				}
				break;
			case 44:
				{
				alt19 = 7;
				}
				break;
			case 25:
				{
				alt19 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:224:13: assignment
				{
				DebugLocation(224, 13);
				PushFollow(Follow._assignment_in_statement503);
				assignment();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:225:5: invoke
				{
				DebugLocation(225, 5);
				PushFollow(Follow._invoke_in_statement509);
				invoke();
				PopFollow();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:226:5: if_inst
				{
				DebugLocation(226, 5);
				PushFollow(Follow._if_inst_in_statement515);
				if_inst();
				PopFollow();


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:227:5: while_inst
				{
				DebugLocation(227, 5);
				PushFollow(Follow._while_inst_in_statement521);
				while_inst();
				PopFollow();


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:228:5: return_inst
				{
				DebugLocation(228, 5);
				PushFollow(Follow._return_inst_in_statement527);
				return_inst();
				PopFollow();


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:229:5: read
				{
				DebugLocation(229, 5);
				PushFollow(Follow._read_in_statement533);
				read();
				PopFollow();


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:230:5: print
				{
				DebugLocation(230, 5);
				PushFollow(Follow._print_in_statement539);
				print();
				PopFollow();


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:231:5: ';'
				{
				DebugLocation(231, 5);
				Match(input,25,Follow._25_in_statement545); 

				}
				break;

			}
		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("statement", 17);
			LeaveRule("statement", 17);
			LeaveRule_statement();
	    }
	 	DebugLocation(231, 7);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return;

	}
	// $ANTLR end "statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_assignment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_assignment() {}

	// $ANTLR start "assignment"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:233:1: assignment : designator '=' expression ';' ;
	[GrammarRule("assignment")]
	private void assignment()
	{
		EnterRule_assignment();
		EnterRule("assignment", 18);
		TraceIn("assignment", 18);
		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(233, 32);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:234:2: ( designator '=' expression ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:234:4: designator '=' expression ';'
			{
			DebugLocation(234, 4);
			PushFollow(Follow._designator_in_assignment556);
			designator();
			PopFollow();

			DebugLocation(234, 15);
			Match(input,28,Follow._28_in_assignment558); 
			DebugLocation(234, 19);
			PushFollow(Follow._expression_in_assignment560);
			expression();
			PopFollow();

			DebugLocation(234, 30);
			Match(input,25,Follow._25_in_assignment562); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("assignment", 18);
			LeaveRule("assignment", 18);
			LeaveRule_assignment();
	    }
	 	DebugLocation(234, 32);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return;

	}
	// $ANTLR end "assignment"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_invoke() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_invoke() {}

	// $ANTLR start "invoke"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:236:1: invoke : ( ID actualParameters ';' | ID '.' ID actualParameters ';' );
	[GrammarRule("invoke")]
	private void invoke()
	{
		EnterRule_invoke();
		EnterRule("invoke", 19);
		TraceIn("invoke", 19);
		try { DebugEnterRule(GrammarFileName, "invoke");
		DebugLocation(236, 2);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:236:8: ( ID actualParameters ';' | ID '.' ID actualParameters ';' )
			int alt20=2;
			try { DebugEnterDecision(20, decisionCanBacktrack[20]);
			int LA20_0 = input.LA(1);

			if ((LA20_0==ID))
			{
				int LA20_1 = input.LA(2);

				if ((LA20_1==22))
				{
					alt20 = 2;
				}
				else if ((LA20_1==16))
				{
					alt20 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 20, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:236:10: ID actualParameters ';'
				{
				DebugLocation(236, 10);
				Match(input,ID,Follow._ID_in_invoke571); 
				DebugLocation(236, 13);
				PushFollow(Follow._actualParameters_in_invoke573);
				actualParameters();
				PopFollow();

				DebugLocation(236, 30);
				Match(input,25,Follow._25_in_invoke575); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:237:5: ID '.' ID actualParameters ';'
				{
				DebugLocation(237, 5);
				Match(input,ID,Follow._ID_in_invoke582); 
				DebugLocation(237, 8);
				Match(input,22,Follow._22_in_invoke584); 
				DebugLocation(237, 12);
				Match(input,ID,Follow._ID_in_invoke586); 
				DebugLocation(237, 15);
				PushFollow(Follow._actualParameters_in_invoke588);
				actualParameters();
				PopFollow();

				DebugLocation(237, 32);
				Match(input,25,Follow._25_in_invoke590); 

				}
				break;

			}
		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("invoke", 19);
			LeaveRule("invoke", 19);
			LeaveRule_invoke();
	    }
	 	DebugLocation(238, 2);
		} finally { DebugExitRule(GrammarFileName, "invoke"); }
		return;

	}
	// $ANTLR end "invoke"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_if_inst() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_if_inst() {}

	// $ANTLR start "if_inst"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:240:1: if_inst : 'if' '(' condition ')' '{' someStatements '}' ( 'else' '{' someStatements '}' )? ;
	[GrammarRule("if_inst")]
	private void if_inst()
	{
		EnterRule_if_inst();
		EnterRule("if_inst", 20);
		TraceIn("if_inst", 20);
		try { DebugEnterRule(GrammarFileName, "if_inst");
		DebugLocation(240, 88);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:240:9: ( 'if' '(' condition ')' '{' someStatements '}' ( 'else' '{' someStatements '}' )? )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:240:11: 'if' '(' condition ')' '{' someStatements '}' ( 'else' '{' someStatements '}' )?
			{
			DebugLocation(240, 11);
			Match(input,39,Follow._39_in_if_inst602); 
			DebugLocation(240, 16);
			Match(input,16,Follow._16_in_if_inst604); 
			DebugLocation(240, 20);
			PushFollow(Follow._condition_in_if_inst606);
			condition();
			PopFollow();

			DebugLocation(240, 30);
			Match(input,17,Follow._17_in_if_inst608); 
			DebugLocation(240, 34);
			Match(input,50,Follow._50_in_if_inst610); 
			DebugLocation(240, 38);
			PushFollow(Follow._someStatements_in_if_inst612);
			someStatements();
			PopFollow();

			DebugLocation(240, 53);
			Match(input,51,Follow._51_in_if_inst614); 
			DebugLocation(240, 57);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:240:57: ( 'else' '{' someStatements '}' )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, decisionCanBacktrack[21]);
			int LA21_0 = input.LA(1);

			if ((LA21_0==37))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:240:58: 'else' '{' someStatements '}'
				{
				DebugLocation(240, 58);
				Match(input,37,Follow._37_in_if_inst617); 
				DebugLocation(240, 65);
				Match(input,50,Follow._50_in_if_inst619); 
				DebugLocation(240, 69);
				PushFollow(Follow._someStatements_in_if_inst621);
				someStatements();
				PopFollow();

				DebugLocation(240, 84);
				Match(input,51,Follow._51_in_if_inst623); 

				}
				break;

			}
			} finally { DebugExitSubRule(21); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("if_inst", 20);
			LeaveRule("if_inst", 20);
			LeaveRule_if_inst();
	    }
	 	DebugLocation(240, 88);
		} finally { DebugExitRule(GrammarFileName, "if_inst"); }
		return;

	}
	// $ANTLR end "if_inst"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_while_inst() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_while_inst() {}

	// $ANTLR start "while_inst"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:242:1: while_inst : 'while' '(' condition ')' '{' someStatements '}' ;
	[GrammarRule("while_inst")]
	private void while_inst()
	{
		EnterRule_while_inst();
		EnterRule("while_inst", 21);
		TraceIn("while_inst", 21);
		try { DebugEnterRule(GrammarFileName, "while_inst");
		DebugLocation(242, 61);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:242:12: ( 'while' '(' condition ')' '{' someStatements '}' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:242:14: 'while' '(' condition ')' '{' someStatements '}'
			{
			DebugLocation(242, 14);
			Match(input,49,Follow._49_in_while_inst633); 
			DebugLocation(242, 22);
			Match(input,16,Follow._16_in_while_inst635); 
			DebugLocation(242, 26);
			PushFollow(Follow._condition_in_while_inst637);
			condition();
			PopFollow();

			DebugLocation(242, 36);
			Match(input,17,Follow._17_in_while_inst639); 
			DebugLocation(242, 40);
			Match(input,50,Follow._50_in_while_inst641); 
			DebugLocation(242, 44);
			PushFollow(Follow._someStatements_in_while_inst643);
			someStatements();
			PopFollow();

			DebugLocation(242, 59);
			Match(input,51,Follow._51_in_while_inst645); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("while_inst", 21);
			LeaveRule("while_inst", 21);
			LeaveRule_while_inst();
	    }
	 	DebugLocation(242, 61);
		} finally { DebugExitRule(GrammarFileName, "while_inst"); }
		return;

	}
	// $ANTLR end "while_inst"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_return_inst() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_return_inst() {}

	// $ANTLR start "return_inst"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:244:1: return_inst : 'return' ( expression )? ';' ;
	[GrammarRule("return_inst")]
	private void return_inst()
	{
		EnterRule_return_inst();
		EnterRule("return_inst", 22);
		TraceIn("return_inst", 22);
		try { DebugEnterRule(GrammarFileName, "return_inst");
		DebugLocation(244, 38);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:244:13: ( 'return' ( expression )? ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:244:15: 'return' ( expression )? ';'
			{
			DebugLocation(244, 15);
			Match(input,46,Follow._46_in_return_inst653); 
			DebugLocation(244, 24);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:244:24: ( expression )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, decisionCanBacktrack[22]);
			int LA22_0 = input.LA(1);

			if ((LA22_0==CHAR||(LA22_0>=ID && LA22_0<=INT)||LA22_0==16||LA22_0==43))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:244:24: expression
				{
				DebugLocation(244, 24);
				PushFollow(Follow._expression_in_return_inst655);
				expression();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(244, 36);
			Match(input,25,Follow._25_in_return_inst658); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("return_inst", 22);
			LeaveRule("return_inst", 22);
			LeaveRule_return_inst();
	    }
	 	DebugLocation(244, 38);
		} finally { DebugExitRule(GrammarFileName, "return_inst"); }
		return;

	}
	// $ANTLR end "return_inst"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_read() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_read() {}

	// $ANTLR start "read"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:246:1: read : 'read' '(' designator ')' ';' ;
	[GrammarRule("read")]
	private void read()
	{
		EnterRule_read();
		EnterRule("read", 23);
		TraceIn("read", 23);
		try { DebugEnterRule(GrammarFileName, "read");
		DebugLocation(246, 36);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:246:6: ( 'read' '(' designator ')' ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:246:8: 'read' '(' designator ')' ';'
			{
			DebugLocation(246, 8);
			Match(input,45,Follow._45_in_read666); 
			DebugLocation(246, 15);
			Match(input,16,Follow._16_in_read668); 
			DebugLocation(246, 19);
			PushFollow(Follow._designator_in_read670);
			designator();
			PopFollow();

			DebugLocation(246, 30);
			Match(input,17,Follow._17_in_read672); 
			DebugLocation(246, 34);
			Match(input,25,Follow._25_in_read674); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("read", 23);
			LeaveRule("read", 23);
			LeaveRule_read();
	    }
	 	DebugLocation(246, 36);
		} finally { DebugExitRule(GrammarFileName, "read"); }
		return;

	}
	// $ANTLR end "read"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_print() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_print() {}

	// $ANTLR start "print"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:248:1: print : 'print' '(' expression ')' ';' ;
	[GrammarRule("print")]
	private void print()
	{
		EnterRule_print();
		EnterRule("print", 24);
		TraceIn("print", 24);
		try { DebugEnterRule(GrammarFileName, "print");
		DebugLocation(248, 38);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:248:7: ( 'print' '(' expression ')' ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:248:9: 'print' '(' expression ')' ';'
			{
			DebugLocation(248, 9);
			Match(input,44,Follow._44_in_print682); 
			DebugLocation(248, 17);
			Match(input,16,Follow._16_in_print684); 
			DebugLocation(248, 21);
			PushFollow(Follow._expression_in_print686);
			expression();
			PopFollow();

			DebugLocation(248, 32);
			Match(input,17,Follow._17_in_print688); 
			DebugLocation(248, 36);
			Match(input,25,Follow._25_in_print690); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("print", 24);
			LeaveRule("print", 24);
			LeaveRule_print();
	    }
	 	DebugLocation(248, 38);
		} finally { DebugExitRule(GrammarFileName, "print"); }
		return;

	}
	// $ANTLR end "print"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_designator() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_designator() {}

	// $ANTLR start "designator"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:250:1: designator : ID ( ( '.' ID ) | ( '[' expression ']' ) )? ;
	[GrammarRule("designator")]
	private void designator()
	{
		EnterRule_designator();
		EnterRule("designator", 25);
		TraceIn("designator", 25);
		try { DebugEnterRule(GrammarFileName, "designator");
		DebugLocation(250, 40);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:251:2: ( ID ( ( '.' ID ) | ( '[' expression ']' ) )? )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:251:4: ID ( ( '.' ID ) | ( '[' expression ']' ) )?
			{
			DebugLocation(251, 4);
			Match(input,ID,Follow._ID_in_designator699); 
			DebugLocation(251, 7);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:251:7: ( ( '.' ID ) | ( '[' expression ']' ) )?
			int alt23=3;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, decisionCanBacktrack[23]);
			int LA23_0 = input.LA(1);

			if ((LA23_0==22))
			{
				alt23 = 1;
			}
			else if ((LA23_0==32))
			{
				alt23 = 2;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:251:8: ( '.' ID )
				{
				DebugLocation(251, 8);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:251:8: ( '.' ID )
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:251:9: '.' ID
				{
				DebugLocation(251, 9);
				Match(input,22,Follow._22_in_designator703); 
				DebugLocation(251, 13);
				Match(input,ID,Follow._ID_in_designator705); 

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:251:19: ( '[' expression ']' )
				{
				DebugLocation(251, 19);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:251:19: ( '[' expression ']' )
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:251:20: '[' expression ']'
				{
				DebugLocation(251, 20);
				Match(input,32,Follow._32_in_designator711); 
				DebugLocation(251, 24);
				PushFollow(Follow._expression_in_designator713);
				expression();
				PopFollow();

				DebugLocation(251, 35);
				Match(input,33,Follow._33_in_designator715); 

				}


				}
				break;

			}
			} finally { DebugExitSubRule(23); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("designator", 25);
			LeaveRule("designator", 25);
			LeaveRule_designator();
	    }
	 	DebugLocation(251, 40);
		} finally { DebugExitRule(GrammarFileName, "designator"); }
		return;

	}
	// $ANTLR end "designator"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_actualParameters() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_actualParameters() {}

	// $ANTLR start "actualParameters"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:253:1: actualParameters : '(' ( expression ( ',' expression )* )? ')' ;
	[GrammarRule("actualParameters")]
	private void actualParameters()
	{
		EnterRule_actualParameters();
		EnterRule("actualParameters", 26);
		TraceIn("actualParameters", 26);
		try { DebugEnterRule(GrammarFileName, "actualParameters");
		DebugLocation(253, 42);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:254:2: ( '(' ( expression ( ',' expression )* )? ')' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:254:4: '(' ( expression ( ',' expression )* )? ')'
			{
			DebugLocation(254, 4);
			Match(input,16,Follow._16_in_actualParameters728); 
			DebugLocation(254, 8);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:254:8: ( expression ( ',' expression )* )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, decisionCanBacktrack[25]);
			int LA25_0 = input.LA(1);

			if ((LA25_0==CHAR||(LA25_0>=ID && LA25_0<=INT)||LA25_0==16||LA25_0==43))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:254:9: expression ( ',' expression )*
				{
				DebugLocation(254, 9);
				PushFollow(Follow._expression_in_actualParameters731);
				expression();
				PopFollow();

				DebugLocation(254, 20);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:254:20: ( ',' expression )*
				try { DebugEnterSubRule(24);
				while (true)
				{
					int alt24=2;
					try { DebugEnterDecision(24, decisionCanBacktrack[24]);
					int LA24_0 = input.LA(1);

					if ((LA24_0==20))
					{
						alt24 = 1;
					}


					} finally { DebugExitDecision(24); }
					switch ( alt24 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:254:21: ',' expression
						{
						DebugLocation(254, 21);
						Match(input,20,Follow._20_in_actualParameters734); 
						DebugLocation(254, 25);
						PushFollow(Follow._expression_in_actualParameters736);
						expression();
						PopFollow();


						}
						break;

					default:
						goto loop24;
					}
				}

				loop24:
					;

				} finally { DebugExitSubRule(24); }


				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(254, 40);
			Match(input,17,Follow._17_in_actualParameters742); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("actualParameters", 26);
			LeaveRule("actualParameters", 26);
			LeaveRule_actualParameters();
	    }
	 	DebugLocation(254, 42);
		} finally { DebugExitRule(GrammarFileName, "actualParameters"); }
		return;

	}
	// $ANTLR end "actualParameters"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_condition() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_condition() {}

	// $ANTLR start "condition"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:256:1: condition : expression relOp expression ;
	[GrammarRule("condition")]
	private void condition()
	{
		EnterRule_condition();
		EnterRule("condition", 27);
		TraceIn("condition", 27);
		try { DebugEnterRule(GrammarFileName, "condition");
		DebugLocation(256, 30);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:257:2: ( expression relOp expression )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:257:4: expression relOp expression
			{
			DebugLocation(257, 4);
			PushFollow(Follow._expression_in_condition752);
			expression();
			PopFollow();

			DebugLocation(257, 15);
			PushFollow(Follow._relOp_in_condition754);
			relOp();
			PopFollow();

			DebugLocation(257, 21);
			PushFollow(Follow._expression_in_condition756);
			expression();
			PopFollow();


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("condition", 27);
			LeaveRule("condition", 27);
			LeaveRule_condition();
	    }
	 	DebugLocation(257, 30);
		} finally { DebugExitRule(GrammarFileName, "condition"); }
		return;

	}
	// $ANTLR end "condition"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}

	// $ANTLR start "expression"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:259:1: expression : term ( ( '+' | '-' ) term )? ;
	[GrammarRule("expression")]
	private void expression()
	{
		EnterRule_expression();
		EnterRule("expression", 28);
		TraceIn("expression", 28);
		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(259, 27);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:260:2: ( term ( ( '+' | '-' ) term )? )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:260:4: term ( ( '+' | '-' ) term )?
			{
			DebugLocation(260, 4);
			PushFollow(Follow._term_in_expression765);
			term();
			PopFollow();

			DebugLocation(260, 9);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:260:9: ( ( '+' | '-' ) term )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, decisionCanBacktrack[26]);
			int LA26_0 = input.LA(1);

			if ((LA26_0==19||LA26_0==21))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:260:10: ( '+' | '-' ) term
				{
				DebugLocation(260, 10);
				if (input.LA(1)==19||input.LA(1)==21)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(260, 22);
				PushFollow(Follow._term_in_expression776);
				term();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(26); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("expression", 28);
			LeaveRule("expression", 28);
			LeaveRule_expression();
	    }
	 	DebugLocation(260, 27);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_term() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_term() {}

	// $ANTLR start "term"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:262:1: term : factor ( ( '*' | '/' ) factor )? ;
	[GrammarRule("term")]
	private void term()
	{
		EnterRule_term();
		EnterRule("term", 29);
		TraceIn("term", 29);
		try { DebugEnterRule(GrammarFileName, "term");
		DebugLocation(262, 35);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:262:6: ( factor ( ( '*' | '/' ) factor )? )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:262:8: factor ( ( '*' | '/' ) factor )?
			{
			DebugLocation(262, 8);
			PushFollow(Follow._factor_in_term787);
			factor();
			PopFollow();

			DebugLocation(262, 15);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:262:15: ( ( '*' | '/' ) factor )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, decisionCanBacktrack[27]);
			int LA27_0 = input.LA(1);

			if ((LA27_0==18||LA27_0==23))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:262:16: ( '*' | '/' ) factor
				{
				DebugLocation(262, 16);
				if (input.LA(1)==18||input.LA(1)==23)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(262, 28);
				PushFollow(Follow._factor_in_term798);
				factor();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(27); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("term", 29);
			LeaveRule("term", 29);
			LeaveRule_term();
	    }
	 	DebugLocation(262, 35);
		} finally { DebugExitRule(GrammarFileName, "term"); }
		return;

	}
	// $ANTLR end "term"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_factor() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_factor() {}

	// $ANTLR start "factor"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:264:1: factor : ( invoke | ID | ID '.' ID | ID '[' expression ']' | INT | CHAR | 'new' referenceType '(' ')' ';' | '(' expression ')' );
	[GrammarRule("factor")]
	private void factor()
	{
		EnterRule_factor();
		EnterRule("factor", 30);
		TraceIn("factor", 30);
		try { DebugEnterRule(GrammarFileName, "factor");
		DebugLocation(264, 2);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:264:8: ( invoke | ID | ID '.' ID | ID '[' expression ']' | INT | CHAR | 'new' referenceType '(' ')' ';' | '(' expression ')' )
			int alt28=8;
			try { DebugEnterDecision(28, decisionCanBacktrack[28]);
			switch (input.LA(1))
			{
			case ID:
				{
				switch (input.LA(2))
				{
				case 22:
					{
					int LA28_6 = input.LA(3);

					if ((LA28_6==ID))
					{
						int LA28_10 = input.LA(4);

						if ((LA28_10==16))
						{
							alt28 = 1;
						}
						else if ((LA28_10==15||(LA28_10>=17 && LA28_10<=21)||LA28_10==23||(LA28_10>=25 && LA28_10<=27)||(LA28_10>=29 && LA28_10<=31)||LA28_10==33))
						{
							alt28 = 3;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 28, 10, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 28, 6, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 32:
					{
					alt28 = 4;
					}
					break;
				case 16:
					{
					alt28 = 1;
					}
					break;
				case 15:
				case 17:
				case 18:
				case 19:
				case 20:
				case 21:
				case 23:
				case 25:
				case 26:
				case 27:
				case 29:
				case 30:
				case 31:
				case 33:
					{
					alt28 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 28, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case INT:
				{
				alt28 = 5;
				}
				break;
			case CHAR:
				{
				alt28 = 6;
				}
				break;
			case 43:
				{
				alt28 = 7;
				}
				break;
			case 16:
				{
				alt28 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 28, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:264:10: invoke
				{
				DebugLocation(264, 10);
				PushFollow(Follow._invoke_in_factor808);
				invoke();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:265:5: ID
				{
				DebugLocation(265, 5);
				Match(input,ID,Follow._ID_in_factor814); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:266:5: ID '.' ID
				{
				DebugLocation(266, 5);
				Match(input,ID,Follow._ID_in_factor820); 
				DebugLocation(266, 8);
				Match(input,22,Follow._22_in_factor822); 
				DebugLocation(266, 12);
				Match(input,ID,Follow._ID_in_factor824); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:267:5: ID '[' expression ']'
				{
				DebugLocation(267, 5);
				Match(input,ID,Follow._ID_in_factor830); 
				DebugLocation(267, 8);
				Match(input,32,Follow._32_in_factor832); 
				DebugLocation(267, 12);
				PushFollow(Follow._expression_in_factor834);
				expression();
				PopFollow();

				DebugLocation(267, 23);
				Match(input,33,Follow._33_in_factor836); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:268:5: INT
				{
				DebugLocation(268, 5);
				Match(input,INT,Follow._INT_in_factor842); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:269:5: CHAR
				{
				DebugLocation(269, 5);
				Match(input,CHAR,Follow._CHAR_in_factor848); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:270:5: 'new' referenceType '(' ')' ';'
				{
				DebugLocation(270, 5);
				Match(input,43,Follow._43_in_factor854); 
				DebugLocation(270, 11);
				PushFollow(Follow._referenceType_in_factor856);
				referenceType();
				PopFollow();

				DebugLocation(270, 25);
				Match(input,16,Follow._16_in_factor858); 
				DebugLocation(270, 29);
				Match(input,17,Follow._17_in_factor860); 
				DebugLocation(270, 33);
				Match(input,25,Follow._25_in_factor862); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:271:5: '(' expression ')'
				{
				DebugLocation(271, 5);
				Match(input,16,Follow._16_in_factor868); 
				DebugLocation(271, 9);
				PushFollow(Follow._expression_in_factor870);
				expression();
				PopFollow();

				DebugLocation(271, 20);
				Match(input,17,Follow._17_in_factor872); 

				}
				break;

			}
		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("factor", 30);
			LeaveRule("factor", 30);
			LeaveRule_factor();
	    }
	 	DebugLocation(272, 2);
		} finally { DebugExitRule(GrammarFileName, "factor"); }
		return;

	}
	// $ANTLR end "factor"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_relOp() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_relOp() {}

	// $ANTLR start "relOp"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:274:1: relOp : ( '==' | '!=' | '>' | '>=' | '<' | '<=' );
	[GrammarRule("relOp")]
	private void relOp()
	{
		EnterRule_relOp();
		EnterRule("relOp", 31);
		TraceIn("relOp", 31);
		try { DebugEnterRule(GrammarFileName, "relOp");
		DebugLocation(274, 45);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:274:7: ( '==' | '!=' | '>' | '>=' | '<' | '<=' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:
			{
			DebugLocation(274, 7);
			if (input.LA(1)==15||(input.LA(1)>=26 && input.LA(1)<=27)||(input.LA(1)>=29 && input.LA(1)<=31))
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("relOp", 31);
			LeaveRule("relOp", 31);
			LeaveRule_relOp();
	    }
	 	DebugLocation(274, 45);
		} finally { DebugExitRule(GrammarFileName, "relOp"); }
		return;

	}
	// $ANTLR end "relOp"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _classes_in_program62 = new BitSet(new ulong[]{0x1840000000000UL});
		public static readonly BitSet _vars_in_program67 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _methods_in_program70 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _mainMethod_in_program73 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _48_in_mainMethod82 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _41_in_mainMethod84 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_mainMethod86 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_mainMethod88 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _50_in_mainMethod90 = new BitSet(new ulong[]{0xAF08002000400UL});
		public static readonly BitSet _vars_in_mainMethod91 = new BitSet(new ulong[]{0xA708002000400UL});
		public static readonly BitSet _someStatements_in_mainMethod94 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _51_in_mainMethod96 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _36_in_classes107 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_classes109 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _classDecl_in_classes111 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _35_in_classDecl126 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_classDecl132 = new BitSet(new ulong[]{0x4004000000000UL});
		public static readonly BitSet _superClass_in_classDecl135 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _50_in_classDecl141 = new BitSet(new ulong[]{0x8840000000000UL});
		public static readonly BitSet _vars_in_classDecl143 = new BitSet(new ulong[]{0x8040000000000UL});
		public static readonly BitSet _methods_in_classDecl146 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _51_in_classDecl149 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _38_in_superClass159 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_superClass161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _47_in_vars172 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_vars174 = new BitSet(new ulong[]{0x10400000402UL});
		public static readonly BitSet _varDecl_in_vars176 = new BitSet(new ulong[]{0x10400000402UL});
		public static readonly BitSet _primitiveType_in_varDecl201 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _referenceType_in_varDecl209 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_varDecl214 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_varDecl218 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_primitiveType242 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _34_in_referenceType264 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _32_in_referenceType266 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_referenceType268 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _40_in_referenceType278 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _32_in_referenceType280 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_referenceType282 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_referenceType292 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _48_in_voidType315 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_formalParamType332 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _referenceType_in_formalParamType346 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _42_in_methods373 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_methods375 = new BitSet(new ulong[]{0x1010400000402UL});
		public static readonly BitSet _methodDeclaration_in_methods377 = new BitSet(new ulong[]{0x1010400000402UL});
		public static readonly BitSet _primitiveType_in_methodDeclaration396 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _referenceType_in_methodDeclaration404 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _voidType_in_methodDeclaration412 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_methodDeclaration419 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_methodDeclaration425 = new BitSet(new ulong[]{0x10400020400UL});
		public static readonly BitSet _formalParameters_in_methodDeclaration427 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_methodDeclaration430 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _50_in_methodDeclaration434 = new BitSet(new ulong[]{0xAF08002000400UL});
		public static readonly BitSet _vars_in_methodDeclaration436 = new BitSet(new ulong[]{0xA708002000400UL});
		public static readonly BitSet _someStatements_in_methodDeclaration439 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _51_in_methodDeclaration441 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _formalParamType_in_formalParam459 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_formalParam461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _formalParam_in_formalParameters477 = new BitSet(new ulong[]{0x100002UL});
		public static readonly BitSet _20_in_formalParameters480 = new BitSet(new ulong[]{0x10400000400UL});
		public static readonly BitSet _formalParam_in_formalParameters482 = new BitSet(new ulong[]{0x100002UL});
		public static readonly BitSet _statement_in_someStatements494 = new BitSet(new ulong[]{0x2708002000402UL});
		public static readonly BitSet _assignment_in_statement503 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _invoke_in_statement509 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _if_inst_in_statement515 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _while_inst_in_statement521 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _return_inst_in_statement527 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _read_in_statement533 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _print_in_statement539 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _25_in_statement545 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _designator_in_assignment556 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _28_in_assignment558 = new BitSet(new ulong[]{0x80000010C10UL});
		public static readonly BitSet _expression_in_assignment560 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_assignment562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_invoke571 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _actualParameters_in_invoke573 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_invoke575 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_invoke582 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _22_in_invoke584 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_invoke586 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _actualParameters_in_invoke588 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_invoke590 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _39_in_if_inst602 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_if_inst604 = new BitSet(new ulong[]{0x80000010C10UL});
		public static readonly BitSet _condition_in_if_inst606 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_if_inst608 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _50_in_if_inst610 = new BitSet(new ulong[]{0xA708002000400UL});
		public static readonly BitSet _someStatements_in_if_inst612 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _51_in_if_inst614 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_if_inst617 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _50_in_if_inst619 = new BitSet(new ulong[]{0xA708002000400UL});
		public static readonly BitSet _someStatements_in_if_inst621 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _51_in_if_inst623 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _49_in_while_inst633 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_while_inst635 = new BitSet(new ulong[]{0x80000010C10UL});
		public static readonly BitSet _condition_in_while_inst637 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_while_inst639 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _50_in_while_inst641 = new BitSet(new ulong[]{0xA708002000400UL});
		public static readonly BitSet _someStatements_in_while_inst643 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _51_in_while_inst645 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _46_in_return_inst653 = new BitSet(new ulong[]{0x80002010C10UL});
		public static readonly BitSet _expression_in_return_inst655 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_return_inst658 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _45_in_read666 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_read668 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _designator_in_read670 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_read672 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_read674 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _44_in_print682 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_print684 = new BitSet(new ulong[]{0x80000010C10UL});
		public static readonly BitSet _expression_in_print686 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_print688 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_print690 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_designator699 = new BitSet(new ulong[]{0x100400002UL});
		public static readonly BitSet _22_in_designator703 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_designator705 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_designator711 = new BitSet(new ulong[]{0x80000010C10UL});
		public static readonly BitSet _expression_in_designator713 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_designator715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _16_in_actualParameters728 = new BitSet(new ulong[]{0x80000030C10UL});
		public static readonly BitSet _expression_in_actualParameters731 = new BitSet(new ulong[]{0x120000UL});
		public static readonly BitSet _20_in_actualParameters734 = new BitSet(new ulong[]{0x80000010C10UL});
		public static readonly BitSet _expression_in_actualParameters736 = new BitSet(new ulong[]{0x120000UL});
		public static readonly BitSet _17_in_actualParameters742 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_condition752 = new BitSet(new ulong[]{0xEC008000UL});
		public static readonly BitSet _relOp_in_condition754 = new BitSet(new ulong[]{0x80000010C10UL});
		public static readonly BitSet _expression_in_condition756 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _term_in_expression765 = new BitSet(new ulong[]{0x280002UL});
		public static readonly BitSet _set_in_expression768 = new BitSet(new ulong[]{0x80000010C10UL});
		public static readonly BitSet _term_in_expression776 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _factor_in_term787 = new BitSet(new ulong[]{0x840002UL});
		public static readonly BitSet _set_in_term790 = new BitSet(new ulong[]{0x80000010C10UL});
		public static readonly BitSet _factor_in_term798 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _invoke_in_factor808 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_factor814 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_factor820 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _22_in_factor822 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_factor824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_factor830 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _32_in_factor832 = new BitSet(new ulong[]{0x80000010C10UL});
		public static readonly BitSet _expression_in_factor834 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_factor836 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_factor842 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHAR_in_factor848 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _43_in_factor854 = new BitSet(new ulong[]{0x10400000400UL});
		public static readonly BitSet _referenceType_in_factor856 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_factor858 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_factor860 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_factor862 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _16_in_factor868 = new BitSet(new ulong[]{0x80000010C10UL});
		public static readonly BitSet _expression_in_factor870 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_factor872 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
