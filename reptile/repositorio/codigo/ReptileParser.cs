//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g 2011-10-29 20:43:14

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


	using System;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class ReptileParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "CHAR", "COMMENT", "DOUBLE", "ESC_SEQ", "EXPONENT", "HEX_DIGIT", "ID", "INT", "OCTAL_ESC", "UNICODE_ESC", "WS", "'!='", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "':'", "';'", "'<'", "'<='", "'='", "'=='", "'>'", "'>='", "'CharVector'", "'DoubleVector'", "'IntVector'", "'['", "']'", "'and'", "'char'", "'class'", "'classes'", "'double'", "'else'", "'extends'", "'if'", "'int'", "'main'", "'methods'", "'new'", "'or'", "'print'", "'read'", "'return'", "'this'", "'vars'", "'void'", "'while'", "'{'", "'}'"
	};
	public const int EOF=-1;
	public const int T__15=15;
	public const int T__16=16;
	public const int T__17=17;
	public const int T__18=18;
	public const int T__19=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int CHAR=4;
	public const int COMMENT=5;
	public const int DOUBLE=6;
	public const int ESC_SEQ=7;
	public const int EXPONENT=8;
	public const int HEX_DIGIT=9;
	public const int ID=10;
	public const int INT=11;
	public const int OCTAL_ESC=12;
	public const int UNICODE_ESC=13;
	public const int WS=14;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public ReptileParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public ReptileParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return ReptileParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g"; } }


	SymbolTable directory;
	Stack<string> pOperadores = new Stack<string>();
	Stack<VariableSymbol> pOperandos = new Stack<VariableSymbol>();
	QuadruplesList quadruplesList = new QuadruplesList();

	Scope actualScope;
	Scope globalScope = new GlobalScope();

	LinkedList<string> operadoresRelacionales = new LinkedList<string>(new string[] {"==", "!=", ">", "<", ">=", "<="});
	LinkedList<string> masMenosOr = new LinkedList<string>(new string[] {"+", "-", "or"});
	LinkedList<string> porEntreAnd = new LinkedList<string>(new string[] {"*", "/", "and"});

	protected override object RecoverFromMismatchedToken(IIntStream input, int ttype, BitSet follow)
	{
	      throw new MismatchedTokenException(ttype, input);
	}

	public override object RecoverFromMismatchedSet(IIntStream input, RecognitionException e, BitSet follow)
	{
	        throw e;
	}

	void createDirectories() {
		directory = new SymbolTable();
	}

	void defineScopeGlobal() {
		globalScope = new GlobalScope();
		directory.Add("GlobalScope", (ScopeWithMethods)globalScope);
	}

	void registerClass(string className, string superClase) {
		try {
			ClassSymbol clasePadre = null;
			if(superClase != null) {
				try {
					clasePadre = directory.findType(superClase);
				}
				catch(Exception exception) {
					manageException(exception);
				}
			}
			
			ClassSymbol newClass = new ClassSymbol(className, clasePadre);
			directory.Add(newClass.name, newClass);
			actualScope = newClass;
		}
		catch(Exception exception) {
			manageException(exception);	//manejarException
		}
	}

	//usado con metodos y variables
	void registerVariableInScope(string variableName, ClassSymbol tipo) {
		VariableSymbol variable = new VariableSymbol(variableName, tipo);
		actualScope.defineVariable(variable.name, variable);
	}

	void registrarMetodo(ClassSymbol tipoRetorno, string methodName) {
		ScopeWithMethods scope = (ScopeWithMethods)actualScope;
		MethodSymbol methodSymbol = new MethodSymbol(methodName, tipoRetorno, scope);
		scope.defineMethod(methodName, methodSymbol);
		actualScope = methodSymbol;
	}

	void registerFormalParameter(string variableName, string tipo) {
		ClassSymbol tipoParam = directory.findType(tipo);
		VariableSymbol variableSymbol = new VariableSymbol(variableName, tipoParam);
		MethodSymbol methodSymbol = (MethodSymbol) actualScope;	//casting para poder llamar a defineParameter(..)
		methodSymbol.defineParameter(variableName, variableSymbol);
	}

	bool verifyVariableCanBeAccessed(string variable) {
		VariableSymbol varSymbol = actualScope.getVariableSymbol(variable);
		if(varSymbol == null) {
			generateVariableNotFoundError(variable);
			return false;
		}
		return true;
	}

	void generateVariableNotFoundError(string variable) {
			Exception e = new Exception("No se encontro la variable " + variable);
			manageException(e);
	}

	void verifyObjectAndInstVariableDefined(string objeto, string instVar) {
		verifyVariableCanBeAccessed(objeto);
		VariableSymbol obj = actualScope.getVariableSymbol(objeto);
		ClassSymbol tipo = obj.type;
		verifyInstVariableDefinedInClassSymbol(tipo, instVar);
	}

	void verifyInstVariableDefinedInClassSymbol(ClassSymbol tipo, string instVar) {
		VariableSymbol varDeInstancia = tipo.getVariableSymbol(instVar);
		if(varDeInstancia == null) {
			generateInstanceVariableNotFoundError(tipo.name, instVar);
		}
	}

	VariableSymbol getVariable(string variable) {
		verifyVariableCanBeAccessed(variable);
		return actualScope.getVariableSymbol(variable);
	}

	VariableSymbol getField(string objeto, string instVar) {
		verifyObjectAndInstVariableDefined(objeto, instVar);
		VariableSymbol obj = actualScope.getVariableSymbol(objeto);
		ClassSymbol tipo = obj.type;
		VariableSymbol varDeInstancia = tipo.getVariableSymbol(instVar);
		return varDeInstancia;
	}

	void generateInstanceVariableNotFoundError(string scope, string variable) {
		Exception e = new Exception("No se encontro la variable de instancia " + variable + " en " + scope);
		manageException(e);
	}

	void verifyInstanceVariableDefinedInThis(string var) {
		ScopeWithMethods enclosingScope = ((MethodSymbol)actualScope).enclosingScope;
		VariableSymbol instVariable = enclosingScope.getVariableSymbol(var);
		if(instVariable == null) {
			generateInstanceVariableNotFoundError(enclosingScope.name, var);
		}
	}

	VariableSymbol getInstanceVariable(string var) {
		verifyInstanceVariableDefinedInThis(var);
		ScopeWithMethods enclosingScope = ((MethodSymbol)actualScope).enclosingScope;
		ClassSymbol clase = (ClassSymbol)enclosingScope;
		return clase.getVariableSymbol(var);
	}

	void verifyIsVector(string var) {
		if(verifyVariableCanBeAccessed(var)) {
			VariableSymbol arr = actualScope.getVariableSymbol(var);
			if(!arr.type.isVectorType()) {
				generateIsNotVectorError(arr.name);
			}
		}
	}

	void generateIsNotVectorError(string variable) {
		Exception e = new Exception("La variable " + variable + " no es de ninguna clase Vector y por tanto no tiene definido el operador [] .");
		manageException(e);
	}

	public bool tiposSonCompatiblesEnOperacion() {
		VariableSymbol right = pOperandos.Pop();
		VariableSymbol left = pOperandos.Pop();
		pOperandos.Push(left);
		pOperandos.Push(right);
		string operador = pOperadores.Peek();
		ClassSymbol tipoResultado = directory.resultType(left.type, right.type, operador);
		if(tipoResultado.isVoidType()) {
			return false;
		}
		return true;
	}

	public void aplicaOperadorPendienteQueSea(LinkedList<string> operadoresBuscados) {
		if(pOperadores.Count > 0) {
			string operador = pOperadores.Peek();
			if(operadoresBuscados.Contains(operador)) {
				if(tiposSonCompatiblesEnOperacion()) {
					pOperadores.Pop();
					VariableSymbol right = pOperandos.Pop();
					VariableSymbol left = pOperandos.Pop();
					ClassSymbol tipoResultado = directory.resultType(left.type, right.type, operador);
					
					VariableSymbol temporal = getNewTemporalVarOfType(tipoResultado.name);
					//TODO generar cuadruplo usando operador, left, right y temporal
					quadruplesList.addEXPRESSION_OPER(operador, left.address.ToString(), right.address.ToString(), temporal.address.ToString());
					
					pOperandos.Push(temporal);
				}
				else {
					//TODO accion correctiva: sacar los dos operandos y el operador de sus pilas
					pOperadores.Pop();
					VariableSymbol right = pOperandos.Pop();
					VariableSymbol left = pOperandos.Pop();
					manageException(new Exception("Operador \"" + operador + "\" no es valido para " + 
						left.type.name + " " + left.name + ", " + right.type.name + " " + right.name));
				}
			}
		}
	}

	public void pushICONST(string iConst) {
		VariableSymbol temp = getNewTemporalVarOfType("int");
		pOperandos.Push(temp);
		quadruplesList.addICONST(iConst, temp.address.ToString());
	}

	public void pushCCONST(string cConst) {
		VariableSymbol temp = getNewTemporalVarOfType("char");
		pOperandos.Push(temp);
		quadruplesList.addCCONST(cConst, temp.address.ToString());
	}

	public void pushDCONST(string dConst) {
		VariableSymbol temp = getNewTemporalVarOfType("double");
		pOperandos.Push(temp);
		quadruplesList.addDCONST(dConst, temp.address.ToString());
	}

	public VariableSymbol getNewTemporalVarOfType(string type) {
		ClassSymbol tipo = directory.findType(type);
		VariableSymbol temp = ((MethodSymbol)actualScope).getNewTemporal(tipo);
		return temp;
	}

	public string typeOfVector(string type) {
		if(type.Equals(SymbolTable.integerVectorName)) {
			return SymbolTable.integerName;
		}
		else if(type.Equals(SymbolTable.charVectorName)) {
			return SymbolTable.charName;
		}
		else if(type.Equals(SymbolTable.doubleVectorName)) {
			return SymbolTable.doubleName;
		}
		else {
			manageException(new Exception("El tipo " + type + " no es un tipo de vector conocido."));
			return "";
		}
	}

	public void printQuadruplesList() {
		Console.WriteLine(quadruplesList.ToString());
	}

	public static void manageException(Exception e) {
		Console.WriteLine(e.ToString());
		throw new RecognitionException("Se encontro Error semantico\n");
	}


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_program() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_program() {}

	// $ANTLR start "program"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:271:8: public program : ( classes )? ( vars )? methods mainMethod ;
	[GrammarRule("program")]
	public void program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(271, 123);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:271:16: ( ( classes )? ( vars )? methods mainMethod )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:271:18: ( classes )? ( vars )? methods mainMethod
			{
			DebugLocation(271, 18);
			createDirectories(); defineScopeGlobal();
			DebugLocation(271, 62);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:271:62: ( classes )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_0 = input.LA(1);

			if ((LA1_0==40))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:271:62: classes
				{
				DebugLocation(271, 62);
				PushFollow(Follow._classes_in_program61);
				classes();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(271, 71);
			actualScope = globalScope;
			DebugLocation(271, 100);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:271:100: ( vars )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
			int LA2_0 = input.LA(1);

			if ((LA2_0==54))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:271:100: vars
				{
				DebugLocation(271, 100);
				PushFollow(Follow._vars_in_program66);
				vars();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(271, 106);
			PushFollow(Follow._methods_in_program69);
			methods();
			PopFollow();

			DebugLocation(271, 114);
			PushFollow(Follow._mainMethod_in_program71);
			mainMethod();
			PopFollow();


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
	    }
	 	DebugLocation(271, 123);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return;

	}
	// $ANTLR end "program"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_mainMethod() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_mainMethod() {}

	// $ANTLR start "mainMethod"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:273:1: mainMethod : 'void' 'main' '(' ')' '{' ( vars )? someStatements '}' ;
	[GrammarRule("mainMethod")]
	private void mainMethod()
	{
		EnterRule_mainMethod();
		EnterRule("mainMethod", 2);
		TraceIn("mainMethod", 2);
		try { DebugEnterRule(GrammarFileName, "mainMethod");
		DebugLocation(273, 139);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:274:2: ( 'void' 'main' '(' ')' '{' ( vars )? someStatements '}' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:274:4: 'void' 'main' '(' ')' '{' ( vars )? someStatements '}'
			{
			DebugLocation(274, 4);
			Match(input,55,Follow._55_in_mainMethod80); 
			DebugLocation(274, 11);
			Match(input,46,Follow._46_in_mainMethod82); 
			DebugLocation(274, 18);
			Match(input,16,Follow._16_in_mainMethod84); 
			DebugLocation(274, 22);
			Match(input,17,Follow._17_in_mainMethod86); 
			DebugLocation(274, 26);
			Match(input,57,Follow._57_in_mainMethod88); 
			DebugLocation(274, 29);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:274:29: ( vars )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_0 = input.LA(1);

			if ((LA3_0==54))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:274:29: vars
				{
				DebugLocation(274, 29);
				PushFollow(Follow._vars_in_mainMethod89);
				vars();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(274, 35);
			PushFollow(Follow._someStatements_in_mainMethod92);
			someStatements();
			PopFollow();

			DebugLocation(274, 50);
			Match(input,58,Follow._58_in_mainMethod94); 
			DebugLocation(274, 54);
			directory.printDirectory(); directory.printTypesDirectory(); printQuadruplesList();

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("mainMethod", 2);
			LeaveRule("mainMethod", 2);
			LeaveRule_mainMethod();
	    }
	 	DebugLocation(274, 139);
		} finally { DebugExitRule(GrammarFileName, "mainMethod"); }
		return;

	}
	// $ANTLR end "mainMethod"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_classes() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_classes() {}

	// $ANTLR start "classes"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:276:1: classes : 'classes' ':' ( classDecl )* ;
	[GrammarRule("classes")]
	private void classes()
	{
		EnterRule_classes();
		EnterRule("classes", 3);
		TraceIn("classes", 3);
		try { DebugEnterRule(GrammarFileName, "classes");
		DebugLocation(276, 34);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:276:9: ( 'classes' ':' ( classDecl )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:276:11: 'classes' ':' ( classDecl )*
			{
			DebugLocation(276, 11);
			Match(input,40,Follow._40_in_classes105); 
			DebugLocation(276, 21);
			Match(input,24,Follow._24_in_classes107); 
			DebugLocation(276, 25);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:276:25: ( classDecl )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, decisionCanBacktrack[4]);
				int LA4_0 = input.LA(1);

				if ((LA4_0==39))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:276:25: classDecl
					{
					DebugLocation(276, 25);
					PushFollow(Follow._classDecl_in_classes109);
					classDecl();
					PopFollow();


					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("classes", 3);
			LeaveRule("classes", 3);
			LeaveRule_classes();
	    }
	 	DebugLocation(276, 34);
		} finally { DebugExitRule(GrammarFileName, "classes"); }
		return;

	}
	// $ANTLR end "classes"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_classDecl() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_classDecl() {}

	// $ANTLR start "classDecl"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:278:1: classDecl : 'class' clase= ID ( superClass )? '{' ( vars )? ( methods )? '}' ;
	[GrammarRule("classDecl")]
	private void classDecl()
	{
		EnterRule_classDecl();
		EnterRule("classDecl", 4);
		TraceIn("classDecl", 4);
	    IToken clase = default(IToken);
	    string superClass1 = default(string);

		try { DebugEnterRule(GrammarFileName, "classDecl");
		DebugLocation(278, 117);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:279:5: ( 'class' clase= ID ( superClass )? '{' ( vars )? ( methods )? '}' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:279:9: 'class' clase= ID ( superClass )? '{' ( vars )? ( methods )? '}'
			{
			DebugLocation(279, 9);
			Match(input,39,Follow._39_in_classDecl124); 
			DebugLocation(279, 23);
			clase=(IToken)Match(input,ID,Follow._ID_in_classDecl130); 
			DebugLocation(279, 28);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:279:28: ( superClass )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, decisionCanBacktrack[5]);
			int LA5_0 = input.LA(1);

			if ((LA5_0==43))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:279:29: superClass
				{
				DebugLocation(279, 29);
				PushFollow(Follow._superClass_in_classDecl133);
				superClass1=superClass();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(5); }

			DebugLocation(279, 42);
			registerClass((clase!=null?clase.Text:null), superClass1);
			DebugLocation(279, 96);
			Match(input,57,Follow._57_in_classDecl139); 
			DebugLocation(279, 100);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:279:100: ( vars )?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, decisionCanBacktrack[6]);
			int LA6_0 = input.LA(1);

			if ((LA6_0==54))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:279:100: vars
				{
				DebugLocation(279, 100);
				PushFollow(Follow._vars_in_classDecl141);
				vars();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(6); }

			DebugLocation(279, 106);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:279:106: ( methods )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
			int LA7_0 = input.LA(1);

			if ((LA7_0==47))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:279:106: methods
				{
				DebugLocation(279, 106);
				PushFollow(Follow._methods_in_classDecl144);
				methods();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(7); }

			DebugLocation(279, 115);
			Match(input,58,Follow._58_in_classDecl147); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("classDecl", 4);
			LeaveRule("classDecl", 4);
			LeaveRule_classDecl();
	    }
	 	DebugLocation(279, 117);
		} finally { DebugExitRule(GrammarFileName, "classDecl"); }
		return;

	}
	// $ANTLR end "classDecl"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_superClass() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_superClass() {}

	// $ANTLR start "superClass"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:281:1: superClass returns [string superClase] : 'extends' ID ;
	[GrammarRule("superClass")]
	private string superClass()
	{
		EnterRule_superClass();
		EnterRule("superClass", 5);
		TraceIn("superClass", 5);
	    string superClase = default(string);


	    IToken ID2 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "superClass");
		DebugLocation(281, 77);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:281:38: ( 'extends' ID )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:281:40: 'extends' ID
			{
			DebugLocation(281, 40);
			Match(input,43,Follow._43_in_superClass157); 
			DebugLocation(281, 50);
			ID2=(IToken)Match(input,ID,Follow._ID_in_superClass159); 
			DebugLocation(281, 53);
			superClase = (ID2!=null?ID2.Text:null);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("superClass", 5);
			LeaveRule("superClass", 5);
			LeaveRule_superClass();
	    }
	 	DebugLocation(281, 77);
		} finally { DebugExitRule(GrammarFileName, "superClass"); }
		return superClase;

	}
	// $ANTLR end "superClass"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_vars() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_vars() {}

	// $ANTLR start "vars"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:283:1: vars : 'vars' ':' ( varDecl )* ;
	[GrammarRule("vars")]
	private void vars()
	{
		EnterRule_vars();
		EnterRule("vars", 6);
		TraceIn("vars", 6);
		try { DebugEnterRule(GrammarFileName, "vars");
		DebugLocation(283, 22);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:284:2: ( 'vars' ':' ( varDecl )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:284:4: 'vars' ':' ( varDecl )*
			{
			DebugLocation(284, 4);
			Match(input,54,Follow._54_in_vars170); 
			DebugLocation(284, 11);
			Match(input,24,Follow._24_in_vars172); 
			DebugLocation(284, 15);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:284:15: ( varDecl )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, decisionCanBacktrack[8]);
				int LA8_0 = input.LA(1);

				if ((LA8_0==ID))
				{
					int LA8_2 = input.LA(2);

					if ((LA8_2==ID))
					{
						alt8 = 1;
					}


				}
				else if (((LA8_0>=32 && LA8_0<=34)||LA8_0==38||LA8_0==41||LA8_0==45))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:284:15: varDecl
					{
					DebugLocation(284, 15);
					PushFollow(Follow._varDecl_in_vars174);
					varDecl();
					PopFollow();


					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("vars", 6);
			LeaveRule("vars", 6);
			LeaveRule_vars();
	    }
	 	DebugLocation(284, 22);
		} finally { DebugExitRule(GrammarFileName, "vars"); }
		return;

	}
	// $ANTLR end "vars"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_varDecl() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_varDecl() {}

	// $ANTLR start "varDecl"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:286:1: varDecl : (t= primitiveType |t= referenceType ) ID ';' ;
	[GrammarRule("varDecl")]
	private void varDecl()
	{
		EnterRule_varDecl();
		EnterRule("varDecl", 7);
		TraceIn("varDecl", 7);
	    IToken ID3 = default(IToken);
	    string t = default(string);


	    	ClassSymbol clase;

		try { DebugEnterRule(GrammarFileName, "varDecl");
		DebugLocation(286, 138);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:290:5: ( (t= primitiveType |t= referenceType ) ID ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:290:9: (t= primitiveType |t= referenceType ) ID ';'
			{
			DebugLocation(290, 9);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:290:9: (t= primitiveType |t= referenceType )
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			int LA9_0 = input.LA(1);

			if ((LA9_0==38||LA9_0==41||LA9_0==45))
			{
				alt9 = 1;
			}
			else if ((LA9_0==ID||(LA9_0>=32 && LA9_0<=34)))
			{
				alt9 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:290:10: t= primitiveType
				{
				DebugLocation(290, 12);
				PushFollow(Follow._primitiveType_in_varDecl199);
				t=primitiveType();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:290:30: t= referenceType
				{
				DebugLocation(290, 32);
				PushFollow(Follow._referenceType_in_varDecl207);
				t=referenceType();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(9); }

			DebugLocation(290, 49);
			clase = directory.findType(t);
			DebugLocation(290, 88);
			ID3=(IToken)Match(input,ID,Follow._ID_in_varDecl212); 
			DebugLocation(290, 91);
			registerVariableInScope((ID3!=null?ID3.Text:null), clase);
			DebugLocation(290, 135);
			Match(input,25,Follow._25_in_varDecl216); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("varDecl", 7);
			LeaveRule("varDecl", 7);
			LeaveRule_varDecl();
	    }
	 	DebugLocation(290, 138);
		} finally { DebugExitRule(GrammarFileName, "varDecl"); }
		return;

	}
	// $ANTLR end "varDecl"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_primitiveType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_primitiveType() {}

	// $ANTLR start "primitiveType"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:292:1: primitiveType returns [string tipo] : t= ( 'int' | 'char' | 'double' ) ;
	[GrammarRule("primitiveType")]
	private string primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 8);
		TraceIn("primitiveType", 8);
	    string tipo = default(string);


	    IToken t = default(IToken);

		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(292, 84);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:292:35: (t= ( 'int' | 'char' | 'double' ) )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:292:37: t= ( 'int' | 'char' | 'double' )
			{
			DebugLocation(292, 39);

			t=(IToken)input.LT(1);
			if (input.LA(1)==38||input.LA(1)==41||input.LA(1)==45)
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(292, 67);
			tipo = (t!=null?t.Text:null);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("primitiveType", 8);
			LeaveRule("primitiveType", 8);
			LeaveRule_primitiveType();
	    }
	 	DebugLocation(292, 84);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return tipo;

	}
	// $ANTLR end "primitiveType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_referenceType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_referenceType() {}

	// $ANTLR start "referenceType"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:294:1: referenceType returns [string tipo] : ( vectorType | ID ) ;
	[GrammarRule("referenceType")]
	private string referenceType()
	{
		EnterRule_referenceType();
		EnterRule("referenceType", 9);
		TraceIn("referenceType", 9);
	    string tipo = default(string);


	    IToken ID5 = default(IToken);
	    string vectorType4 = default(string);

		try { DebugEnterRule(GrammarFileName, "referenceType");
		DebugLocation(294, 4);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:294:35: ( ( vectorType | ID ) )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:295:5: ( vectorType | ID )
			{
			DebugLocation(295, 5);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:295:5: ( vectorType | ID )
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			int LA10_0 = input.LA(1);

			if (((LA10_0>=32 && LA10_0<=34)))
			{
				alt10 = 1;
			}
			else if ((LA10_0==ID))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:295:6: vectorType
				{
				DebugLocation(295, 6);
				PushFollow(Follow._vectorType_in_referenceType261);
				vectorType4=vectorType();
				PopFollow();

				DebugLocation(295, 17);
				tipo = vectorType4;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:296:7: ID
				{
				DebugLocation(296, 7);
				ID5=(IToken)Match(input,ID,Follow._ID_in_referenceType271); 
				DebugLocation(296, 10);
				tipo = (ID5!=null?ID5.Text:null);

				}
				break;

			}
			} finally { DebugExitSubRule(10); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("referenceType", 9);
			LeaveRule("referenceType", 9);
			LeaveRule_referenceType();
	    }
	 	DebugLocation(298, 4);
		} finally { DebugExitRule(GrammarFileName, "referenceType"); }
		return tipo;

	}
	// $ANTLR end "referenceType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_vectorType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_vectorType() {}

	// $ANTLR start "vectorType"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:300:1: vectorType returns [string t] : ( 'CharVector' | 'IntVector' | 'DoubleVector' );
	[GrammarRule("vectorType")]
	private string vectorType()
	{
		EnterRule_vectorType();
		EnterRule("vectorType", 10);
		TraceIn("vectorType", 10);
	    string t = default(string);


		try { DebugEnterRule(GrammarFileName, "vectorType");
		DebugLocation(300, 4);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:300:29: ( 'CharVector' | 'IntVector' | 'DoubleVector' )
			int alt11=3;
			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
			switch (input.LA(1))
			{
			case 32:
				{
				alt11 = 1;
				}
				break;
			case 34:
				{
				alt11 = 2;
				}
				break;
			case 33:
				{
				alt11 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 11, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:301:5: 'CharVector'
				{
				DebugLocation(301, 5);
				Match(input,32,Follow._32_in_vectorType303); 
				DebugLocation(301, 18);
				t = SymbolTable.charVectorName;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:302:7: 'IntVector'
				{
				DebugLocation(302, 7);
				Match(input,34,Follow._34_in_vectorType313); 
				DebugLocation(302, 19);
				t = SymbolTable.integerVectorName;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:303:7: 'DoubleVector'
				{
				DebugLocation(303, 7);
				Match(input,33,Follow._33_in_vectorType323); 
				DebugLocation(303, 22);
				t = SymbolTable.doubleVectorName;

				}
				break;

			}
		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("vectorType", 10);
			LeaveRule("vectorType", 10);
			LeaveRule_vectorType();
	    }
	 	DebugLocation(304, 4);
		} finally { DebugExitRule(GrammarFileName, "vectorType"); }
		return t;

	}
	// $ANTLR end "vectorType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_voidType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_voidType() {}

	// $ANTLR start "voidType"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:306:1: voidType returns [string tipo] : t= 'void' ;
	[GrammarRule("voidType")]
	private string voidType()
	{
		EnterRule_voidType();
		EnterRule("voidType", 11);
		TraceIn("voidType", 11);
	    string tipo = default(string);


	    IToken t = default(IToken);

		try { DebugEnterRule(GrammarFileName, "voidType");
		DebugLocation(306, 60);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:306:30: (t= 'void' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:306:32: t= 'void'
			{
			DebugLocation(306, 34);
			t=(IToken)Match(input,55,Follow._55_in_voidType344); 
			DebugLocation(306, 43);
			tipo = (t!=null?t.Text:null);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("voidType", 11);
			LeaveRule("voidType", 11);
			LeaveRule_voidType();
	    }
	 	DebugLocation(306, 60);
		} finally { DebugExitRule(GrammarFileName, "voidType"); }
		return tipo;

	}
	// $ANTLR end "voidType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_formalParamType() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_formalParamType() {}

	// $ANTLR start "formalParamType"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:308:1: formalParamType returns [string tipo] : (t= primitiveType |t= referenceType ) ;
	[GrammarRule("formalParamType")]
	private string formalParamType()
	{
		EnterRule_formalParamType();
		EnterRule("formalParamType", 12);
		TraceIn("formalParamType", 12);
	    string tipo = default(string);


	    string t = default(string);

		try { DebugEnterRule(GrammarFileName, "formalParamType");
		DebugLocation(308, 23);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:308:37: ( (t= primitiveType |t= referenceType ) )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:308:39: (t= primitiveType |t= referenceType )
			{
			DebugLocation(308, 39);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:308:39: (t= primitiveType |t= referenceType )
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
			int LA12_0 = input.LA(1);

			if ((LA12_0==38||LA12_0==41||LA12_0==45))
			{
				alt12 = 1;
			}
			else if ((LA12_0==ID||(LA12_0>=32 && LA12_0<=34)))
			{
				alt12 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:308:40: t= primitiveType
				{
				DebugLocation(308, 42);
				PushFollow(Follow._primitiveType_in_formalParamType361);
				t=primitiveType();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:309:8: t= referenceType
				{
				DebugLocation(309, 10);
				PushFollow(Follow._referenceType_in_formalParamType375);
				t=referenceType();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(310, 6);
			tipo = t;

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("formalParamType", 12);
			LeaveRule("formalParamType", 12);
			LeaveRule_formalParamType();
	    }
	 	DebugLocation(310, 23);
		} finally { DebugExitRule(GrammarFileName, "formalParamType"); }
		return tipo;

	}
	// $ANTLR end "formalParamType"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_methods() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_methods() {}

	// $ANTLR start "methods"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:312:1: methods : 'methods' ':' ( methodDeclaration )* ;
	[GrammarRule("methods")]
	private void methods()
	{
		EnterRule_methods();
		EnterRule("methods", 13);
		TraceIn("methods", 13);
		try { DebugEnterRule(GrammarFileName, "methods");
		DebugLocation(312, 35);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:313:2: ( 'methods' ':' ( methodDeclaration )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:313:4: 'methods' ':' ( methodDeclaration )*
			{
			DebugLocation(313, 4);
			Match(input,47,Follow._47_in_methods394); 
			DebugLocation(313, 14);
			Match(input,24,Follow._24_in_methods396); 
			DebugLocation(313, 18);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:313:18: ( methodDeclaration )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, decisionCanBacktrack[13]);
				int LA13_0 = input.LA(1);

				if ((LA13_0==55))
				{
					int LA13_1 = input.LA(2);

					if ((LA13_1==ID))
					{
						alt13 = 1;
					}


				}
				else if ((LA13_0==ID||(LA13_0>=32 && LA13_0<=34)||LA13_0==38||LA13_0==41||LA13_0==45))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:313:18: methodDeclaration
					{
					DebugLocation(313, 18);
					PushFollow(Follow._methodDeclaration_in_methods398);
					methodDeclaration();
					PopFollow();


					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("methods", 13);
			LeaveRule("methods", 13);
			LeaveRule_methods();
	    }
	 	DebugLocation(313, 35);
		} finally { DebugExitRule(GrammarFileName, "methods"); }
		return;

	}
	// $ANTLR end "methods"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_methodDeclaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_methodDeclaration() {}

	// $ANTLR start "methodDeclaration"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:315:1: methodDeclaration : (tRet= primitiveType |tRet= referenceType |tRet= voidType ) ID '(' ( formalParameters )? ')' '{' ( vars )? someStatements '}' ;
	[GrammarRule("methodDeclaration")]
	private void methodDeclaration()
	{
		EnterRule_methodDeclaration();
		EnterRule("methodDeclaration", 14);
		TraceIn("methodDeclaration", 14);
	    IToken ID6 = default(IToken);
	    string tRet = default(string);


	    	ClassSymbol tipoRetorno;

		try { DebugEnterRule(GrammarFileName, "methodDeclaration");
		DebugLocation(315, 1);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:319:3: ( (tRet= primitiveType |tRet= referenceType |tRet= voidType ) ID '(' ( formalParameters )? ')' '{' ( vars )? someStatements '}' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:319:3: (tRet= primitiveType |tRet= referenceType |tRet= voidType ) ID '(' ( formalParameters )? ')' '{' ( vars )? someStatements '}'
			{
			DebugLocation(319, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:319:3: (tRet= primitiveType |tRet= referenceType |tRet= voidType )
			int alt14=3;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, decisionCanBacktrack[14]);
			switch (input.LA(1))
			{
			case 38:
			case 41:
			case 45:
				{
				alt14 = 1;
				}
				break;
			case ID:
			case 32:
			case 33:
			case 34:
				{
				alt14 = 2;
				}
				break;
			case 55:
				{
				alt14 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:319:4: tRet= primitiveType
				{
				DebugLocation(319, 9);
				PushFollow(Follow._primitiveType_in_methodDeclaration417);
				tRet=primitiveType();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:319:27: tRet= referenceType
				{
				DebugLocation(319, 32);
				PushFollow(Follow._referenceType_in_methodDeclaration425);
				tRet=referenceType();
				PopFollow();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:319:50: tRet= voidType
				{
				DebugLocation(319, 55);
				PushFollow(Follow._voidType_in_methodDeclaration433);
				tRet=voidType();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(319, 67);
			tipoRetorno = directory.findType(tRet);
			DebugLocation(320, 2);
			ID6=(IToken)Match(input,ID,Follow._ID_in_methodDeclaration440); 
			DebugLocation(320, 5);
			registrarMetodo(tipoRetorno, (ID6!=null?ID6.Text:null));
			DebugLocation(321, 2);
			Match(input,16,Follow._16_in_methodDeclaration446); 
			DebugLocation(321, 6);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:321:6: ( formalParameters )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, decisionCanBacktrack[15]);
			int LA15_0 = input.LA(1);

			if ((LA15_0==ID||(LA15_0>=32 && LA15_0<=34)||LA15_0==38||LA15_0==41||LA15_0==45))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:321:6: formalParameters
				{
				DebugLocation(321, 6);
				PushFollow(Follow._formalParameters_in_methodDeclaration448);
				formalParameters();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(321, 24);
			Match(input,17,Follow._17_in_methodDeclaration451); 
			DebugLocation(322, 2);
			Match(input,57,Follow._57_in_methodDeclaration455); 
			DebugLocation(322, 6);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:322:6: ( vars )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, decisionCanBacktrack[16]);
			int LA16_0 = input.LA(1);

			if ((LA16_0==54))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:322:6: vars
				{
				DebugLocation(322, 6);
				PushFollow(Follow._vars_in_methodDeclaration457);
				vars();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(322, 12);
			PushFollow(Follow._someStatements_in_methodDeclaration460);
			someStatements();
			PopFollow();

			DebugLocation(322, 27);
			Match(input,58,Follow._58_in_methodDeclaration462); 
			DebugLocation(323, 2);
			actualScope = ((MethodSymbol)actualScope).enclosingScope;

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("methodDeclaration", 14);
			LeaveRule("methodDeclaration", 14);
			LeaveRule_methodDeclaration();
	    }
	 	DebugLocation(324, 1);
		} finally { DebugExitRule(GrammarFileName, "methodDeclaration"); }
		return;

	}
	// $ANTLR end "methodDeclaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_formalParam() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_formalParam() {}

	// $ANTLR start "formalParam"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:326:1: formalParam : t= formalParamType ID ;
	[GrammarRule("formalParam")]
	private void formalParam()
	{
		EnterRule_formalParam();
		EnterRule("formalParam", 15);
		TraceIn("formalParam", 15);
	    IToken ID7 = default(IToken);
	    string t = default(string);

		try { DebugEnterRule(GrammarFileName, "formalParam");
		DebugLocation(326, 81);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:326:12: (t= formalParamType ID )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:326:14: t= formalParamType ID
			{
			DebugLocation(326, 16);
			PushFollow(Follow._formalParamType_in_formalParam480);
			t=formalParamType();
			PopFollow();

			DebugLocation(326, 34);
			ID7=(IToken)Match(input,ID,Follow._ID_in_formalParam482); 
			DebugLocation(326, 37);
			registerFormalParameter((ID7!=null?ID7.Text:null), t);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("formalParam", 15);
			LeaveRule("formalParam", 15);
			LeaveRule_formalParam();
	    }
	 	DebugLocation(326, 81);
		} finally { DebugExitRule(GrammarFileName, "formalParam"); }
		return;

	}
	// $ANTLR end "formalParam"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_formalParameters() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_formalParameters() {}

	// $ANTLR start "formalParameters"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:328:1: formalParameters : t= formalParam ( ',' formalParam )* ;
	[GrammarRule("formalParameters")]
	private void formalParameters()
	{
		EnterRule_formalParameters();
		EnterRule("formalParameters", 16);
		TraceIn("formalParameters", 16);
		try { DebugEnterRule(GrammarFileName, "formalParameters");
		DebugLocation(328, 38);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:329:4: (t= formalParam ( ',' formalParam )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:329:4: t= formalParam ( ',' formalParam )*
			{
			DebugLocation(329, 6);
			PushFollow(Follow._formalParam_in_formalParameters498);
			formalParam();
			PopFollow();

			DebugLocation(329, 20);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:329:20: ( ',' formalParam )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, decisionCanBacktrack[17]);
				int LA17_0 = input.LA(1);

				if ((LA17_0==20))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:329:21: ',' formalParam
					{
					DebugLocation(329, 21);
					Match(input,20,Follow._20_in_formalParameters501); 
					DebugLocation(329, 25);
					PushFollow(Follow._formalParam_in_formalParameters503);
					formalParam();
					PopFollow();


					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("formalParameters", 16);
			LeaveRule("formalParameters", 16);
			LeaveRule_formalParameters();
	    }
	 	DebugLocation(329, 38);
		} finally { DebugExitRule(GrammarFileName, "formalParameters"); }
		return;

	}
	// $ANTLR end "formalParameters"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_someStatements() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_someStatements() {}

	// $ANTLR start "someStatements"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:331:1: someStatements : ( statement )* ;
	[GrammarRule("someStatements")]
	private void someStatements()
	{
		EnterRule_someStatements();
		EnterRule("someStatements", 17);
		TraceIn("someStatements", 17);
		try { DebugEnterRule(GrammarFileName, "someStatements");
		DebugLocation(331, 13);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:332:2: ( ( statement )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:332:4: ( statement )*
			{
			DebugLocation(332, 4);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:332:4: ( statement )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, decisionCanBacktrack[18]);
				int LA18_0 = input.LA(1);

				if ((LA18_0==ID||LA18_0==25||LA18_0==44||(LA18_0>=50 && LA18_0<=53)||LA18_0==56))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:332:4: statement
					{
					DebugLocation(332, 4);
					PushFollow(Follow._statement_in_someStatements515);
					statement();
					PopFollow();


					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("someStatements", 17);
			LeaveRule("someStatements", 17);
			LeaveRule_someStatements();
	    }
	 	DebugLocation(332, 13);
		} finally { DebugExitRule(GrammarFileName, "someStatements"); }
		return;

	}
	// $ANTLR end "someStatements"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_statement() {}

	// $ANTLR start "statement"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:334:1: statement : ( assignment | invoke ';' | if_inst | while_inst | return_inst | read | print | ';' );
	[GrammarRule("statement")]
	private void statement()
	{
		EnterRule_statement();
		EnterRule("statement", 18);
		TraceIn("statement", 18);
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(334, 7);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:334:11: ( assignment | invoke ';' | if_inst | while_inst | return_inst | read | print | ';' )
			int alt19=8;
			try { DebugEnterDecision(19, decisionCanBacktrack[19]);
			switch (input.LA(1))
			{
			case ID:
				{
				switch (input.LA(2))
				{
				case 22:
					{
					int LA19_9 = input.LA(3);

					if ((LA19_9==ID))
					{
						int LA19_11 = input.LA(4);

						if ((LA19_11==28))
						{
							alt19 = 1;
						}
						else if ((LA19_11==16))
						{
							alt19 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 19, 11, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 19, 9, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 28:
				case 35:
					{
					alt19 = 1;
					}
					break;
				case 16:
					{
					alt19 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 19, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case 53:
				{
				alt19 = 1;
				}
				break;
			case 44:
				{
				alt19 = 3;
				}
				break;
			case 56:
				{
				alt19 = 4;
				}
				break;
			case 52:
				{
				alt19 = 5;
				}
				break;
			case 51:
				{
				alt19 = 6;
				}
				break;
			case 50:
				{
				alt19 = 7;
				}
				break;
			case 25:
				{
				alt19 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:334:13: assignment
				{
				DebugLocation(334, 13);
				PushFollow(Follow._assignment_in_statement524);
				assignment();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:335:5: invoke ';'
				{
				DebugLocation(335, 5);
				PushFollow(Follow._invoke_in_statement530);
				invoke();
				PopFollow();

				DebugLocation(335, 12);
				Match(input,25,Follow._25_in_statement532); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:336:5: if_inst
				{
				DebugLocation(336, 5);
				PushFollow(Follow._if_inst_in_statement538);
				if_inst();
				PopFollow();


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:337:5: while_inst
				{
				DebugLocation(337, 5);
				PushFollow(Follow._while_inst_in_statement544);
				while_inst();
				PopFollow();


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:338:5: return_inst
				{
				DebugLocation(338, 5);
				PushFollow(Follow._return_inst_in_statement550);
				return_inst();
				PopFollow();


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:339:5: read
				{
				DebugLocation(339, 5);
				PushFollow(Follow._read_in_statement556);
				read();
				PopFollow();


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:340:5: print
				{
				DebugLocation(340, 5);
				PushFollow(Follow._print_in_statement562);
				print();
				PopFollow();


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:341:5: ';'
				{
				DebugLocation(341, 5);
				Match(input,25,Follow._25_in_statement568); 

				}
				break;

			}
		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("statement", 18);
			LeaveRule("statement", 18);
			LeaveRule_statement();
	    }
	 	DebugLocation(341, 7);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return;

	}
	// $ANTLR end "statement"

	protected sealed partial class assignment_scope
	{
		public int caso;
		public VariableSymbol par1;
		public //obj
			VariableSymbol par2;
		public //field
			ClassSymbol leftType;
	}
	protected virtual void assignment_scopeInit( assignment_scope scope ) {}
	protected virtual void assignment_scopeAfter( assignment_scope scope ) {}
	protected readonly ListStack<assignment_scope> assignment_stack = new ListStack<assignment_scope>();


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_assignment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_assignment() {}

	// $ANTLR start "assignment"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:343:1: assignment : designator '=' ( expression | 'new' ID '(' ')' | 'new' vectorType '[' INT ']' ) ';' ;
	[GrammarRule("assignment")]
	private void assignment()
	{
		EnterRule_assignment();
		EnterRule("assignment", 19);
		TraceIn("assignment", 19);
	    assignment_stack.Push(new assignment_scope());assignment_scopeInit(assignment_stack.Peek());
	    IToken ID8 = default(IToken);
	    IToken INT10 = default(IToken);
	    string vectorType9 = default(string);

		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(343, 1);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:350:2: ( designator '=' ( expression | 'new' ID '(' ')' | 'new' vectorType '[' INT ']' ) ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:350:4: designator '=' ( expression | 'new' ID '(' ')' | 'new' vectorType '[' INT ']' ) ';'
			{
			DebugLocation(350, 4);
			PushFollow(Follow._designator_in_assignment585);
			designator();
			PopFollow();

			DebugLocation(350, 15);
			Match(input,28,Follow._28_in_assignment587); 
			DebugLocation(351, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:351:3: ( expression | 'new' ID '(' ')' | 'new' vectorType '[' INT ']' )
			int alt20=3;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, decisionCanBacktrack[20]);
			int LA20_0 = input.LA(1);

			if ((LA20_0==CHAR||LA20_0==DOUBLE||(LA20_0>=ID && LA20_0<=INT)||LA20_0==16||LA20_0==53))
			{
				alt20 = 1;
			}
			else if ((LA20_0==48))
			{
				int LA20_2 = input.LA(2);

				if ((LA20_2==ID))
				{
					alt20 = 2;
				}
				else if (((LA20_2>=32 && LA20_2<=34)))
				{
					alt20 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 20, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:352:3: expression
				{
				DebugLocation(352, 3);
				PushFollow(Follow._expression_in_assignment596);
				expression();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:353:5: 'new' ID '(' ')'
				{
				DebugLocation(353, 5);
				Match(input,48,Follow._48_in_assignment602); 
				DebugLocation(353, 11);
				ID8=(IToken)Match(input,ID,Follow._ID_in_assignment604); 
				DebugLocation(353, 14);
				Match(input,16,Follow._16_in_assignment606); 
				DebugLocation(353, 18);
				Match(input,17,Follow._17_in_assignment608); 
				DebugLocation(354, 4);

							ClassSymbol tipo = directory.findType((ID8!=null?ID8.Text:null));
							VariableSymbol temp = getNewTemporalVarOfType(tipo.name);
							pOperandos.Push(temp);
							quadruplesList.addOBJECT(temp.address.ToString(), tipo.countVariables().ToString());
							
							

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:361:5: 'new' vectorType '[' INT ']'
				{
				DebugLocation(361, 5);
				Match(input,48,Follow._48_in_assignment620); 
				DebugLocation(361, 11);
				PushFollow(Follow._vectorType_in_assignment622);
				vectorType9=vectorType();
				PopFollow();

				DebugLocation(361, 22);
				Match(input,35,Follow._35_in_assignment624); 
				DebugLocation(361, 26);
				pOperadores.Push("[");
				DebugLocation(361, 51);
				INT10=(IToken)Match(input,INT,Follow._INT_in_assignment628); 
				DebugLocation(361, 55);
				Match(input,36,Follow._36_in_assignment630); 
				DebugLocation(361, 59);
				pOperadores.Pop();
				DebugLocation(362, 4);

							VariableSymbol temp = getNewTemporalVarOfType(vectorType9);
							pOperandos.Push(temp);
							quadruplesList.addVECTOR(temp.address.ToString(), (INT10!=null?INT10.Text:null));
							
							
							

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(370, 3);

					VariableSymbol right = pOperandos.Pop();
					if(!directory.validAssignment(assignment_stack.Peek().leftType, right.type)) {
						manageException(new Exception("No se puede asignar " + right.name + " a " + assignment_stack.Peek().par2.name + " porque los tipos " + 
									assignment_stack.Peek().leftType.name + " y " + right.type.name + " no son compatibles."));
					}
					if(assignment_stack.Peek().caso == 0) {
							quadruplesList.addASSIGNMENT(right.address.ToString(), assignment_stack.Peek().par2.address.ToString());
					}
					else if(assignment_stack.Peek().caso == 1) {
							quadruplesList.addPUTFIELD(right.address.ToString(), assignment_stack.Peek().par1.address.ToString(), assignment_stack.Peek().par2.address.ToString());
					}
					else if(assignment_stack.Peek().caso == 2) {
						MethodSymbol method = (MethodSymbol)actualScope;
						quadruplesList.addPUTFIELD(right.address.ToString(), method.getThisParameterAddress(), assignment_stack.Peek().par2.address.ToString());	
					}
					else if(assignment_stack.Peek().caso == 3) {
						quadruplesList.addPUTVECTORELEM(right.address.ToString(), assignment_stack.Peek().par2.address.ToString(), assignment_stack.Peek().par1.address.ToString());			
					}
					
			DebugLocation(391, 3);
			Match(input,25,Follow._25_in_assignment653); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("assignment", 19);
			LeaveRule("assignment", 19);
			LeaveRule_assignment();
	        assignment_scopeAfter(assignment_stack.Peek());assignment_stack.Pop();
	    }
	 	DebugLocation(392, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return;

	}
	// $ANTLR end "assignment"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_designator() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_designator() {}

	// $ANTLR start "designator"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:394:1: designator : (v= ID |obj= ID '.' var= ID | 'this' '.' var= ID | ( ID '[' expression ']' ) );
	[GrammarRule("designator")]
	private void designator()
	{
		EnterRule_designator();
		EnterRule("designator", 20);
		TraceIn("designator", 20);
	    IToken v = default(IToken);
	    IToken obj = default(IToken);
	    IToken var = default(IToken);
	    IToken ID11 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "designator");
		DebugLocation(394, 1);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:395:2: (v= ID |obj= ID '.' var= ID | 'this' '.' var= ID | ( ID '[' expression ']' ) )
			int alt21=4;
			try { DebugEnterDecision(21, decisionCanBacktrack[21]);
			int LA21_0 = input.LA(1);

			if ((LA21_0==ID))
			{
				switch (input.LA(2))
				{
				case 22:
					{
					alt21 = 2;
					}
					break;
				case 35:
					{
					alt21 = 4;
					}
					break;
				case 17:
				case 28:
					{
					alt21 = 1;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 21, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA21_0==53))
			{
				alt21 = 3;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:396:3: v= ID
				{
				DebugLocation(396, 5);
				v=(IToken)Match(input,ID,Follow._ID_in_designator672); 
				DebugLocation(397, 4);

							assignment_stack.Peek().caso =  0;
							verifyVariableCanBeAccessed((v!=null?v.Text:null)); 
							assignment_stack.Peek().par2 =  getVariable((v!=null?v.Text:null));
							
							assignment_stack.Peek().leftType =  assignment_stack.Peek().par2.type;
							

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:404:5: obj= ID '.' var= ID
				{
				DebugLocation(404, 9);
				obj=(IToken)Match(input,ID,Follow._ID_in_designator689); 
				DebugLocation(404, 15);
				Match(input,22,Follow._22_in_designator692); 
				DebugLocation(404, 23);
				var=(IToken)Match(input,ID,Follow._ID_in_designator698); 
				DebugLocation(405, 4);

							assignment_stack.Peek().caso =  1;
							verifyObjectAndInstVariableDefined((obj!=null?obj.Text:null), (var!=null?var.Text:null)); 
							assignment_stack.Peek().par1 =  getVariable((obj!=null?obj.Text:null));
							assignment_stack.Peek().par2 =  getField((obj!=null?obj.Text:null), (var!=null?var.Text:null));
							
							assignment_stack.Peek().leftType =  assignment_stack.Peek().par2.type;
							

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:413:5: 'this' '.' var= ID
				{
				DebugLocation(413, 5);
				Match(input,53,Follow._53_in_designator711); 
				DebugLocation(413, 12);
				Match(input,22,Follow._22_in_designator713); 
				DebugLocation(413, 20);
				var=(IToken)Match(input,ID,Follow._ID_in_designator719); 
				DebugLocation(414, 4);

							assignment_stack.Peek().caso =  2;
							verifyInstanceVariableDefinedInThis((var!=null?var.Text:null));
							assignment_stack.Peek().par2 =  getInstanceVariable((var!=null?var.Text:null));
							
							assignment_stack.Peek().leftType =  assignment_stack.Peek().par2.type;
							

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:421:5: ( ID '[' expression ']' )
				{
				DebugLocation(421, 5);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:421:5: ( ID '[' expression ']' )
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:421:6: ID '[' expression ']'
				{
				DebugLocation(421, 6);
				ID11=(IToken)Match(input,ID,Follow._ID_in_designator738); 
				DebugLocation(421, 9);
				Match(input,35,Follow._35_in_designator740); 
				DebugLocation(421, 13);
				pOperadores.Push("[");
				DebugLocation(421, 38);
				PushFollow(Follow._expression_in_designator744);
				expression();
				PopFollow();

				DebugLocation(421, 49);
				Match(input,36,Follow._36_in_designator746); 
				DebugLocation(421, 53);
				pOperadores.Pop();

				}

				DebugLocation(422, 4);

							assignment_stack.Peek().caso =  3;
							verifyIsVector((ID11!=null?ID11.Text:null));
							VariableSymbol index = pOperandos.Pop();
							if(!index.type.name.Equals("int")) {
								manageException(new Exception("El subindice del Vector " + (ID11!=null?ID11.Text:null) + " debe ser de tipo int."));
							}
							else {
								assignment_stack.Peek().par2 =  getVariable((ID11!=null?ID11.Text:null));
								assignment_stack.Peek().par1 =  index;
							}
							
							
							string tipo = typeOfVector(assignment_stack.Peek().par2.type.name);
							assignment_stack.Peek().leftType =  directory.findType(tipo);
							

				}
				break;

			}
		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("designator", 20);
			LeaveRule("designator", 20);
			LeaveRule_designator();
	    }
	 	DebugLocation(438, 1);
		} finally { DebugExitRule(GrammarFileName, "designator"); }
		return;

	}
	// $ANTLR end "designator"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_invoke() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_invoke() {}

	// $ANTLR start "invoke"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:441:1: invoke : ( ID actualParameters | ID '.' ID actualParameters );
	[GrammarRule("invoke")]
	private void invoke()
	{
		EnterRule_invoke();
		EnterRule("invoke", 21);
		TraceIn("invoke", 21);
		try { DebugEnterRule(GrammarFileName, "invoke");
		DebugLocation(441, 2);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:441:8: ( ID actualParameters | ID '.' ID actualParameters )
			int alt22=2;
			try { DebugEnterDecision(22, decisionCanBacktrack[22]);
			int LA22_0 = input.LA(1);

			if ((LA22_0==ID))
			{
				int LA22_1 = input.LA(2);

				if ((LA22_1==22))
				{
					alt22 = 2;
				}
				else if ((LA22_1==16))
				{
					alt22 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 22, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 22, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:441:10: ID actualParameters
				{
				DebugLocation(441, 10);
				Match(input,ID,Follow._ID_in_invoke769); 
				DebugLocation(441, 13);
				PushFollow(Follow._actualParameters_in_invoke771);
				actualParameters();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:442:5: ID '.' ID actualParameters
				{
				DebugLocation(442, 5);
				Match(input,ID,Follow._ID_in_invoke779); 
				DebugLocation(442, 8);
				Match(input,22,Follow._22_in_invoke781); 
				DebugLocation(442, 12);
				Match(input,ID,Follow._ID_in_invoke783); 
				DebugLocation(442, 15);
				PushFollow(Follow._actualParameters_in_invoke785);
				actualParameters();
				PopFollow();


				}
				break;

			}
		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("invoke", 21);
			LeaveRule("invoke", 21);
			LeaveRule_invoke();
	    }
	 	DebugLocation(443, 2);
		} finally { DebugExitRule(GrammarFileName, "invoke"); }
		return;

	}
	// $ANTLR end "invoke"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_if_inst() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_if_inst() {}

	// $ANTLR start "if_inst"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:445:1: if_inst : 'if' '(' expression ')' '{' someStatements '}' ( 'else' '{' someStatements '}' )? ;
	[GrammarRule("if_inst")]
	private void if_inst()
	{
		EnterRule_if_inst();
		EnterRule("if_inst", 22);
		TraceIn("if_inst", 22);
		try { DebugEnterRule(GrammarFileName, "if_inst");
		DebugLocation(445, 89);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:445:9: ( 'if' '(' expression ')' '{' someStatements '}' ( 'else' '{' someStatements '}' )? )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:445:11: 'if' '(' expression ')' '{' someStatements '}' ( 'else' '{' someStatements '}' )?
			{
			DebugLocation(445, 11);
			Match(input,44,Follow._44_in_if_inst798); 
			DebugLocation(445, 16);
			Match(input,16,Follow._16_in_if_inst800); 
			DebugLocation(445, 20);
			PushFollow(Follow._expression_in_if_inst802);
			expression();
			PopFollow();

			DebugLocation(445, 31);
			Match(input,17,Follow._17_in_if_inst804); 
			DebugLocation(445, 35);
			Match(input,57,Follow._57_in_if_inst806); 
			DebugLocation(445, 39);
			PushFollow(Follow._someStatements_in_if_inst808);
			someStatements();
			PopFollow();

			DebugLocation(445, 54);
			Match(input,58,Follow._58_in_if_inst810); 
			DebugLocation(445, 58);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:445:58: ( 'else' '{' someStatements '}' )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, decisionCanBacktrack[23]);
			int LA23_0 = input.LA(1);

			if ((LA23_0==42))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:445:59: 'else' '{' someStatements '}'
				{
				DebugLocation(445, 59);
				Match(input,42,Follow._42_in_if_inst813); 
				DebugLocation(445, 66);
				Match(input,57,Follow._57_in_if_inst815); 
				DebugLocation(445, 70);
				PushFollow(Follow._someStatements_in_if_inst817);
				someStatements();
				PopFollow();

				DebugLocation(445, 85);
				Match(input,58,Follow._58_in_if_inst819); 

				}
				break;

			}
			} finally { DebugExitSubRule(23); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("if_inst", 22);
			LeaveRule("if_inst", 22);
			LeaveRule_if_inst();
	    }
	 	DebugLocation(445, 89);
		} finally { DebugExitRule(GrammarFileName, "if_inst"); }
		return;

	}
	// $ANTLR end "if_inst"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_while_inst() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_while_inst() {}

	// $ANTLR start "while_inst"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:447:1: while_inst : 'while' '(' expression ')' '{' someStatements '}' ;
	[GrammarRule("while_inst")]
	private void while_inst()
	{
		EnterRule_while_inst();
		EnterRule("while_inst", 23);
		TraceIn("while_inst", 23);
		try { DebugEnterRule(GrammarFileName, "while_inst");
		DebugLocation(447, 62);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:447:12: ( 'while' '(' expression ')' '{' someStatements '}' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:447:14: 'while' '(' expression ')' '{' someStatements '}'
			{
			DebugLocation(447, 14);
			Match(input,56,Follow._56_in_while_inst829); 
			DebugLocation(447, 22);
			Match(input,16,Follow._16_in_while_inst831); 
			DebugLocation(447, 26);
			PushFollow(Follow._expression_in_while_inst833);
			expression();
			PopFollow();

			DebugLocation(447, 37);
			Match(input,17,Follow._17_in_while_inst835); 
			DebugLocation(447, 41);
			Match(input,57,Follow._57_in_while_inst837); 
			DebugLocation(447, 45);
			PushFollow(Follow._someStatements_in_while_inst839);
			someStatements();
			PopFollow();

			DebugLocation(447, 60);
			Match(input,58,Follow._58_in_while_inst841); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("while_inst", 23);
			LeaveRule("while_inst", 23);
			LeaveRule_while_inst();
	    }
	 	DebugLocation(447, 62);
		} finally { DebugExitRule(GrammarFileName, "while_inst"); }
		return;

	}
	// $ANTLR end "while_inst"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_return_inst() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_return_inst() {}

	// $ANTLR start "return_inst"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:449:1: return_inst : 'return' ( expression )? ';' ;
	[GrammarRule("return_inst")]
	private void return_inst()
	{
		EnterRule_return_inst();
		EnterRule("return_inst", 24);
		TraceIn("return_inst", 24);
		try { DebugEnterRule(GrammarFileName, "return_inst");
		DebugLocation(449, 38);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:449:13: ( 'return' ( expression )? ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:449:15: 'return' ( expression )? ';'
			{
			DebugLocation(449, 15);
			Match(input,52,Follow._52_in_return_inst849); 
			DebugLocation(449, 24);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:449:24: ( expression )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, decisionCanBacktrack[24]);
			int LA24_0 = input.LA(1);

			if ((LA24_0==CHAR||LA24_0==DOUBLE||(LA24_0>=ID && LA24_0<=INT)||LA24_0==16||LA24_0==53))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:449:24: expression
				{
				DebugLocation(449, 24);
				PushFollow(Follow._expression_in_return_inst851);
				expression();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(449, 36);
			Match(input,25,Follow._25_in_return_inst854); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("return_inst", 24);
			LeaveRule("return_inst", 24);
			LeaveRule_return_inst();
	    }
	 	DebugLocation(449, 38);
		} finally { DebugExitRule(GrammarFileName, "return_inst"); }
		return;

	}
	// $ANTLR end "return_inst"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_read() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_read() {}

	// $ANTLR start "read"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:451:1: read : 'read' '(' designator ')' ';' ;
	[GrammarRule("read")]
	private void read()
	{
		EnterRule_read();
		EnterRule("read", 25);
		TraceIn("read", 25);
		try { DebugEnterRule(GrammarFileName, "read");
		DebugLocation(451, 36);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:451:6: ( 'read' '(' designator ')' ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:451:8: 'read' '(' designator ')' ';'
			{
			DebugLocation(451, 8);
			Match(input,51,Follow._51_in_read862); 
			DebugLocation(451, 15);
			Match(input,16,Follow._16_in_read864); 
			DebugLocation(451, 19);
			PushFollow(Follow._designator_in_read866);
			designator();
			PopFollow();

			DebugLocation(451, 30);
			Match(input,17,Follow._17_in_read868); 
			DebugLocation(451, 34);
			Match(input,25,Follow._25_in_read870); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("read", 25);
			LeaveRule("read", 25);
			LeaveRule_read();
	    }
	 	DebugLocation(451, 36);
		} finally { DebugExitRule(GrammarFileName, "read"); }
		return;

	}
	// $ANTLR end "read"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_print() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_print() {}

	// $ANTLR start "print"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:453:1: print : 'print' '(' expression ')' ';' ;
	[GrammarRule("print")]
	private void print()
	{
		EnterRule_print();
		EnterRule("print", 26);
		TraceIn("print", 26);
		try { DebugEnterRule(GrammarFileName, "print");
		DebugLocation(453, 38);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:453:7: ( 'print' '(' expression ')' ';' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:453:9: 'print' '(' expression ')' ';'
			{
			DebugLocation(453, 9);
			Match(input,50,Follow._50_in_print878); 
			DebugLocation(453, 17);
			Match(input,16,Follow._16_in_print880); 
			DebugLocation(453, 21);
			PushFollow(Follow._expression_in_print882);
			expression();
			PopFollow();

			DebugLocation(453, 32);
			Match(input,17,Follow._17_in_print884); 
			DebugLocation(453, 36);
			Match(input,25,Follow._25_in_print886); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("print", 26);
			LeaveRule("print", 26);
			LeaveRule_print();
	    }
	 	DebugLocation(453, 38);
		} finally { DebugExitRule(GrammarFileName, "print"); }
		return;

	}
	// $ANTLR end "print"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_actualParameters() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_actualParameters() {}

	// $ANTLR start "actualParameters"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:455:1: actualParameters : '(' ( expression ( ',' expression )* )? ')' ;
	[GrammarRule("actualParameters")]
	private void actualParameters()
	{
		EnterRule_actualParameters();
		EnterRule("actualParameters", 27);
		TraceIn("actualParameters", 27);
		try { DebugEnterRule(GrammarFileName, "actualParameters");
		DebugLocation(455, 42);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:456:2: ( '(' ( expression ( ',' expression )* )? ')' )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:456:4: '(' ( expression ( ',' expression )* )? ')'
			{
			DebugLocation(456, 4);
			Match(input,16,Follow._16_in_actualParameters896); 
			DebugLocation(456, 8);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:456:8: ( expression ( ',' expression )* )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, decisionCanBacktrack[26]);
			int LA26_0 = input.LA(1);

			if ((LA26_0==CHAR||LA26_0==DOUBLE||(LA26_0>=ID && LA26_0<=INT)||LA26_0==16||LA26_0==53))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:456:9: expression ( ',' expression )*
				{
				DebugLocation(456, 9);
				PushFollow(Follow._expression_in_actualParameters899);
				expression();
				PopFollow();

				DebugLocation(456, 20);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:456:20: ( ',' expression )*
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, decisionCanBacktrack[25]);
					int LA25_0 = input.LA(1);

					if ((LA25_0==20))
					{
						alt25 = 1;
					}


					} finally { DebugExitDecision(25); }
					switch ( alt25 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:456:21: ',' expression
						{
						DebugLocation(456, 21);
						Match(input,20,Follow._20_in_actualParameters902); 
						DebugLocation(456, 25);
						PushFollow(Follow._expression_in_actualParameters904);
						expression();
						PopFollow();


						}
						break;

					default:
						goto loop25;
					}
				}

				loop25:
					;

				} finally { DebugExitSubRule(25); }


				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(456, 40);
			Match(input,17,Follow._17_in_actualParameters910); 

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("actualParameters", 27);
			LeaveRule("actualParameters", 27);
			LeaveRule_actualParameters();
	    }
	 	DebugLocation(456, 42);
		} finally { DebugExitRule(GrammarFileName, "actualParameters"); }
		return;

	}
	// $ANTLR end "actualParameters"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}

	// $ANTLR start "expression"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:458:1: expression : es ( relOp es )? ;
	[GrammarRule("expression")]
	private void expression()
	{
		EnterRule_expression();
		EnterRule("expression", 28);
		TraceIn("expression", 28);
	    string relOp12 = default(string);

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(458, 111);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:459:2: ( es ( relOp es )? )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:459:4: es ( relOp es )?
			{
			DebugLocation(459, 4);
			PushFollow(Follow._es_in_expression920);
			es();
			PopFollow();

			DebugLocation(459, 7);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:459:7: ( relOp es )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, decisionCanBacktrack[27]);
			int LA27_0 = input.LA(1);

			if ((LA27_0==15||(LA27_0>=26 && LA27_0<=27)||(LA27_0>=29 && LA27_0<=31)))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:459:8: relOp es
				{
				DebugLocation(459, 8);
				PushFollow(Follow._relOp_in_expression923);
				relOp12=relOp();
				PopFollow();

				DebugLocation(459, 14);
				pOperadores.Push(relOp12);
				DebugLocation(459, 51);
				PushFollow(Follow._es_in_expression927);
				es();
				PopFollow();

				DebugLocation(459, 54);
				aplicaOperadorPendienteQueSea(operadoresRelacionales);

				}
				break;

			}
			} finally { DebugExitSubRule(27); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("expression", 28);
			LeaveRule("expression", 28);
			LeaveRule_expression();
	    }
	 	DebugLocation(459, 111);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_es() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_es() {}

	// $ANTLR start "es"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:461:1: es : term (op= ( '+' | '-' | 'or' ) term )* ;
	[GrammarRule("es")]
	private void es()
	{
		EnterRule_es();
		EnterRule("es", 29);
		TraceIn("es", 29);
	    IToken op = default(IToken);

		try { DebugEnterRule(GrammarFileName, "es");
		DebugLocation(461, 4);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:462:2: ( term (op= ( '+' | '-' | 'or' ) term )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:462:4: term (op= ( '+' | '-' | 'or' ) term )*
			{
			DebugLocation(462, 4);
			PushFollow(Follow._term_in_es940);
			term();
			PopFollow();

			DebugLocation(462, 9);
			aplicaOperadorPendienteQueSea(masMenosOr);
			DebugLocation(463, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:463:3: (op= ( '+' | '-' | 'or' ) term )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, decisionCanBacktrack[28]);
				int LA28_0 = input.LA(1);

				if ((LA28_0==19||LA28_0==21||LA28_0==49))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:464:4: op= ( '+' | '-' | 'or' ) term
					{
					DebugLocation(464, 7);

					op=(IToken)input.LT(1);
					if (input.LA(1)==19||input.LA(1)==21||input.LA(1)==49)
					{
						input.Consume();
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(464, 28);
					pOperadores.Push((op!=null?op.Text:null));
					DebugLocation(465, 4);
					PushFollow(Follow._term_in_es973);
					term();
					PopFollow();

					DebugLocation(465, 9);
					aplicaOperadorPendienteQueSea(masMenosOr);

					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("es", 29);
			LeaveRule("es", 29);
			LeaveRule_es();
	    }
	 	DebugLocation(466, 4);
		} finally { DebugExitRule(GrammarFileName, "es"); }
		return;

	}
	// $ANTLR end "es"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_term() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_term() {}

	// $ANTLR start "term"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:468:1: term : factor (op= ( '*' | '/' | 'and' ) factor )* ;
	[GrammarRule("term")]
	private void term()
	{
		EnterRule_term();
		EnterRule("term", 30);
		TraceIn("term", 30);
	    IToken op = default(IToken);

		try { DebugEnterRule(GrammarFileName, "term");
		DebugLocation(468, 4);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:468:6: ( factor (op= ( '*' | '/' | 'and' ) factor )* )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:468:8: factor (op= ( '*' | '/' | 'and' ) factor )*
			{
			DebugLocation(468, 8);
			PushFollow(Follow._factor_in_term989);
			factor();
			PopFollow();

			DebugLocation(468, 15);
			aplicaOperadorPendienteQueSea(porEntreAnd);
			DebugLocation(469, 3);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:469:3: (op= ( '*' | '/' | 'and' ) factor )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, decisionCanBacktrack[29]);
				int LA29_0 = input.LA(1);

				if ((LA29_0==18||LA29_0==23||LA29_0==37))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:470:4: op= ( '*' | '/' | 'and' ) factor
					{
					DebugLocation(470, 7);

					op=(IToken)input.LT(1);
					if (input.LA(1)==18||input.LA(1)==23||input.LA(1)==37)
					{
						input.Consume();
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(470, 29);
					pOperadores.Push((op!=null?op.Text:null));
					DebugLocation(471, 4);
					PushFollow(Follow._factor_in_term1022);
					factor();
					PopFollow();

					DebugLocation(471, 11);
					aplicaOperadorPendienteQueSea(porEntreAnd);

					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }


			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("term", 30);
			LeaveRule("term", 30);
			LeaveRule_term();
	    }
	 	DebugLocation(472, 4);
		} finally { DebugExitRule(GrammarFileName, "term"); }
		return;

	}
	// $ANTLR end "term"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_factor() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_factor() {}

	// $ANTLR start "factor"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:474:1: factor : ( invoke |v= ID |obj= ID '.' var= ID | 'this' '.' var= ID | ID '[' expression ']' | INT | CHAR | DOUBLE | '(' expression ')' );
	[GrammarRule("factor")]
	private void factor()
	{
		EnterRule_factor();
		EnterRule("factor", 31);
		TraceIn("factor", 31);
	    IToken v = default(IToken);
	    IToken obj = default(IToken);
	    IToken var = default(IToken);
	    IToken ID13 = default(IToken);
	    IToken INT14 = default(IToken);
	    IToken CHAR15 = default(IToken);
	    IToken DOUBLE16 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "factor");
		DebugLocation(474, 2);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:475:2: ( invoke |v= ID |obj= ID '.' var= ID | 'this' '.' var= ID | ID '[' expression ']' | INT | CHAR | DOUBLE | '(' expression ')' )
			int alt30=9;
			try { DebugEnterDecision(30, decisionCanBacktrack[30]);
			switch (input.LA(1))
			{
			case ID:
				{
				switch (input.LA(2))
				{
				case 22:
					{
					int LA30_7 = input.LA(3);

					if ((LA30_7==ID))
					{
						int LA30_11 = input.LA(4);

						if ((LA30_11==16))
						{
							alt30 = 1;
						}
						else if ((LA30_11==15||(LA30_11>=17 && LA30_11<=21)||LA30_11==23||(LA30_11>=25 && LA30_11<=27)||(LA30_11>=29 && LA30_11<=31)||(LA30_11>=36 && LA30_11<=37)||LA30_11==49))
						{
							alt30 = 3;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 30, 11, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 30, 7, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 35:
					{
					alt30 = 5;
					}
					break;
				case 16:
					{
					alt30 = 1;
					}
					break;
				case 15:
				case 17:
				case 18:
				case 19:
				case 20:
				case 21:
				case 23:
				case 25:
				case 26:
				case 27:
				case 29:
				case 30:
				case 31:
				case 36:
				case 37:
				case 49:
					{
					alt30 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 30, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case 53:
				{
				alt30 = 4;
				}
				break;
			case INT:
				{
				alt30 = 6;
				}
				break;
			case CHAR:
				{
				alt30 = 7;
				}
				break;
			case DOUBLE:
				{
				alt30 = 8;
				}
				break;
			case 16:
				{
				alt30 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 30, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:475:4: invoke
				{
				DebugLocation(475, 4);
				PushFollow(Follow._invoke_in_factor1038);
				invoke();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:476:5: v= ID
				{
				DebugLocation(476, 7);
				v=(IToken)Match(input,ID,Follow._ID_in_factor1049); 
				DebugLocation(477, 4);

							VariableSymbol varSymbol = getVariable((v!=null?v.Text:null));
							pOperandos.Push(varSymbol);
							

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:481:5: obj= ID '.' var= ID
				{
				DebugLocation(481, 9);
				obj=(IToken)Match(input,ID,Follow._ID_in_factor1065); 
				DebugLocation(481, 14);
				Match(input,22,Follow._22_in_factor1067); 
				DebugLocation(481, 22);
				var=(IToken)Match(input,ID,Follow._ID_in_factor1073); 
				DebugLocation(482, 4);

							VariableSymbol objeto = getVariable((obj!=null?obj.Text:null));
							VariableSymbol field = getField((obj!=null?obj.Text:null), (var!=null?var.Text:null));
							VariableSymbol temp = getNewTemporalVarOfType(field.type.name);
							pOperandos.Push(temp);
							quadruplesList.addGETFIELD(temp.address.ToString(), objeto.address.ToString(), field.address.ToString());
							

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:489:5: 'this' '.' var= ID
				{
				DebugLocation(489, 5);
				Match(input,53,Follow._53_in_factor1085); 
				DebugLocation(489, 12);
				Match(input,22,Follow._22_in_factor1087); 
				DebugLocation(489, 20);
				var=(IToken)Match(input,ID,Follow._ID_in_factor1093); 
				DebugLocation(490, 4);

							VariableSymbol field = getInstanceVariable((var!=null?var.Text:null));
							VariableSymbol temp = getNewTemporalVarOfType(field.type.name);
							pOperandos.Push(temp);
							MethodSymbol method = (MethodSymbol)actualScope;
							quadruplesList.addGETFIELD(temp.address.ToString(), method.getThisParameterAddress(), field.address.ToString());
							

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:497:5: ID '[' expression ']'
				{
				DebugLocation(497, 5);
				ID13=(IToken)Match(input,ID,Follow._ID_in_factor1105); 
				DebugLocation(497, 8);
				Match(input,35,Follow._35_in_factor1107); 
				DebugLocation(497, 12);
				pOperadores.Push("[");
				DebugLocation(497, 37);
				PushFollow(Follow._expression_in_factor1111);
				expression();
				PopFollow();

				DebugLocation(497, 48);
				Match(input,36,Follow._36_in_factor1113); 
				DebugLocation(497, 52);
				pOperadores.Pop();
				DebugLocation(498, 4);

							verifyIsVector((ID13!=null?ID13.Text:null));
							VariableSymbol index = pOperandos.Pop();
							if(!index.type.name.Equals("int")) {
								manageException(new Exception("El subindice del Vector " + (ID13!=null?ID13.Text:null) + " debe ser de tipo int."));
							}
							else {
								VariableSymbol arr = getVariable((ID13!=null?ID13.Text:null));
								string tipo = typeOfVector(arr.type.name);
								VariableSymbol temp = getNewTemporalVarOfType(tipo);
								pOperandos.Push(temp);
								quadruplesList.addGETVECTORELEM(temp.address.ToString(), arr.address.ToString(), index.address.ToString());
							}
							

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:512:5: INT
				{
				DebugLocation(512, 5);
				INT14=(IToken)Match(input,INT,Follow._INT_in_factor1127); 
				DebugLocation(512, 9);
				pushICONST((INT14!=null?INT14.Text:null));

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:513:5: CHAR
				{
				DebugLocation(513, 5);
				CHAR15=(IToken)Match(input,CHAR,Follow._CHAR_in_factor1136); 
				DebugLocation(513, 10);
				pushCCONST((CHAR15!=null?CHAR15.Text:null));

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:514:5: DOUBLE
				{
				DebugLocation(514, 5);
				DOUBLE16=(IToken)Match(input,DOUBLE,Follow._DOUBLE_in_factor1145); 
				DebugLocation(514, 12);
				pushDCONST((DOUBLE16!=null?DOUBLE16.Text:null));

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:515:5: '(' expression ')'
				{
				DebugLocation(515, 5);
				Match(input,16,Follow._16_in_factor1154); 
				DebugLocation(515, 8);
				pOperadores.Push("(");
				DebugLocation(515, 33);
				PushFollow(Follow._expression_in_factor1157);
				expression();
				PopFollow();

				DebugLocation(515, 44);
				Match(input,17,Follow._17_in_factor1159); 
				DebugLocation(515, 48);
				pOperadores.Pop();

				}
				break;

			}
		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("factor", 31);
			LeaveRule("factor", 31);
			LeaveRule_factor();
	    }
	 	DebugLocation(516, 2);
		} finally { DebugExitRule(GrammarFileName, "factor"); }
		return;

	}
	// $ANTLR end "factor"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_relOp() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_relOp() {}

	// $ANTLR start "relOp"
	// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:518:1: relOp returns [string operador] : op= ( '==' | '!=' | '>' | '>=' | '<' | '<=' ) ;
	[GrammarRule("relOp")]
	private string relOp()
	{
		EnterRule_relOp();
		EnterRule("relOp", 32);
		TraceIn("relOp", 32);
	    string operador = default(string);


	    IToken op = default(IToken);

		try { DebugEnterRule(GrammarFileName, "relOp");
		DebugLocation(518, 101);
		try
		{
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:518:31: (op= ( '==' | '!=' | '>' | '>=' | '<' | '<=' ) )
			DebugEnterAlt(1);
			// C:\\dev\\reptile\\reptile\\repositorio\\codigo\\Reptile.g:518:34: op= ( '==' | '!=' | '>' | '>=' | '<' | '<=' )
			{
			DebugLocation(518, 37);

			op=(IToken)input.LT(1);
			if (input.LA(1)==15||(input.LA(1)>=26 && input.LA(1)<=27)||(input.LA(1)>=29 && input.LA(1)<=31))
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(518, 79);
			operador = (op!=null?op.Text:null);

			}

		}

		    catch (RecognitionException ex) {
		        throw ex;
		    }

		finally
		{
			TraceOut("relOp", 32);
			LeaveRule("relOp", 32);
			LeaveRule_relOp();
	    }
	 	DebugLocation(518, 101);
		} finally { DebugExitRule(GrammarFileName, "relOp"); }
		return operador;

	}
	// $ANTLR end "relOp"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _classes_in_program61 = new BitSet(new ulong[]{0x40800000000000UL});
		public static readonly BitSet _vars_in_program66 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _methods_in_program69 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _mainMethod_in_program71 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _55_in_mainMethod80 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_mainMethod82 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_mainMethod84 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_mainMethod86 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_mainMethod88 = new BitSet(new ulong[]{0x57C100002000400UL});
		public static readonly BitSet _vars_in_mainMethod89 = new BitSet(new ulong[]{0x53C100002000400UL});
		public static readonly BitSet _someStatements_in_mainMethod92 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_mainMethod94 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _40_in_classes105 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_classes107 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _classDecl_in_classes109 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _39_in_classDecl124 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_classDecl130 = new BitSet(new ulong[]{0x200080000000000UL});
		public static readonly BitSet _superClass_in_classDecl133 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_classDecl139 = new BitSet(new ulong[]{0x440800000000000UL});
		public static readonly BitSet _vars_in_classDecl141 = new BitSet(new ulong[]{0x400800000000000UL});
		public static readonly BitSet _methods_in_classDecl144 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_classDecl147 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _43_in_superClass157 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_superClass159 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _54_in_vars170 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_vars172 = new BitSet(new ulong[]{0x224700000402UL});
		public static readonly BitSet _varDecl_in_vars174 = new BitSet(new ulong[]{0x224700000402UL});
		public static readonly BitSet _primitiveType_in_varDecl199 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _referenceType_in_varDecl207 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_varDecl212 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_varDecl216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_primitiveType235 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _vectorType_in_referenceType261 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_referenceType271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_vectorType303 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _34_in_vectorType313 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _33_in_vectorType323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _55_in_voidType344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_formalParamType361 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _referenceType_in_formalParamType375 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _47_in_methods394 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_methods396 = new BitSet(new ulong[]{0x80224700000402UL});
		public static readonly BitSet _methodDeclaration_in_methods398 = new BitSet(new ulong[]{0x80224700000402UL});
		public static readonly BitSet _primitiveType_in_methodDeclaration417 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _referenceType_in_methodDeclaration425 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _voidType_in_methodDeclaration433 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_methodDeclaration440 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_methodDeclaration446 = new BitSet(new ulong[]{0x224700020400UL});
		public static readonly BitSet _formalParameters_in_methodDeclaration448 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_methodDeclaration451 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_methodDeclaration455 = new BitSet(new ulong[]{0x57C100002000400UL});
		public static readonly BitSet _vars_in_methodDeclaration457 = new BitSet(new ulong[]{0x53C100002000400UL});
		public static readonly BitSet _someStatements_in_methodDeclaration460 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_methodDeclaration462 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _formalParamType_in_formalParam480 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_formalParam482 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _formalParam_in_formalParameters498 = new BitSet(new ulong[]{0x100002UL});
		public static readonly BitSet _20_in_formalParameters501 = new BitSet(new ulong[]{0x224700000400UL});
		public static readonly BitSet _formalParam_in_formalParameters503 = new BitSet(new ulong[]{0x100002UL});
		public static readonly BitSet _statement_in_someStatements515 = new BitSet(new ulong[]{0x13C100002000402UL});
		public static readonly BitSet _assignment_in_statement524 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _invoke_in_statement530 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_statement532 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _if_inst_in_statement538 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _while_inst_in_statement544 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _return_inst_in_statement550 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _read_in_statement556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _print_in_statement562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _25_in_statement568 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _designator_in_assignment585 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _28_in_assignment587 = new BitSet(new ulong[]{0x21000000010C50UL});
		public static readonly BitSet _expression_in_assignment596 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _48_in_assignment602 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_assignment604 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_assignment606 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_assignment608 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _48_in_assignment620 = new BitSet(new ulong[]{0x700000000UL});
		public static readonly BitSet _vectorType_in_assignment622 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _35_in_assignment624 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _INT_in_assignment628 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _36_in_assignment630 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_assignment653 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_designator672 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_designator689 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _22_in_designator692 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_designator698 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _53_in_designator711 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _22_in_designator713 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_designator719 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_designator738 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _35_in_designator740 = new BitSet(new ulong[]{0x20000000010C50UL});
		public static readonly BitSet _expression_in_designator744 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _36_in_designator746 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_invoke769 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _actualParameters_in_invoke771 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_invoke779 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _22_in_invoke781 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_invoke783 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _actualParameters_in_invoke785 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _44_in_if_inst798 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_if_inst800 = new BitSet(new ulong[]{0x20000000010C50UL});
		public static readonly BitSet _expression_in_if_inst802 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_if_inst804 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_if_inst806 = new BitSet(new ulong[]{0x53C100002000400UL});
		public static readonly BitSet _someStatements_in_if_inst808 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_if_inst810 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _42_in_if_inst813 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_if_inst815 = new BitSet(new ulong[]{0x53C100002000400UL});
		public static readonly BitSet _someStatements_in_if_inst817 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_if_inst819 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _56_in_while_inst829 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_while_inst831 = new BitSet(new ulong[]{0x20000000010C50UL});
		public static readonly BitSet _expression_in_while_inst833 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_while_inst835 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_while_inst837 = new BitSet(new ulong[]{0x53C100002000400UL});
		public static readonly BitSet _someStatements_in_while_inst839 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_while_inst841 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _52_in_return_inst849 = new BitSet(new ulong[]{0x20000002010C50UL});
		public static readonly BitSet _expression_in_return_inst851 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_return_inst854 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _51_in_read862 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_read864 = new BitSet(new ulong[]{0x20000000000400UL});
		public static readonly BitSet _designator_in_read866 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_read868 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_read870 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _50_in_print878 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_print880 = new BitSet(new ulong[]{0x20000000010C50UL});
		public static readonly BitSet _expression_in_print882 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_print884 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_print886 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _16_in_actualParameters896 = new BitSet(new ulong[]{0x20000000030C50UL});
		public static readonly BitSet _expression_in_actualParameters899 = new BitSet(new ulong[]{0x120000UL});
		public static readonly BitSet _20_in_actualParameters902 = new BitSet(new ulong[]{0x20000000010C50UL});
		public static readonly BitSet _expression_in_actualParameters904 = new BitSet(new ulong[]{0x120000UL});
		public static readonly BitSet _17_in_actualParameters910 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _es_in_expression920 = new BitSet(new ulong[]{0xEC008002UL});
		public static readonly BitSet _relOp_in_expression923 = new BitSet(new ulong[]{0x20000000010C50UL});
		public static readonly BitSet _es_in_expression927 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _term_in_es940 = new BitSet(new ulong[]{0x2000000280002UL});
		public static readonly BitSet _set_in_es955 = new BitSet(new ulong[]{0x20000000010C50UL});
		public static readonly BitSet _term_in_es973 = new BitSet(new ulong[]{0x2000000280002UL});
		public static readonly BitSet _factor_in_term989 = new BitSet(new ulong[]{0x2000840002UL});
		public static readonly BitSet _set_in_term1004 = new BitSet(new ulong[]{0x20000000010C50UL});
		public static readonly BitSet _factor_in_term1022 = new BitSet(new ulong[]{0x2000840002UL});
		public static readonly BitSet _invoke_in_factor1038 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_factor1049 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_factor1065 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _22_in_factor1067 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_factor1073 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _53_in_factor1085 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _22_in_factor1087 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_factor1093 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_factor1105 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _35_in_factor1107 = new BitSet(new ulong[]{0x20000000010C50UL});
		public static readonly BitSet _expression_in_factor1111 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _36_in_factor1113 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_factor1127 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHAR_in_factor1136 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOUBLE_in_factor1145 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _16_in_factor1154 = new BitSet(new ulong[]{0x20000000010C50UL});
		public static readonly BitSet _expression_in_factor1157 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_factor1159 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_relOp1180 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
